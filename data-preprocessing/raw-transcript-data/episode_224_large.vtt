WEBVTT

00:00.000 --> 00:03.600
 The following is a conversation with Travis Oliphant,

00:03.600 --> 00:05.520
 one of the most impactful programmers

00:05.520 --> 00:07.900
 and data scientists ever.

00:07.900 --> 00:12.760
 He created NumPy, SciPy, and Anaconda.

00:12.760 --> 00:14.500
 NumPy formed the foundation

00:14.500 --> 00:17.060
 of tensor based machine learning in Python,

00:17.060 --> 00:18.880
 SciPy formed the foundation

00:18.880 --> 00:20.960
 of scientific programming in Python,

00:20.960 --> 00:23.980
 and Anaconda, specifically with Conda,

00:23.980 --> 00:27.620
 made Python more accessible to a much larger audience.

00:27.620 --> 00:31.200
 Travis's life work across a large number of programming

00:31.200 --> 00:34.760
 and entrepreneurial efforts has and will continue

00:34.760 --> 00:38.440
 to have immeasurable impact on millions of lives

00:38.440 --> 00:41.360
 by empowering scientists and engineers

00:41.360 --> 00:43.600
 in big companies, small companies,

00:43.600 --> 00:47.200
 and open source communities to take on difficult problems

00:47.200 --> 00:50.520
 and solve them with the power of programming.

00:50.520 --> 00:53.440
 Plus, he's a truly kind human being,

00:53.440 --> 00:56.000
 which is something that when combined with vision

00:56.000 --> 00:58.400
 and ambition makes for a great leader

00:58.400 --> 01:01.160
 and a great person to chat with.

01:01.160 --> 01:02.320
 To support this podcast,

01:02.320 --> 01:04.880
 please check out our sponsors in the description.

01:04.880 --> 01:06.960
 This is the Lex Friedman Podcast,

01:06.960 --> 01:10.640
 and here is my conversation with Travis Oliphant.

01:11.520 --> 01:14.480
 What was the first computer program you've ever written?

01:14.480 --> 01:15.320
 Do you remember?

01:15.320 --> 01:16.920
 Whoa, that's a good question.

01:16.920 --> 01:18.380
 I think it was in fourth grade.

01:18.380 --> 01:20.920
 Just a simple loop in BASIC.

01:20.920 --> 01:23.320
 BASIC. BASIC, yeah, on an Atari 800,

01:23.320 --> 01:26.840
 Atari 400, I think, or maybe it was an Atari 800.

01:26.840 --> 01:28.300
 It was a part of a class,

01:28.300 --> 01:32.560
 and we just were just BASIC loops to print things out.

01:32.560 --> 01:34.920
 Did you use go to statements?

01:34.920 --> 01:38.000
 Yes, yes, we used go to statements.

01:38.000 --> 01:39.560
 I remember in the early days,

01:39.560 --> 01:41.160
 that's when I first realized

01:41.160 --> 01:43.320
 there's like principles to programming,

01:43.320 --> 01:45.720
 when I was told that don't use go to statements.

01:45.720 --> 01:48.080
 Those are bad software engineering principles,

01:48.080 --> 01:52.040
 like it goes against what great, beautiful code is.

01:52.040 --> 01:54.800
 I was like, oh, okay, there's rules to this game.

01:54.800 --> 01:56.240
 I didn't see that until high school

01:56.240 --> 01:58.360
 when I took an AP computer science course.

01:58.360 --> 02:02.200
 I did a lot of other kinds of just programming in TI,

02:02.200 --> 02:04.160
 but finally, when I took an AP computer science course

02:04.160 --> 02:05.720
 in Pascal.

02:05.720 --> 02:06.560
 Wow.

02:06.560 --> 02:07.440
 That's, yeah, it was Pascal.

02:07.440 --> 02:09.760
 That's when I, oh, there are these principles.

02:09.760 --> 02:11.320
 Not C or C++?

02:11.320 --> 02:14.660
 No, I didn't take C until the next year in college.

02:14.660 --> 02:18.100
 I had a course in C, but I haven't done much in Pascal,

02:18.100 --> 02:20.160
 just that AP computer science course.

02:20.160 --> 02:23.480
 Now, sorry for the romanticized question,

02:23.480 --> 02:26.720
 but when did you first fall in love with programming?

02:26.720 --> 02:27.880
 Oh, man, good question.

02:27.880 --> 02:30.280
 I think actually when I was 10,

02:30.280 --> 02:33.460
 my dad got us a TI Timex Sinclair,

02:33.460 --> 02:37.200
 and he was excited about the spreadsheet capability,

02:37.200 --> 02:39.560
 and then, but I made him get the basic,

02:39.560 --> 02:41.840
 the add ons we could actually program in basic,

02:41.840 --> 02:44.520
 and just being able to write instructions

02:44.520 --> 02:45.960
 and have the computer do something.

02:45.960 --> 02:50.080
 Then we got a TI 994A when I was about 12,

02:50.080 --> 02:52.960
 and I would just, it had sprites and graphics and music.

02:52.960 --> 02:55.320
 You could actually program it to do music.

02:55.320 --> 02:58.600
 That's when I really sort of fell in love with programming.

02:58.600 --> 03:01.060
 So this is a full, like a real computer

03:01.060 --> 03:04.120
 with like, with memory and storage,

03:04.120 --> 03:05.240
 processors and whatnot,

03:05.240 --> 03:07.360
 because you say TI. Yeah, the Timex Sinclair

03:07.360 --> 03:09.680
 was one of the very first, it was a cheap, cheap,

03:09.680 --> 03:12.760
 like, I think it was, well, it was still expensive,

03:12.760 --> 03:14.440
 but it was 2K of memory.

03:14.440 --> 03:16.760
 We got the 16K add on pack,

03:16.760 --> 03:19.000
 but yeah, it had memory, and you could program it.

03:19.000 --> 03:20.920
 You had the, in order to store your programs,

03:20.920 --> 03:22.880
 you had to attach a tape drive.

03:22.880 --> 03:24.400
 Remember that old, the sound that would play

03:24.400 --> 03:29.400
 when you converted the modems would convert digital bits

03:29.440 --> 03:31.920
 to audio files set on a tape drive.

03:31.920 --> 03:34.760
 Still remember that sound, but that was the storage.

03:34.760 --> 03:36.480
 And what was the programming language, do you remember?

03:36.480 --> 03:37.320
 It was basic. It was basic.

03:37.320 --> 03:38.980
 And then they had a VisiCalc,

03:38.980 --> 03:40.600
 and so a little bit of spreadsheet programming

03:40.600 --> 03:42.760
 in VisiCalc, but mostly just some basic.

03:42.760 --> 03:46.340
 Do you remember what kind of things drew you to programming?

03:46.340 --> 03:50.360
 Was it working with data, was it video games?

03:50.360 --> 03:52.600
 Games, math, mathy stuff?

03:52.600 --> 03:54.800
 Yeah, I've always loved math,

03:54.800 --> 03:58.080
 and a lot of people think they don't like math

03:58.080 --> 04:00.440
 because I think when they're exposed to it early,

04:00.440 --> 04:02.080
 it's about memory.

04:02.080 --> 04:03.260
 When you're exposed to math early,

04:03.260 --> 04:04.280
 you have a good short term memory,

04:04.280 --> 04:05.920
 can remember his timetables.

04:05.920 --> 04:08.600
 And I do have a reasonably, I mean, not perfect,

04:08.600 --> 04:12.480
 but a reasonably long little short term memory buffer.

04:12.480 --> 04:14.320
 And so I did great at timetables.

04:14.320 --> 04:15.840
 I said, oh, I'm good at math.

04:15.840 --> 04:17.360
 But I started to really like math,

04:17.360 --> 04:20.320
 just the problem solving aspect.

04:20.320 --> 04:25.040
 And so computing was problem solving applied.

04:25.040 --> 04:28.280
 And so that's always kind of been the draw,

04:28.280 --> 04:30.480
 kind of coupled with the mathematics.

04:30.480 --> 04:33.920
 Did you ever see the computer as like an extension

04:33.920 --> 04:36.520
 of your mind, like something able to achieve?

04:36.520 --> 04:37.760
 Not till later.

04:37.760 --> 04:38.600
 Okay.

04:38.600 --> 04:39.440
 Yeah, not then.

04:39.440 --> 04:40.880
 It's just like a little set of puzzles

04:40.880 --> 04:43.520
 that you can play with and you can play with math puzzles.

04:43.520 --> 04:46.120
 Yeah, it was too rudimentary early on.

04:46.120 --> 04:49.160
 Like it was sort of, yeah, it was a lot of work

04:49.160 --> 04:51.440
 to actually take a thought you'd have

04:51.440 --> 04:53.120
 and actually get it implemented.

04:53.120 --> 04:56.020
 And that's still work, but it's getting easier.

04:56.020 --> 04:58.240
 And so yeah, I would say that's definitely

04:58.240 --> 04:59.560
 what's attracting me to Python

04:59.560 --> 05:02.140
 is that that was more real, right?

05:02.140 --> 05:04.840
 I could think in Python.

05:04.840 --> 05:05.800
 Speaking of foreign language,

05:05.800 --> 05:08.400
 I only speak another language fluently besides English,

05:08.400 --> 05:09.220
 which is Spanish.

05:09.220 --> 05:11.720
 And I remember the day when I would dream in Spanish

05:11.720 --> 05:13.440
 and you start to think in that language.

05:13.440 --> 05:15.340
 And then you actually, I do definitely believe

05:15.340 --> 05:19.640
 that language limits or expands your thinking.

05:19.640 --> 05:21.600
 There's some languages that actually lead you

05:21.600 --> 05:23.860
 to certain thought processes.

05:23.860 --> 05:27.280
 Yeah, like, so I speak Russian fluently

05:27.280 --> 05:30.960
 and that's certainly a language that leads you

05:30.960 --> 05:33.240
 down certain thought processes.

05:33.240 --> 05:36.220
 Well, yeah, I mean, there's a history

05:36.220 --> 05:41.220
 of the two world wars of millions of people starving

05:41.220 --> 05:44.180
 to death or near to death throughout its history

05:44.180 --> 05:48.020
 of suffering, of injustice, like this promise sold

05:48.020 --> 05:50.900
 to the people and then the carpet

05:50.900 --> 05:53.340
 or whatever is swept from under them.

05:53.340 --> 05:54.660
 And it's like broken promises.

05:54.660 --> 05:58.100
 And all of that pain and melancholy is in the language,

05:58.100 --> 06:01.700
 the sad songs, the sad hopeful songs,

06:01.700 --> 06:05.260
 the over romanticized, like, I love you, I hate you,

06:05.260 --> 06:09.980
 the sort of the swings between all the various spectrums

06:09.980 --> 06:13.740
 of emotion, so that's all within the language.

06:13.740 --> 06:18.020
 The way it's twisted, there's a strong culture

06:18.020 --> 06:20.380
 of rhyming poetry, so like the bards,

06:20.380 --> 06:24.740
 like the sync, there's a musicality to the language too.

06:24.740 --> 06:27.380
 Did Dostoevsky write in Russian?

06:27.380 --> 06:30.180
 Yeah, so like Dostoevsky, Tostoy, all the,

06:32.100 --> 06:32.940
 all the.

06:32.940 --> 06:34.660
 The ones that I know about, which are translated

06:34.660 --> 06:36.340
 and I'm curious how the translations.

06:36.340 --> 06:40.860
 So Dostoevsky did not use the musicality

06:40.860 --> 06:42.180
 of the language too much.

06:42.180 --> 06:44.180
 So it actually translates pretty well

06:44.180 --> 06:46.540
 because it's so philosophically dense

06:46.540 --> 06:48.460
 that the story does a lot of the work,

06:48.460 --> 06:51.140
 but there's a bunch of things that are untranslatable.

06:51.140 --> 06:53.580
 Certainly the poetry is not translatable.

06:53.580 --> 06:57.940
 I actually have a few conversations coming up offline

06:57.940 --> 06:59.980
 and also in this podcast with people

06:59.980 --> 07:01.940
 who've translated Dostoevsky.

07:01.940 --> 07:06.340
 And that's for people who worked, who work in this field,

07:06.340 --> 07:07.340
 know how difficult that is.

07:07.340 --> 07:10.660
 Sometimes you can spend months thinking

07:10.660 --> 07:12.340
 about a single sentence, right?

07:12.340 --> 07:15.220
 In context, like, cause there's just the magic

07:15.220 --> 07:17.860
 captured by that sentence and how do you translate

07:17.860 --> 07:18.940
 just in the right way?

07:18.940 --> 07:22.380
 Because those words can be really powerful.

07:22.380 --> 07:24.300
 There's a famous line,

07:24.300 --> 07:27.140
 beauty will save the world from Dostoevsky.

07:27.140 --> 07:29.500
 You know, there's so many ways to translate that.

07:29.500 --> 07:32.700
 And you're right, the language gives you the tools

07:32.700 --> 07:34.140
 with which to tell the story,

07:34.140 --> 07:37.260
 but it also leads your mind down certain trajectories

07:37.260 --> 07:39.660
 and paths to where over time,

07:39.660 --> 07:41.140
 as you think in that language,

07:41.140 --> 07:42.740
 you become a different human being.

07:42.740 --> 07:43.740
 Yes. Yeah.

07:43.740 --> 07:45.860
 Yeah, that's a fascinating reality, I think.

07:45.860 --> 07:47.020
 I know people have explored that,

07:47.020 --> 07:49.740
 but it's just rediscovered.

07:49.740 --> 07:52.340
 Well, we don't, we live in our own like little pockets.

07:52.340 --> 07:56.860
 Like this is the sad thing is I feel like unfortunately,

07:56.860 --> 07:59.140
 given time and given getting older,

07:59.140 --> 08:03.620
 I'll never know China, the Chinese world,

08:03.620 --> 08:05.780
 because I don't truly know the language.

08:05.780 --> 08:08.300
 Same with Japanese, I don't truly know Japanese

08:08.300 --> 08:10.340
 and Portuguese and Brazil,

08:10.340 --> 08:12.060
 that whole South American continent.

08:12.060 --> 08:14.460
 Like, yeah, I'll go to Brazil and Argentina,

08:14.460 --> 08:17.100
 but will I truly understand the people

08:17.100 --> 08:18.500
 if I don't understand the language?

08:18.500 --> 08:23.500
 It's sad because I wonder how much,

08:23.500 --> 08:25.220
 how many geniuses were missing

08:25.220 --> 08:28.540
 because so much of the scientific world,

08:28.540 --> 08:31.460
 so much of the technical world is in English,

08:31.460 --> 08:33.140
 and so much of it might be lost

08:33.140 --> 08:36.100
 because it's just we don't have the common language.

08:36.100 --> 08:36.940
 I completely agree.

08:36.940 --> 08:40.620
 I'm very much in that vein of there's a lot of genius

08:40.620 --> 08:41.780
 out there that we miss,

08:41.780 --> 08:45.060
 and it's sort of fortunate when it bubbles up

08:45.060 --> 08:48.700
 into something that we can understand or process,

08:48.700 --> 08:50.420
 there's a lot we miss.

08:50.420 --> 08:54.060
 So I tend to lean towards really loving democratization

08:54.060 --> 08:55.420
 or things that empower people

08:55.420 --> 09:00.140
 or very resistant sort of authoritarian structures.

09:00.140 --> 09:01.900
 Fundamentally for that reason,

09:01.900 --> 09:04.740
 well, several reasons, but it just hurts us.

09:04.740 --> 09:06.420
 We're soft.

09:06.420 --> 09:09.020
 So speaking of languages that empower you,

09:09.020 --> 09:11.820
 so Python was the first language for me

09:11.820 --> 09:16.780
 that I really enjoyed thinking in, as you said.

09:16.780 --> 09:18.500
 Sounds like you shared my experience too.

09:18.500 --> 09:19.620
 So when did you first,

09:19.620 --> 09:21.900
 do you remember when you first kind of connected with Python,

09:21.900 --> 09:23.740
 maybe even fell in love with Python?

09:23.740 --> 09:24.580
 It's a good question.

09:24.580 --> 09:25.500
 It was a process.

09:25.500 --> 09:26.540
 It took about a year.

09:26.540 --> 09:29.500
 I first encountered Python in 1997.

09:29.500 --> 09:31.740
 I was a graduate student studying biomedical engineering

09:31.740 --> 09:32.980
 at the Mayo Clinic.

09:32.980 --> 09:34.700
 And I had previously,

09:34.700 --> 09:39.340
 I'd been involved in taking information from satellites.

09:39.340 --> 09:41.340
 I was an electrical engineering student

09:41.340 --> 09:42.660
 used to taking information

09:42.660 --> 09:44.060
 and trying to get something out of it,

09:44.060 --> 09:46.140
 doing some data processing, getting information out of it.

09:46.140 --> 09:47.660
 And I'd done that in MATLAB.

09:47.660 --> 09:49.140
 I'd done that in Perl.

09:49.140 --> 09:52.540
 I'd done that in scripting on a VMS.

09:52.540 --> 09:54.260
 There's actually a VAX VMS system,

09:54.260 --> 09:57.980
 they had their own little scripting tools around Fortran.

09:57.980 --> 09:58.820
 Done a lot of that.

09:58.820 --> 10:00.820
 And then as a graduate student,

10:00.820 --> 10:04.420
 I was looking for something and encountered Python.

10:04.420 --> 10:06.140
 And because Python had an array,

10:06.140 --> 10:09.100
 had two things that made me not filter it away.

10:09.100 --> 10:10.380
 Because I was filtering a bunch of stuff,

10:10.380 --> 10:11.700
 as Yorick, I looked at Yorick,

10:11.700 --> 10:14.420
 I looked at a few other languages that are out there

10:14.420 --> 10:17.700
 at the time in 1997, but it had arrays.

10:17.700 --> 10:19.060
 There's a library called Numeric

10:19.060 --> 10:20.860
 that had just been written in 95,

10:20.860 --> 10:23.740
 like not very, not too much earlier.

10:23.740 --> 10:26.980
 By an MIT alum, Jim Huganen.

10:26.980 --> 10:29.100
 You know, and I went back and read the mailing list

10:29.100 --> 10:30.300
 to see the history of how it grew.

10:30.300 --> 10:31.220
 And there was a very interesting,

10:31.220 --> 10:32.380
 it's fascinating to do that actually,

10:32.380 --> 10:36.020
 to see how this emergent cooperation,

10:36.020 --> 10:39.500
 unstructured cooperation happens in the open source world

10:39.500 --> 10:43.300
 that led to a lot of this collective programming,

10:43.300 --> 10:45.140
 which is something maybe we might get into a little later,

10:45.140 --> 10:46.100
 but what that looks like.

10:46.100 --> 10:48.340
 What gap did Numeric fill?

10:48.340 --> 10:50.260
 Numeric filled the gap of having an array object.

10:50.260 --> 10:51.580
 There was no array object.

10:51.580 --> 10:52.420
 There was no array.

10:52.420 --> 10:55.380
 There was a one dimensional byte concept,

10:55.380 --> 10:57.580
 but there was no n dimensional,

10:57.580 --> 11:00.700
 two, three, four dimensional tensor they call it now.

11:00.700 --> 11:03.260
 I'm still in the category that a tensor is another thing

11:03.260 --> 11:05.220
 and it's just an ndarray we should call it,

11:05.220 --> 11:07.180
 but kind of lost that battle.

11:08.340 --> 11:10.140
 There's many battles in this world,

11:10.140 --> 11:12.060
 some of which we win, some we lose.

11:12.060 --> 11:13.620
 That's exactly right.

11:13.620 --> 11:17.180
 So, but it had no math to it.

11:17.180 --> 11:20.820
 So Numeric had math and a basic way to think in arrays.

11:20.820 --> 11:21.820
 So I was looking for that,

11:21.820 --> 11:23.620
 and it had complex numbers,

11:24.980 --> 11:26.380
 a lot of programming languages.

11:26.380 --> 11:28.100
 And you can see it because,

11:28.100 --> 11:29.500
 if you're just a computer scientist,

11:29.500 --> 11:32.060
 you think, ah, complex numbers are just two floats.

11:32.060 --> 11:34.980
 So you can, people can build that on.

11:34.980 --> 11:36.740
 But in practice, a complex number

11:36.740 --> 11:38.980
 as one of the significant algebras

11:38.980 --> 11:40.740
 that helps connect a lot of physical

11:40.740 --> 11:42.260
 and mathematical ideas,

11:42.260 --> 11:45.100
 particularly FFT for an electrical engineer.

11:45.100 --> 11:48.160
 And it's a really important concept

11:48.160 --> 11:50.820
 and not having it means you have to develop it

11:50.820 --> 11:54.300
 several times and those times may not share an approach.

11:54.300 --> 11:55.700
 One of the common things in programming,

11:55.700 --> 11:59.060
 one of the things programming enables is abstractions.

11:59.060 --> 12:01.180
 But when you have shared abstractions, it's even better.

12:01.180 --> 12:02.980
 It sort of gets to the level of language

12:02.980 --> 12:05.540
 of actually we all think of this the same way,

12:05.540 --> 12:07.940
 which is both powerful and dangerous, right?

12:07.940 --> 12:11.180
 Because powerful in that we now can quickly

12:11.180 --> 12:13.340
 make bigger and higher level things

12:13.340 --> 12:14.800
 on top of those abstractions dangerous

12:14.800 --> 12:17.100
 because it also limits us as to the things

12:17.100 --> 12:20.500
 we maybe left behind in producing that abstraction,

12:20.500 --> 12:21.900
 which is at the heart of programming today

12:21.900 --> 12:24.420
 and actually building around the programming world.

12:24.420 --> 12:26.580
 I think it's a fascinating philosophical topic.

12:26.580 --> 12:28.380
 Yeah, they will continue for many years, I think.

12:28.380 --> 12:29.220
 They'll continue for many years.

12:29.220 --> 12:31.260
 As we build more and more and more abstractions.

12:31.260 --> 12:32.340
 Yes, I often think about, you know,

12:32.340 --> 12:35.060
 we have a world that's built on these abstractions

12:35.060 --> 12:37.500
 that were they the only ones possible?

12:37.500 --> 12:39.860
 Certainly not, but they led to,

12:39.860 --> 12:42.300
 you know, it's very hard to do it differently.

12:42.300 --> 12:44.980
 Like there's an inertia that's very hard to,

12:44.980 --> 12:47.740
 you know, push out, push away from.

12:47.740 --> 12:49.640
 That has implications for things like,

12:49.640 --> 12:50.720
 you know, the Julia language,

12:50.720 --> 12:52.680
 which you have heard of, I'm sure.

12:52.680 --> 12:55.700
 And I've met the creators and I liked Julia.

12:55.700 --> 12:56.580
 It's a really cool language,

12:56.580 --> 12:59.300
 but they struggled to kind of against the,

12:59.300 --> 13:03.420
 just the tide of like this inertia of people using Python.

13:03.420 --> 13:05.820
 And, you know, there's strategies to approach that,

13:05.820 --> 13:07.580
 but nonetheless, it's a phenomena.

13:07.580 --> 13:09.580
 And sometimes, so I love complex numbers

13:09.580 --> 13:12.260
 and I love to raise, so I looked at Python.

13:12.260 --> 13:15.260
 And then I had the experience, I did some stuff in Python

13:15.260 --> 13:16.380
 and I was just doing my PhD.

13:16.380 --> 13:19.700
 So I was out, my focus was on,

13:19.700 --> 13:22.180
 I was actually doing a combination of MRI and ultrasound

13:22.180 --> 13:24.740
 and looking at a phenomenon called elastography,

13:24.740 --> 13:27.020
 which is you push waves into the body

13:27.020 --> 13:30.300
 and observe those waves, like you can actually measure them.

13:30.300 --> 13:32.780
 And then you do mathematical inversion

13:32.780 --> 13:35.220
 to see what the elasticity is.

13:35.220 --> 13:36.820
 And so that's the problem I was solving

13:36.820 --> 13:39.780
 is how to do that with both ultrasound and MRI.

13:39.780 --> 13:41.380
 I needed some tool to do that with.

13:41.380 --> 13:44.260
 So I was starting to use Python in 97.

13:44.260 --> 13:47.340
 In 98, I went back, looked at what I'd written

13:47.340 --> 13:49.560
 and realized I could still understand it,

13:49.560 --> 13:50.900
 which is not the experience I'd had

13:50.900 --> 13:53.660
 when doing Perl in 95, right?

13:53.660 --> 13:55.620
 I'd done the same thing and then I looked back

13:55.620 --> 13:58.360
 and I forgotten what I was even saying.

13:58.360 --> 14:00.700
 Now, you know, I'm not saying, so that may,

14:00.700 --> 14:02.400
 hey, this may work, I like this.

14:02.400 --> 14:04.980
 This is something I can retain

14:04.980 --> 14:07.620
 without becoming an expert per se.

14:07.620 --> 14:10.380
 And so that led me to go, I'm gonna push more into this.

14:10.380 --> 14:14.820
 And then that 98 was kind of when I started

14:14.820 --> 14:16.820
 to fall in love with Python, I would say.

14:18.300 --> 14:20.900
 A few peculiar things about Python.

14:20.900 --> 14:22.940
 So maybe compare it to Perl,

14:22.940 --> 14:24.500
 compare it to some of the other languages.

14:24.500 --> 14:26.320
 So there's no braces.

14:26.320 --> 14:27.160
 Yeah.

14:27.160 --> 14:31.960
 So space is used, indentation, I should say,

14:31.960 --> 14:33.980
 is used as part of the language.

14:33.980 --> 14:35.540
 Yeah, right.

14:35.540 --> 14:39.980
 So did you, I mean, that's quite a leap.

14:39.980 --> 14:41.180
 Were you comfortable with that leap

14:41.180 --> 14:42.740
 or were you just very open minded?

14:42.740 --> 14:43.580
 It's a good question.

14:43.580 --> 14:48.040
 I was open minded, so I was cognizant of the concern.

14:48.040 --> 14:52.060
 And it definitely has, it has specific challenges.

14:52.060 --> 14:53.520
 You know, cut and pasting.

14:53.520 --> 14:55.460
 For example, when you're cut and pasting code,

14:55.460 --> 14:57.220
 and if your editors aren't supportive of that,

14:57.220 --> 14:58.980
 if you're putting it into a terminal,

14:58.980 --> 15:01.020
 and particularly in the past when terminals

15:01.020 --> 15:03.140
 didn't necessarily have the intelligence to manage it now.

15:03.140 --> 15:05.100
 Now, I, Python, and Jupyter Notebooks

15:05.100 --> 15:06.820
 handle that just fine, so there's really no problem.

15:06.820 --> 15:08.740
 But in the past, it created some challenges,

15:08.740 --> 15:12.460
 formatting challenges, also mixed tabs and spaces.

15:12.460 --> 15:14.740
 If editors weren't, you weren't clear

15:14.740 --> 15:16.860
 on what was happening, you would have these issues.

15:16.860 --> 15:19.180
 So there were really concrete reasons about it

15:19.180 --> 15:20.400
 that I heard and understood.

15:20.400 --> 15:23.960
 I never really encountered a problem with it personally.

15:23.960 --> 15:26.480
 Like, it was occasional annoyances,

15:26.480 --> 15:28.420
 but I really liked the fact

15:28.420 --> 15:31.060
 that it didn't have all this extra characters, right?

15:31.060 --> 15:33.100
 That these extra characters didn't show up

15:33.100 --> 15:35.420
 in my visual field when I was just trying

15:35.420 --> 15:38.000
 to process understanding a snippet of code.

15:38.000 --> 15:39.260
 Yeah, there's a cleanness to it.

15:39.260 --> 15:41.140
 But, I mean, the idea is supposed to be

15:41.140 --> 15:43.300
 that Perl also has a cleanness to it

15:43.300 --> 15:46.500
 because of the minimalism of how many characters

15:46.500 --> 15:48.420
 it takes to express a certain thing.

15:48.420 --> 15:49.820
 So it's very compact.

15:49.820 --> 15:52.300
 But what you realize with that compactness comes,

15:53.560 --> 15:57.100
 there's a culture that prizes compactness,

15:57.100 --> 15:58.900
 and so the code gets more and more compact

15:58.900 --> 16:01.860
 and less and less readable to a point where it's like,

16:03.600 --> 16:05.420
 like, to be a good programmer in Perl,

16:05.420 --> 16:07.820
 you write code that's basically unreadable.

16:07.820 --> 16:09.100
 There's a culture, like.

16:09.100 --> 16:10.860
 Correct, and you're proud of it.

16:10.860 --> 16:12.460
 Yeah, you're proud of it.

16:12.460 --> 16:14.140
 Right, exactly, and it's like, feels good.

16:14.140 --> 16:16.660
 And it's really selective.

16:16.660 --> 16:20.380
 It means you have to be an expert in Perl to understand it.

16:20.380 --> 16:22.980
 Whereas Python allowed you not to have to be an expert.

16:22.980 --> 16:24.740
 You didn't have to take all this brain energy.

16:24.740 --> 16:25.660
 You could leverage, what I say,

16:25.660 --> 16:28.180
 you could leverage your English language center,

16:28.180 --> 16:29.980
 which you're using all the time.

16:29.980 --> 16:31.180
 I've wondered about other languages,

16:31.180 --> 16:34.680
 particularly non Latin based languages.

16:34.680 --> 16:37.220
 Latin based languages with the characters are at least similar.

16:37.220 --> 16:38.620
 I think people have an easier time,

16:38.620 --> 16:41.300
 but I don't know what it's like to be a Japanese

16:41.300 --> 16:46.300
 or a Chinese person trying to learn different syntax.

16:46.900 --> 16:49.740
 Like, what would computer programming look like in that?

16:49.740 --> 16:50.780
 I haven't looked at that at all,

16:50.780 --> 16:52.020
 but it certainly doesn't,

16:52.020 --> 16:54.300
 you know, leveraging your Chinese language center,

16:54.300 --> 16:57.060
 I'm not sure Python or any programming does that.

16:57.060 --> 16:58.140
 But that was a big deal.

16:58.140 --> 17:00.340
 The fact that it was accessible, I could be a scientist.

17:00.340 --> 17:02.900
 What I really liked is many programming languages

17:02.900 --> 17:04.740
 really demand a lot of you, and you can get a lot,

17:04.740 --> 17:07.200
 you know, you do a lot if you learn it.

17:07.200 --> 17:08.900
 But Python enables you to do a lot

17:08.900 --> 17:11.180
 without demanding a lot of you.

17:11.180 --> 17:13.100
 There's nuance to that statement,

17:13.100 --> 17:15.340
 but it certainly was, it's more accessible.

17:15.340 --> 17:18.040
 So more people could actually, as a scientist,

17:18.040 --> 17:19.860
 as somebody who, or an engineer,

17:19.860 --> 17:21.460
 who was trying to solve another problem

17:21.460 --> 17:23.300
 besides point programming,

17:23.300 --> 17:26.000
 I could still use this language and get things done

17:26.000 --> 17:27.340
 and be happy about it.

17:27.340 --> 17:30.100
 And I was also comfortable in C at that time.

17:30.100 --> 17:31.340
 And MATLAB, you did a little bit of that.

17:31.340 --> 17:33.180
 And MATLAB, I did a lot before that, exactly.

17:33.180 --> 17:34.900
 So I was comfortable in,

17:34.900 --> 17:37.580
 those three languages were really the tools I used

17:37.580 --> 17:39.560
 during my studies and schooling.

17:40.540 --> 17:42.620
 But to your point about language helping you think,

17:42.620 --> 17:44.580
 one of the big things about MATLAB was it was,

17:44.580 --> 17:48.300
 and APL before it, I don't know if you remember APL.

17:48.300 --> 17:51.660
 APL is actually the predecessor of array based programming,

17:51.660 --> 17:54.160
 which I think is really an underappreciated,

17:54.160 --> 17:55.340
 if I talk to people who are just steeped

17:55.340 --> 17:57.640
 in computer programming, computer science,

17:57.640 --> 17:59.460
 like most of the people that Microsoft has hired

17:59.460 --> 18:01.140
 in the past, for example,

18:01.140 --> 18:03.900
 Microsoft as a company generally did not understand

18:03.900 --> 18:05.220
 array based programming.

18:05.220 --> 18:06.620
 Like culturally, they didn't understand it.

18:06.620 --> 18:08.560
 So they kept missing the boat,

18:08.560 --> 18:11.580
 kept missing the understanding of what this was.

18:11.580 --> 18:12.740
 They've gotten better,

18:12.740 --> 18:14.420
 but there's still a whole culture of folks

18:14.420 --> 18:17.980
 that doesn't, programming, that's systems programming

18:17.980 --> 18:20.380
 or web programming or lists and maps.

18:20.380 --> 18:22.520
 And what about an n dimensional array?

18:22.520 --> 18:24.700
 Oh yeah, that's just an implementation detail.

18:24.700 --> 18:26.700
 Well, you can think that,

18:26.700 --> 18:28.800
 but then actually if you have that as a construct,

18:28.800 --> 18:29.860
 you actually think differently.

18:29.860 --> 18:31.660
 APL was the first language to understand that.

18:31.660 --> 18:33.460
 And it was in the sixties, right?

18:33.460 --> 18:36.780
 The challenge of APL is APL had very dense,

18:36.780 --> 18:39.340
 not only glyphs, like new characters, new glyphs,

18:39.340 --> 18:40.480
 but they even had a new keyboard

18:40.480 --> 18:42.340
 because to produce those glyphs,

18:42.340 --> 18:43.980
 this is back in the early days in computing

18:43.980 --> 18:47.980
 when the QWERTY keyboard maybe wasn't as established,

18:47.980 --> 18:50.780
 like, well, we can have a new keyboard, no big deal.

18:50.780 --> 18:52.860
 But it was a big deal and it didn't catch on.

18:52.860 --> 18:56.500
 And the language APL, very much like Perl,

18:56.500 --> 18:58.620
 as people would pride themselves on how much,

18:58.620 --> 18:59.740
 could they write the game of life

18:59.740 --> 19:03.100
 in 30 characters of APL.

19:03.100 --> 19:06.060
 APL has characters that mean summation

19:06.060 --> 19:08.180
 and they have adverbs,

19:08.180 --> 19:10.060
 they would have adjectives and these things called adverbs,

19:10.060 --> 19:12.220
 which are like methods, like reduction,

19:12.220 --> 19:15.320
 reduction would be an adverb on an ad operator, right?

19:15.320 --> 19:18.660
 So, but doing, using these tools you could construct

19:18.660 --> 19:20.880
 and then you start to think at that level,

19:20.880 --> 19:22.900
 you think in n dimensions is something I like to say,

19:22.900 --> 19:25.500
 and you start to think differently about data at that point.

19:25.500 --> 19:27.500
 Now you're, it really helps.

19:27.500 --> 19:30.100
 Yeah, I mean, outside of programming,

19:30.100 --> 19:33.700
 if you really internalize linear algebra as a course,

19:33.700 --> 19:35.580
 I mean, it's philosophically allows you

19:35.580 --> 19:37.220
 to think of the world differently.

19:37.220 --> 19:39.700
 It's almost like liberating, you don't have to,

19:39.700 --> 19:42.100
 you don't have to think about the individual numbers

19:42.100 --> 19:44.240
 in the n dimensional array.

19:44.240 --> 19:46.140
 You could think of it as an object in itself

19:46.140 --> 19:48.500
 and all of a sudden this world can open up.

19:48.500 --> 19:52.660
 You're saying MATLAB and APL were like the early C,

19:52.660 --> 19:54.980
 I don't know if many languages got that right ever.

19:54.980 --> 19:56.860
 No, no, no they didn't.

19:56.860 --> 19:57.700
 Even still.

19:57.700 --> 19:58.820
 Even still, I would say.

19:58.820 --> 20:02.540
 I mean, NumPy is an inheritor of the traditions

20:02.540 --> 20:06.580
 that I would say APLJ was another version that was,

20:06.580 --> 20:08.340
 what it did is not have the glyphs,

20:08.340 --> 20:09.700
 just have short characters,

20:09.700 --> 20:11.740
 but still a Latin keyboard could type them.

20:11.740 --> 20:14.540
 And then numeric inherited from that

20:14.540 --> 20:17.660
 in terms of let's add arrays plus broadcasting

20:17.660 --> 20:19.700
 plus methods, reduction,

20:19.700 --> 20:21.780
 even some of the language like rank is a concept

20:21.780 --> 20:24.660
 that was in Python and is still in Python

20:24.660 --> 20:27.180
 for the number of dimensions, right?

20:27.180 --> 20:29.460
 That's different than say the rank of a matrix

20:29.460 --> 20:31.140
 which people think of as well.

20:31.140 --> 20:33.060
 So it came from that tradition,

20:33.060 --> 20:37.980
 but NumPy is a very pragmatic, practical tool.

20:37.980 --> 20:39.260
 NumPy inherited from numeric

20:39.260 --> 20:40.820
 and we can get to where NumPy came from

20:40.820 --> 20:42.220
 which is the current array,

20:43.340 --> 20:46.100
 at least current as of 2015, 2017.

20:46.100 --> 20:49.320
 Now there's a ton of them over the past two or three years.

20:49.320 --> 20:50.320
 We can get into that too.

20:50.320 --> 20:52.780
 So if we just linger on the early days

20:52.780 --> 20:56.220
 of what was your favorite feature of Python?

20:56.220 --> 20:58.020
 Do you remember like what?

20:58.020 --> 21:02.260
 So it's so interesting to linger on like the,

21:02.260 --> 21:06.300
 what really makes you connect with a language?

21:06.300 --> 21:09.400
 I'm not sure it's obvious to introspect that.

21:09.400 --> 21:10.240
 No, it isn't.

21:10.240 --> 21:12.860
 And I've thought about that at some length.

21:12.860 --> 21:16.460
 I think definitely the fact that I could read it later,

21:16.460 --> 21:18.140
 that I could use it productively

21:18.140 --> 21:19.820
 without becoming an expert.

21:19.820 --> 21:22.180
 Other language I had to put more effort into.

21:22.180 --> 21:23.940
 That's like an empirical observation.

21:23.940 --> 21:26.500
 Like you're not analyzing any one aspect of the language.

21:26.500 --> 21:29.460
 It just seems time after time when you look back,

21:29.460 --> 21:30.580
 it's somehow readable.

21:30.580 --> 21:31.420
 It's somehow readable.

21:31.420 --> 21:35.380
 Then it was sort of, I could take executable English

21:35.380 --> 21:36.820
 and translate it to Python more easily.

21:36.820 --> 21:39.760
 Like I didn't have to go, there was no translation layer.

21:39.760 --> 21:41.580
 As an engineer or as a scientist,

21:41.580 --> 21:43.240
 I could think about what I wanted to do.

21:43.240 --> 21:46.780
 And then the syntax wasn't that far behind it, right?

21:46.780 --> 21:49.220
 Now there are some warts there still.

21:49.220 --> 21:50.600
 It wasn't perfect.

21:50.600 --> 21:51.440
 Like there's some areas where I'm like,

21:51.440 --> 21:52.820
 ah, it'd be better if this were different

21:52.820 --> 21:54.380
 or if this were different.

21:54.380 --> 21:56.580
 Some of those things got added to the language too.

21:56.580 --> 21:58.580
 I was really grateful for some of the early pioneers

21:58.580 --> 22:00.220
 in the Python ecosystem back,

22:00.220 --> 22:01.900
 because Python got written in 91.

22:01.900 --> 22:03.140
 That's when the first version came out.

22:03.140 --> 22:06.540
 But Guido was very open to users.

22:06.540 --> 22:08.660
 And one of the sets of users were people like Jim Huganen

22:08.660 --> 22:13.460
 and David Asher and Paul Dubois and Conrad Hinson.

22:13.460 --> 22:15.380
 These were people that were on the main list.

22:15.380 --> 22:16.860
 And they were just asking for things like,

22:16.860 --> 22:19.220
 hey, we really should have complex numbers in this language.

22:19.220 --> 22:22.540
 So let's, you know, there's a J, there's a one J, right?

22:22.540 --> 22:24.340
 And the fact that they went the engineering route of J

22:24.340 --> 22:25.180
 is interesting.

22:26.660 --> 22:28.620
 I don't think that's entirely favoring engineers.

22:28.620 --> 22:30.460
 I think it's because I is so often used

22:30.460 --> 22:32.100
 as the index of a for loop.

22:32.100 --> 22:34.260
 So I think that's actually why.

22:34.260 --> 22:36.740
 Probably, I mean, there's a pragmatic aspect.

22:36.740 --> 22:39.100
 But the fact that complex numbers were there, I love that.

22:39.100 --> 22:41.460
 The fact that I could write in the array constructs

22:41.460 --> 22:42.820
 and that reduction was there,

22:42.820 --> 22:46.540
 very simple to write summations and broadcasting was there.

22:46.540 --> 22:48.420
 I could do addition of whole arrays.

22:49.440 --> 22:50.380
 So that was cool.

22:50.380 --> 22:52.660
 Those are some things I loved about it.

22:52.660 --> 22:54.820
 I don't know what to start talking to you about

22:54.820 --> 22:57.860
 because you've created so many incredible projects

22:57.860 --> 23:00.180
 that basically changed the whole landscape of programming.

23:00.180 --> 23:02.380
 But okay, let's start with,

23:02.380 --> 23:06.060
 let's go chronologically with SciPy.

23:06.060 --> 23:09.100
 You created SciPy over two decades ago now?

23:09.100 --> 23:11.140
 Yes, yes, I love to talk about SciPy.

23:11.140 --> 23:12.980
 SciPy was really my baby.

23:12.980 --> 23:14.420
 What is it?

23:14.420 --> 23:15.420
 What was its goal?

23:15.420 --> 23:16.420
 What is its goal?

23:16.420 --> 23:17.260
 How does it work?

23:17.260 --> 23:18.100
 Yeah, fantastic.

23:18.100 --> 23:21.580
 So SciPy was effectively, here I am using Python

23:21.580 --> 23:24.980
 to do stuff that I previously used MATLAB to use.

23:24.980 --> 23:26.860
 And I was using numeric, which is an array library

23:26.860 --> 23:28.300
 that made a lot of it possible.

23:28.300 --> 23:29.900
 But there's things that were missing.

23:29.900 --> 23:32.100
 Like I didn't have an ordinary differential equation solver

23:32.100 --> 23:33.460
 I could just call, right?

23:33.460 --> 23:35.260
 I didn't have integration.

23:35.260 --> 23:37.180
 Hey, I wanted to integrate this function.

23:37.180 --> 23:38.780
 Okay, well, I don't have just a function

23:38.780 --> 23:40.580
 I can call to do that.

23:40.580 --> 23:42.540
 These are things I remember being critical things

23:42.540 --> 23:43.700
 that I was missing.

23:43.700 --> 23:44.580
 Optimization.

23:44.580 --> 23:46.780
 I just wanna pass a function to an optimizer

23:46.780 --> 23:49.100
 and have it tell me what the optimal value is.

23:50.100 --> 23:51.100
 Those are things I'm like, well,

23:51.100 --> 23:54.340
 why don't we just write a library that adds these tools?

23:54.340 --> 23:55.740
 And I started to post on the mailing list

23:55.740 --> 23:58.100
 and there'd previously been, people have discussed,

23:58.100 --> 23:59.140
 I remember Conrad Henson saying,

23:59.140 --> 24:00.980
 wouldn't it be great if we had this optimizer library

24:00.980 --> 24:02.580
 or David Ashwood say this stuff.

24:02.580 --> 24:06.940
 And I'm a ambitious, ambitious is the wrong word,

24:06.940 --> 24:11.340
 an eager and probably more time than sense.

24:11.340 --> 24:13.620
 I was a poor graduate student.

24:13.620 --> 24:15.860
 My wife thinks I'm working on my PhD and I am,

24:15.860 --> 24:17.220
 but part of the PhD that I loved

24:17.220 --> 24:19.180
 was the fact that it's exploratory.

24:19.180 --> 24:21.540
 You're not just taking orders,

24:21.540 --> 24:23.500
 fulfilling a list of things to do,

24:23.500 --> 24:25.740
 you're trying to figure out what to do.

24:25.740 --> 24:27.900
 And so I thought, well, I'm running tools

24:27.900 --> 24:29.140
 for my own use and a PhD,

24:29.140 --> 24:32.140
 so I'll just start this project.

24:32.140 --> 24:34.940
 And so in 99, 98 was when I first started

24:34.940 --> 24:36.620
 to write libraries for Python.

24:36.620 --> 24:38.260
 Definitely when I fell in love with Python 98,

24:38.260 --> 24:39.740
 I thought, oh, well, there's just a few things missing.

24:39.740 --> 24:42.700
 Like, oh, I need a reader to read DICOM files.

24:42.700 --> 24:44.580
 I was in medical imaging and DICOM was a format

24:44.580 --> 24:46.940
 that I want to be able to load that into Python.

24:46.940 --> 24:48.180
 Okay, how do I write a reader for that?

24:48.180 --> 24:51.700
 So I wrote something called, it was an IO package, right?

24:51.700 --> 24:55.140
 And that was my very first extension module, which is C.

24:55.140 --> 24:57.060
 So I wrote C code to extend Python

24:57.060 --> 24:59.660
 so that in Python I could write things more easily.

24:59.660 --> 25:02.260
 That combination kind of hooked me.

25:02.260 --> 25:03.300
 It was the idea that I could,

25:03.300 --> 25:05.700
 here's this powerful tool I can use as a scripting language

25:05.700 --> 25:07.460
 and a high level language to think about,

25:07.460 --> 25:11.420
 but that I can extend easily, easily in C,

25:11.420 --> 25:13.780
 easily for me because I knew enough C.

25:13.780 --> 25:15.260
 And then Guido had written a link.

25:15.260 --> 25:17.220
 I mean, the only, the hard part of extending Python

25:17.220 --> 25:19.500
 was something called the way memory management networks,

25:19.500 --> 25:21.060
 and you have to do reference counting.

25:21.060 --> 25:23.820
 And so there's a tracking of reference counting

25:23.820 --> 25:25.500
 you have to do manually.

25:25.500 --> 25:27.500
 And if you don't, you have memory leaks.

25:27.500 --> 25:29.020
 And so that's hard.

25:29.020 --> 25:31.020
 Plus then C, you know, it's just much more,

25:31.020 --> 25:32.180
 you have to put more effort into it.

25:32.180 --> 25:34.700
 It's not just, I have to now think about pointers

25:34.700 --> 25:37.620
 and I have to think about stuff that is different.

25:37.620 --> 25:38.460
 I have to kind of,

25:38.460 --> 25:40.620
 you're like putting a new cartridge in your brain.

25:40.620 --> 25:42.380
 Like, okay, I'm thinking about MRI.

25:42.380 --> 25:43.580
 Now I'm thinking about programming.

25:43.580 --> 25:45.340
 And there are distinct modules

25:45.340 --> 25:46.620
 you end up having to think about.

25:46.620 --> 25:47.460
 So it's harder.

25:47.460 --> 25:48.300
 And when I was just in Python,

25:48.300 --> 25:51.500
 I could just think about MRI and high level writing,

25:51.500 --> 25:52.340
 but I could do that.

25:52.340 --> 25:54.020
 And that kind of, I liked it.

25:54.020 --> 25:55.780
 I found that to be enjoyable and fun.

25:55.780 --> 25:57.220
 And so I ended up, oh,

25:57.220 --> 25:59.020
 well, let me just add a bunch of stuff to Python

25:59.020 --> 26:00.580
 to do integration.

26:00.580 --> 26:01.660
 Well, and the cool thing is,

26:01.660 --> 26:03.060
 is that the power of the internet,

26:03.060 --> 26:04.300
 just looking around and I found,

26:04.300 --> 26:06.300
 oh, there's this NetLive,

26:06.300 --> 26:08.860
 which has hundreds of 4chan routines

26:08.860 --> 26:12.260
 that people have written in the 60s and the 70s and the 80s

26:12.260 --> 26:14.900
 in 4chan 77, fortunately, it wasn't 4chan 16.

26:14.900 --> 26:17.220
 So it had been ported to 4chan 77.

26:18.100 --> 26:21.660
 And 4chan 77 is actually a really great language.

26:21.660 --> 26:24.100
 4chan 90 probably is my favorite 4chan

26:24.100 --> 26:26.100
 because it's also, it's got complex numbers,

26:26.100 --> 26:27.700
 got arrays and it's pretty high level.

26:27.700 --> 26:28.980
 Now, the problem with it

26:28.980 --> 26:31.020
 is you'd never want to write a program in 4chan 90

26:31.020 --> 26:32.260
 or 4chan 77,

26:32.260 --> 26:34.900
 but it's totally fine to write a subroutine in, right?

26:34.900 --> 26:37.660
 And so, and then 4chan kind of got a little off course

26:37.660 --> 26:39.060
 when they tried to compete with C++.

26:39.060 --> 26:40.580
 But at the time,

26:40.580 --> 26:42.340
 I just want libraries to do something like,

26:42.340 --> 26:43.940
 oh, here's an ordinary differential equation.

26:43.940 --> 26:44.900
 Here's integration.

26:44.900 --> 26:46.780
 Here's runge cut integration.

26:46.780 --> 26:47.620
 Already done.

26:47.620 --> 26:48.780
 I don't have to think about that algorithm.

26:48.780 --> 26:49.620
 I mean, you could,

26:49.620 --> 26:51.020
 but it's nice to have somebody who's already done one

26:51.020 --> 26:51.860
 and tested it.

26:51.860 --> 26:55.060
 And so I sort of started this journey in 98, really.

26:55.060 --> 26:55.980
 If you look back at the mailing list,

26:55.980 --> 26:58.580
 there's sort of this productive era of me

26:59.660 --> 27:01.100
 writing an extension module

27:01.100 --> 27:04.580
 to connect runge cut integration to Python

27:04.580 --> 27:06.660
 and making an ordinary differential equation solver.

27:06.660 --> 27:09.140
 And then releasing that as a package.

27:09.140 --> 27:11.820
 So we could call ODE pack, I think I called it then.

27:11.820 --> 27:12.660
 Quad pack.

27:12.660 --> 27:14.420
 And then I just made these packages.

27:14.420 --> 27:16.260
 Eventually that became multipack

27:16.260 --> 27:17.580
 because they're originally modular.

27:17.580 --> 27:19.140
 You can install them separately.

27:19.140 --> 27:20.700
 But a massive problem in Python

27:20.700 --> 27:23.420
 was actually just getting your stuff installed.

27:23.420 --> 27:25.820
 At the time, releasing software for me,

27:25.820 --> 27:27.580
 like today it's people think, what does that mean?

27:27.580 --> 27:30.780
 Well, then it meant some poorly written webpage.

27:30.780 --> 27:33.100
 I had some bad webpage up and I put a tarball,

27:33.100 --> 27:35.780
 just a GZIP tarball of source code.

27:35.780 --> 27:37.140
 That was the release.

27:37.140 --> 27:39.180
 But okay, can we just stand that?

27:39.180 --> 27:43.060
 Because the community aspect

27:43.060 --> 27:47.820
 of creating the package and sharing that, that's rare.

27:47.820 --> 27:50.940
 That, to have, to both have the, at that time,

27:50.940 --> 27:51.780
 so like the raw.

27:51.780 --> 27:52.740
 Yeah, it was pretty early, yeah.

27:52.740 --> 27:54.660
 Oh, well, not rare.

27:54.660 --> 27:57.020
 Maybe you can correct me on this,

27:57.020 --> 27:59.660
 but it seems like in the scientific community,

27:59.660 --> 28:02.420
 so many people, you were basically solving the problems

28:02.420 --> 28:07.100
 you needed to solve to process the particular application,

28:07.100 --> 28:08.540
 the data that you need.

28:08.540 --> 28:10.900
 And to also have the mind

28:10.900 --> 28:15.340
 that I'm going to make this usable for others, that's.

28:15.340 --> 28:16.500
 I would say I was inspired.

28:16.500 --> 28:18.060
 I'd been inspired by Linux,

28:18.060 --> 28:21.820
 been inspired by Linus and him making his code available.

28:21.820 --> 28:23.260
 And I was starting to use Linux at the time.

28:23.260 --> 28:24.460
 And I went, this is cool.

28:24.460 --> 28:27.060
 So I'd kind of been previously primed that way.

28:27.060 --> 28:29.180
 And generally I was into science

28:29.180 --> 28:30.980
 because I liked the sharing notion.

28:30.980 --> 28:32.660
 I liked the idea of, hey, let's,

28:32.660 --> 28:34.780
 if collectively we build knowledge and share it,

28:34.780 --> 28:35.740
 we can all be better off.

28:35.740 --> 28:37.420
 Okay, so you want to energize by that idea.

28:37.420 --> 28:39.540
 So I was energized by that idea already, right?

28:39.540 --> 28:40.940
 And I can't deny that I was.

28:40.940 --> 28:42.900
 I'm sort of had this very,

28:42.900 --> 28:45.700
 I liked that part of science, that part of sharing.

28:45.700 --> 28:47.300
 And then all of a sudden, oh, wait, here's something.

28:47.300 --> 28:49.940
 And here's something I could do.

28:49.940 --> 28:52.780
 And then I slowly over years learned how to share better

28:52.780 --> 28:55.100
 so that you could actually engage more people faster.

28:55.100 --> 28:57.100
 One of the key things was actually giving people a binary

28:57.100 --> 28:58.980
 they could install, right?

28:58.980 --> 29:01.460
 So that it wasn't just your source code, good luck.

29:01.460 --> 29:02.660
 Compile this and then.

29:02.660 --> 29:05.180
 It's compiled, ready to install, just, you know.

29:05.180 --> 29:07.380
 So in fact, a lot of the journey from 98,

29:07.380 --> 29:10.780
 even through 2012 when I started Anaconda was about that.

29:10.780 --> 29:13.260
 Like it's why, you know, it's really the key

29:13.260 --> 29:17.460
 as to why a scientist with dreams of doing MRI research

29:17.460 --> 29:19.500
 ended up starting a software company

29:19.500 --> 29:22.260
 that installs software.

29:22.260 --> 29:25.700
 I work with a few folks now that don't program

29:26.700 --> 29:28.580
 like on the creative side and the video side,

29:28.580 --> 29:29.620
 the audio side.

29:29.620 --> 29:32.500
 And because my whole life is running on scripts,

29:32.500 --> 29:34.020
 I have to try to get them,

29:34.020 --> 29:35.900
 I'm having all the task of teaching them

29:35.900 --> 29:39.220
 how to do Python enough to run the scripts.

29:39.220 --> 29:40.820
 And so I've been actually facing this,

29:40.820 --> 29:44.220
 whether it's Anaconda or some with the task of

29:44.220 --> 29:46.780
 how do I minimally explain basically to my mom

29:46.780 --> 29:48.900
 how to write a Python script.

29:48.900 --> 29:50.500
 And it's an interesting challenge.

29:50.500 --> 29:53.020
 I have to, it's a to do item for me to figure out like,

29:53.020 --> 29:56.340
 what is the minimal amount of information I have to teach?

29:56.340 --> 29:59.700
 What are the tools you use that one, you enjoy it,

29:59.700 --> 30:00.540
 two, you're effective at it.

30:00.540 --> 30:02.540
 And they're related, those are two related questions.

30:02.540 --> 30:05.500
 And then the debugging, like the iterative process

30:05.500 --> 30:07.820
 of running the script to figure out what the error is,

30:07.820 --> 30:11.580
 maybe even for some people to do the fix yourself.

30:11.580 --> 30:12.660
 So do you compile it?

30:12.660 --> 30:15.620
 Do you, like how do you distribute that code to them?

30:15.620 --> 30:18.540
 And it's interesting because I think

30:18.540 --> 30:20.100
 it's exactly what you're talking about.

30:20.100 --> 30:24.260
 If you increase the circle of empathy,

30:24.260 --> 30:28.060
 the circle of people that are able to use your programs,

30:28.900 --> 30:32.900
 you increase it, it's like effectiveness and it's power.

30:32.900 --> 30:37.020
 And so you have to think, can I write scripts?

30:37.020 --> 30:40.140
 Can I write programs that can be used by medical engineers,

30:40.140 --> 30:43.900
 by all kinds of people that don't know programming

30:43.900 --> 30:45.980
 and actually maybe plant a seed,

30:46.900 --> 30:48.380
 have them catch the bug of programming

30:48.380 --> 30:50.180
 so that they start on a journey.

30:50.180 --> 30:51.500
 That's a huge responsibility.

30:51.500 --> 30:55.340
 And ultimately it has to do with the Amazon one click buy.

30:55.340 --> 30:58.780
 Like how frictionless can you make the early steps?

30:58.780 --> 31:00.380
 Frictionless is actually really key.

31:00.380 --> 31:03.020
 To go in any community is, any friction point,

31:03.020 --> 31:05.180
 you're just gonna lose some people, right?

31:05.180 --> 31:09.060
 Now sometimes you may wanna intentionally do that.

31:09.060 --> 31:11.620
 If you're early enough on, you need a lot of help.

31:11.620 --> 31:13.340
 You need people who have the skills.

31:13.340 --> 31:14.740
 You might actually, it's helpful.

31:14.740 --> 31:16.820
 You don't necessarily have too many users

31:16.820 --> 31:20.340
 as opposed to contributors if you're early on.

31:20.340 --> 31:23.100
 Anyway, there's, SciFi started in 98,

31:23.100 --> 31:25.740
 but it really emerged as this collection of modules

31:25.740 --> 31:27.340
 that I was just putting on the net.

31:27.340 --> 31:31.580
 People were downloading and I think I got 100 users, right?

31:31.580 --> 31:32.660
 By the end of that year.

31:32.660 --> 31:35.660
 But the fact that I got 100 users and more than that,

31:35.660 --> 31:39.420
 people started to email me with fixes.

31:39.420 --> 31:41.300
 And that was actually intoxicating, right?

31:41.300 --> 31:44.220
 That was the, here I'm writing papers

31:44.220 --> 31:46.180
 and I'm giving conferences and I get people to say hello,

31:46.180 --> 31:47.420
 but yeah, good job.

31:47.420 --> 31:49.860
 But mostly it was, you're viewed with,

31:49.860 --> 31:51.540
 it's competitive, right?

31:51.540 --> 31:52.900
 You publish a paper and people are like,

31:52.900 --> 31:54.180
 oh, it wasn't my paper.

31:55.900 --> 31:59.220
 I was starting to see that sense of academic life

31:59.220 --> 32:00.180
 where it was so much,

32:00.180 --> 32:01.460
 I thought there was this cooperative effort,

32:01.460 --> 32:04.940
 but it sounds like we're here just to one up each other.

32:04.940 --> 32:07.700
 And it's not true across the board,

32:07.700 --> 32:08.580
 but a lot of that's there.

32:08.580 --> 32:09.660
 But here in this world,

32:09.660 --> 32:12.660
 I was getting responses from people all over the world.

32:13.700 --> 32:16.060
 I remember Pjaro Peterson in Estonia, right?

32:16.060 --> 32:17.340
 Was one of the first people.

32:17.340 --> 32:18.740
 And he sent me back this make file,

32:18.740 --> 32:21.220
 cause the first thing it is, yeah, your build thing stinks

32:21.220 --> 32:23.020
 and here's a better make file.

32:23.020 --> 32:24.380
 Now it was a complex make file.

32:24.380 --> 32:26.580
 I don't think I never understood that make file actually,

32:26.580 --> 32:29.220
 but it worked and it did a lot more.

32:29.220 --> 32:30.980
 And so I said, thanks, this is cool.

32:30.980 --> 32:32.500
 And that was my first kind of engagement

32:32.500 --> 32:35.100
 with community development.

32:35.100 --> 32:37.660
 But the process was, he sent me a patch file.

32:37.660 --> 32:39.900
 I had to upload a new tar ball.

32:39.900 --> 32:41.580
 And I just found, I really love that.

32:41.580 --> 32:43.660
 And the style back then was here's a mailing list.

32:43.660 --> 32:45.740
 It's very, it wasn't as,

32:45.740 --> 32:47.660
 it's certainly weren't the tools that are available today.

32:47.660 --> 32:49.940
 It was very early on, but I really started to,

32:49.940 --> 32:50.780
 that's the whole year.

32:50.780 --> 32:54.580
 I think I did about seven packages that year, right?

32:54.580 --> 32:55.540
 And then by the end of the year,

32:55.540 --> 32:57.840
 I collected them into a thing called multipack.

32:57.840 --> 32:59.780
 So in 99, there was this thing called multipack.

32:59.780 --> 33:01.820
 And that's when a high school student,

33:01.820 --> 33:03.060
 no, he was a high school student at the time,

33:03.060 --> 33:04.780
 guy named Robert Kern,

33:04.780 --> 33:09.700
 took that package and made a Windows installer, right?

33:09.700 --> 33:12.700
 And then of course, a massive increase of usage.

33:12.700 --> 33:15.860
 So by the way, most of this development was under Linux.

33:15.860 --> 33:17.380
 Yes, yes, it was on Linux.

33:17.380 --> 33:20.240
 I was a Linux developer doing it on a Unix box.

33:20.240 --> 33:23.020
 I mean, at the time I was actually getting into,

33:23.020 --> 33:24.060
 I had a new hard drive,

33:24.060 --> 33:26.500
 did some kernel programming to make the hard drive work.

33:26.500 --> 33:28.780
 I mean, not programming, but modification to the kernel

33:28.780 --> 33:31.180
 so I could actually get a hard drive working.

33:31.180 --> 33:32.320
 I love that aspect of it.

33:32.320 --> 33:36.100
 I was also in, at school, I was building a cluster.

33:36.100 --> 33:39.940
 I took Mac computers and you put yellow dog Linux on them.

33:40.940 --> 33:42.140
 At the Mayo Clinic, they were just,

33:42.140 --> 33:43.520
 they had all these Macs that were older,

33:43.520 --> 33:44.740
 they were just getting rid of.

33:44.740 --> 33:46.820
 And so I kind of got permission to go grab them together.

33:46.820 --> 33:50.340
 I put about 24 of them together in a cluster, in a cabinet,

33:50.340 --> 33:51.700
 and put yellow dog Linux on them all.

33:51.700 --> 33:56.240
 And I wrote a C++ program to do MRI simulation.

33:56.240 --> 33:58.900
 That was what I was doing at the same time

33:58.900 --> 34:01.400
 for my day job, so to speak.

34:01.400 --> 34:03.460
 So I was loving the whole process.

34:03.460 --> 34:04.300
 And the same time I was,

34:04.300 --> 34:06.260
 oh, I need a ordinary differential equation.

34:06.260 --> 34:08.160
 That's why ordinary differential equations were key

34:08.160 --> 34:09.820
 was because that's the heart of a block equation

34:09.820 --> 34:12.420
 for simulating MRI, is an ODE solver.

34:12.420 --> 34:15.720
 And so that's, but I actually did that,

34:15.720 --> 34:16.980
 it just happened at the same time.

34:16.980 --> 34:18.540
 That's why it was kind of what you're working on

34:18.540 --> 34:20.500
 and what you're interested in, they're coinciding.

34:20.500 --> 34:22.380
 I was definitely scratching my own itch

34:22.380 --> 34:24.060
 in terms of building stuff.

34:24.060 --> 34:27.040
 And which helped in the sense that I was using it for me,

34:27.040 --> 34:28.540
 so at least I had one user.

34:28.540 --> 34:30.360
 I had one person who was like, well, no, this is better.

34:30.360 --> 34:31.420
 I like this interface better.

34:31.420 --> 34:33.300
 And I had the experience of MATLAB

34:33.300 --> 34:36.480
 to guide some of what those APIs might look like.

34:36.480 --> 34:37.720
 But you're just doing yourself,

34:37.720 --> 34:39.000
 you're building all this stuff.

34:39.000 --> 34:40.060
 But with the Windows installer,

34:40.060 --> 34:41.460
 it was the first time I realized, oh yeah,

34:41.460 --> 34:43.740
 the binary installer really helps people.

34:43.740 --> 34:46.980
 And so that led to spending more time

34:46.980 --> 34:49.100
 on that side of things.

34:49.100 --> 34:52.780
 So around 2000, so I graduated my PhD in 2000,

34:52.780 --> 34:53.780
 end of year, end of 2000.

34:53.780 --> 34:56.660
 So 99 doing a lot of work there,

34:56.660 --> 34:57.740
 98 doing a lot of work there,

34:57.740 --> 35:00.780
 99 kind of spending more time on my PhD,

35:00.780 --> 35:02.420
 helping people use the tools,

35:02.420 --> 35:04.060
 thinking about what do I want to go from here.

35:04.060 --> 35:05.620
 There was a company, there was a guy actually,

35:05.620 --> 35:07.620
 Eric Jones and Travis Vought.

35:07.620 --> 35:11.080
 They were two friends who founded a company called NTHOT.

35:11.080 --> 35:13.620
 It's here in Austin, still here.

35:13.620 --> 35:16.060
 And they, Eric contacted me at the time

35:16.060 --> 35:19.380
 when I was a graduate student still.

35:19.380 --> 35:20.860
 And he said, hey, why don't you come down?

35:20.860 --> 35:22.660
 We want to build a company.

35:22.660 --> 35:25.720
 We're thinking of a scientific company

35:25.720 --> 35:27.560
 and we want to take what you're doing

35:27.560 --> 35:29.460
 and kind of add it to some stuff that he'd done.

35:29.460 --> 35:31.220
 He'd written some tools.

35:31.220 --> 35:32.820
 And then Piero Peterson had done F2Py.

35:32.820 --> 35:34.380
 Let's come together and build,

35:34.380 --> 35:36.740
 pull this all together and call it SciPy.

35:36.740 --> 35:39.480
 So that's the origin of the SciPy brand.

35:39.480 --> 35:41.380
 It came from multi pack

35:41.380 --> 35:42.580
 and a whole bunch of modules I'd written,

35:42.580 --> 35:44.500
 plus a few things from some other folks

35:44.500 --> 35:47.580
 and then pulled together in a single installer.

35:47.580 --> 35:49.540
 SciPy was really a distribution of Python

35:49.540 --> 35:51.260
 masquerading as a library.

35:51.260 --> 35:54.340
 How did you think about SciPy in context of Python,

35:54.340 --> 35:56.180
 in context of Numeric, like what?

35:56.180 --> 35:59.020
 So we saw SciPy as a way to make an R&D environment

35:59.020 --> 36:03.380
 for Python, like use Python, depended on Numeric.

36:03.380 --> 36:05.540
 So Numeric was the array library we depended on.

36:05.540 --> 36:08.260
 And then from there, extend it with a bunch of modules

36:08.260 --> 36:10.340
 that allowed for, and at the time,

36:10.340 --> 36:13.180
 the original vision of SciPy was to have plotting,

36:13.180 --> 36:16.140
 was to have the REPL environment

36:16.140 --> 36:18.500
 and kind of really a whole data environment

36:19.500 --> 36:21.020
 that you could then install and get going with.

36:21.020 --> 36:23.020
 And that was kind of the thinking.

36:23.020 --> 36:25.020
 It didn't really evolve that way, right?

36:25.020 --> 36:27.580
 It sort of had a, for one,

36:27.580 --> 36:30.540
 it's really hard to do massive scale projects

36:31.940 --> 36:33.380
 with open source collectives.

36:34.300 --> 36:38.500
 Actually, there's sort of an intrinsic cooperation limit

36:38.500 --> 36:40.780
 as to which, too many cooks in the kitchen,

36:40.780 --> 36:42.780
 you can do amazing infrastructure work.

36:42.780 --> 36:44.220
 When it comes down to bringing it all together

36:44.220 --> 36:45.860
 into a single deliverable,

36:45.860 --> 36:49.660
 that actually requires a little more product management

36:49.660 --> 36:52.820
 that is not, that doesn't really emerge

36:52.820 --> 36:53.980
 from the same dynamic.

36:53.980 --> 36:57.860
 So it struggled, struggled to get almost too many voices.

36:57.860 --> 36:59.220
 It's hard to have everybody agree.

36:59.220 --> 37:02.100
 Consensus doesn't really work at that scale.

37:02.100 --> 37:03.260
 You end up with politics,

37:03.260 --> 37:05.220
 with the same kind of things that's happened

37:05.220 --> 37:07.100
 in large organizations trying to decide

37:07.100 --> 37:09.380
 what to do together.

37:09.380 --> 37:12.340
 So consensus building was challenging at scale

37:12.340 --> 37:13.860
 as more people came in, right?

37:13.860 --> 37:15.700
 Early on, it's fine, because there's nobody there.

37:15.700 --> 37:17.740
 So it works, but then as you get more successful

37:17.740 --> 37:18.980
 and more people use it, all of a sudden,

37:18.980 --> 37:22.300
 oh, there's this scale at which this doesn't work anymore

37:22.300 --> 37:23.980
 and we have to come up with different approaches.

37:23.980 --> 37:26.700
 So Sidepy came out officially in 2001,

37:26.700 --> 37:28.900
 was the first release, most of the time.

37:28.900 --> 37:31.060
 I remember the days of getting that release ready.

37:31.060 --> 37:33.420
 It was a Windows installer and there were bugs

37:33.420 --> 37:36.300
 on how the Windows compiler handled complex numbers

37:36.300 --> 37:38.540
 and you were chasing segmentation faults.

37:38.540 --> 37:40.420
 And it was, it's a lot of work.

37:40.420 --> 37:43.140
 There was a lot of effort had nothing to do

37:43.140 --> 37:45.540
 with my area of study.

37:45.540 --> 37:47.500
 And at the same time, I had just gotten an offer.

37:47.500 --> 37:48.780
 So he wondered if I wanted to come down

37:48.780 --> 37:51.460
 and help him start that company with his friend.

37:51.460 --> 37:53.380
 And at the time I was like, I was intrigued,

37:53.380 --> 37:56.620
 but I was squaring a path, an academic path.

37:56.620 --> 37:59.980
 And I had just got an offer to go and teach at my alma mater.

37:59.980 --> 38:02.420
 So I took that tenure track position.

38:02.420 --> 38:05.180
 And Sidepy, and kind of, then I started to work on Sidepy

38:05.180 --> 38:07.060
 as a professor too.

38:07.060 --> 38:09.540
 So that's, I left, I've got the Mayo Clinic,

38:09.540 --> 38:11.700
 graduated, wrote my thesis using Sidepy,

38:11.700 --> 38:15.500
 wrote, you know, there's images that were created.

38:15.500 --> 38:17.300
 Now the plotting tool I used was something

38:17.300 --> 38:18.660
 from Yorick actually.

38:18.660 --> 38:21.940
 It was a plotting, a PLT kind of a plotting language

38:21.940 --> 38:22.780
 that I used.

38:22.780 --> 38:23.940
 Yorick is a programming language?

38:23.940 --> 38:26.340
 It was a programming language, had a plotting tool,

38:26.340 --> 38:28.940
 Dyslin, it had integration to Dyslin.

38:28.940 --> 38:31.340
 I ended up using Dyslin plus some of the plotting

38:31.340 --> 38:33.740
 from Yorick linked to from Python.

38:33.740 --> 38:37.180
 Anyway, it was, people don't plot that way now,

38:37.180 --> 38:40.260
 but this is before, and Sidepy was trying to add plotting.

38:40.260 --> 38:41.460
 Yeah. Right?

38:41.460 --> 38:42.580
 It didn't have much success.

38:42.580 --> 38:45.580
 Really the success of plotting came from John Hunter,

38:45.580 --> 38:47.420
 who had a similar experience to my experience,

38:47.420 --> 38:49.660
 my kind of maverick experience as a person

38:49.660 --> 38:51.700
 just trying to get stuff done and kind of having more time

38:51.700 --> 38:53.820
 than money maybe, right?

38:53.820 --> 38:55.300
 And John Hunter created what?

38:55.300 --> 38:56.300
 MapPlotLib.

38:56.300 --> 38:57.140
 He's the creator of MapPlotLib.

38:57.140 --> 38:59.140
 Yeah, so John Hunter was, you know,

38:59.140 --> 39:00.580
 he wasn't a student at the time, but he was an,

39:00.580 --> 39:02.120
 he was working in Quant field and he said,

39:02.120 --> 39:03.500
 we need better plotting.

39:03.500 --> 39:05.540
 So he just went out and said, cool, I'll make a new project

39:05.540 --> 39:06.580
 and we'll call it MapPlotLib.

39:06.580 --> 39:08.260
 And he released in 2001,

39:08.260 --> 39:09.920
 about the same time that Sidepy came out

39:09.920 --> 39:12.960
 and it was separate library, separate install,

39:12.960 --> 39:15.540
 use numeric, Sidepy use numeric.

39:15.540 --> 39:18.980
 And so Sidepy, you know, in 2001, we released Sidepy

39:18.980 --> 39:22.380
 and then Endthought created a conference called Sidepy,

39:22.380 --> 39:25.460
 which was brought people together to talk about the space.

39:25.460 --> 39:26.700
 And that conference is still ongoing.

39:26.700 --> 39:28.460
 It's one of the favorite conferences of a lot of people

39:28.460 --> 39:30.820
 because it's, you know, it's changed over the years,

39:30.820 --> 39:33.740
 but early on it was, you know, a collection of 50 people

39:33.740 --> 39:36.700
 who care about, scientists mostly, you know,

39:36.700 --> 39:39.300
 practicing scientists who want, who care about coding

39:39.300 --> 39:42.140
 and doing it well and not using MATLAB.

39:42.140 --> 39:44.120
 And I remember being driven by, you know, I liked MATLAB,

39:44.120 --> 39:46.420
 but I didn't like the fact that,

39:46.420 --> 39:48.060
 so I'm not opposed to proprietary software.

39:48.060 --> 39:50.220
 I'm actually not an open source zealot.

39:50.220 --> 39:52.660
 I love open source for the, what it brings,

39:52.660 --> 39:54.460
 but I also see the role for proprietary software.

39:54.460 --> 39:56.580
 But what I didn't like was the fact that I would develop

39:56.580 --> 39:59.940
 code and publish it and then effectively telling somebody

39:59.940 --> 40:01.420
 here to run my code, you have to have

40:01.420 --> 40:02.500
 this proprietary software.

40:02.500 --> 40:05.940
 Right, and there's also culture around MATLAB as much,

40:05.940 --> 40:08.260
 because I've talked to a few folks in,

40:08.260 --> 40:09.820
 MathWorks creates MATLAB?

40:09.820 --> 40:10.820
 Yeah.

40:10.820 --> 40:13.900
 I mean, there's just a culture, they try really hard,

40:13.900 --> 40:16.820
 but it just, there's this corporate IBM style culture

40:16.820 --> 40:18.380
 that's like, or whatever.

40:18.380 --> 40:20.780
 I don't want to say negative things about IBM or whatever,

40:20.780 --> 40:22.260
 but there's a...

40:22.260 --> 40:23.740
 No, it's really that connection.

40:23.740 --> 40:24.940
 It's something I'm in the middle of right now

40:24.940 --> 40:27.000
 is the business of open source.

40:27.000 --> 40:30.820
 And how do you connect the ethos of cooperative development

40:30.820 --> 40:34.780
 with the necessity of creating profits, right?

40:34.780 --> 40:38.060
 And like right now today, I'm still in the middle of that.

40:38.060 --> 40:42.260
 That's actually the early days of me exploring this question.

40:42.260 --> 40:44.660
 Cause I was writing SciPy, I mean, as an aside,

40:44.660 --> 40:46.540
 I also had, so I had three kids at the time.

40:46.540 --> 40:47.860
 I have six kids now.

40:47.860 --> 40:49.980
 I got married early, wanted a family.

40:50.860 --> 40:52.620
 I had three kids and I remember reading,

40:52.620 --> 40:55.540
 I read Richard Stallman's post and I was a fan of Stallman.

40:55.540 --> 40:58.100
 I would read his work, I liked this collective ideas

40:58.100 --> 40:58.940
 he would have.

40:58.940 --> 41:01.740
 Certainly the ideas on IP law, I read a lot of his stuff.

41:01.740 --> 41:04.820
 But then he said, okay, well,

41:04.820 --> 41:05.780
 how do I make money with this?

41:05.780 --> 41:06.700
 How do I make a living?

41:06.700 --> 41:07.740
 How do I pay for my kids?

41:07.740 --> 41:09.300
 All this stuff was in my mind,

41:09.300 --> 41:10.640
 young graduate student making no money,

41:10.640 --> 41:12.060
 thinking I got to get a job.

41:12.060 --> 41:14.540
 And he said, well, I think just be like me

41:14.540 --> 41:15.840
 and don't have kids, right?

41:15.840 --> 41:17.080
 That's just, don't, don't.

41:17.080 --> 41:18.540
 That's his take on it.

41:18.540 --> 41:20.860
 That was what he said in that moment, right?

41:20.860 --> 41:22.420
 That's the thing I read and I went,

41:22.420 --> 41:24.960
 okay, this is a train I can't get on.

41:24.960 --> 41:26.700
 There has to be a way to preserve the culture

41:26.700 --> 41:29.180
 of open source and still be able to make sufficient money

41:29.180 --> 41:30.020
 to feed your kids.

41:30.020 --> 41:31.500
 Yes, exactly, there's gotta be.

41:31.500 --> 41:34.500
 Well, so that actually led me to a study of economics.

41:34.500 --> 41:36.680
 Because at the time I was ignorant and I really was.

41:36.680 --> 41:39.420
 I'm actually, I'm embarrassed for educational system

41:39.420 --> 41:41.300
 that they could let me and I was valedictorian

41:41.300 --> 41:43.720
 in my high school class and I did super well in college.

41:43.720 --> 41:47.620
 And like academically I did great, right?

41:47.620 --> 41:49.980
 But the fact that I could do that and then be clueless

41:49.980 --> 41:52.740
 about this key part of life,

41:52.740 --> 41:54.400
 it led me to go, there's a problem.

41:54.400 --> 41:56.660
 Like I should have learned this in fifth grade.

41:56.660 --> 41:58.380
 I should have learned this in eighth grade.

41:58.380 --> 41:59.220
 Like everybody should come out

41:59.220 --> 42:01.700
 with a basic knowledge of economics.

42:01.700 --> 42:04.040
 You're an interesting example because you've created tools

42:04.040 --> 42:07.640
 that change the lives of probably millions of people

42:07.640 --> 42:10.060
 and the fact that you don't understand at the time

42:10.060 --> 42:12.860
 of the creation of those tools, the basics economics

42:12.860 --> 42:15.260
 of how like to build up a giant system is the problem.

42:15.260 --> 42:16.100
 Yeah, it's a problem.

42:16.100 --> 42:18.260
 And so during my PhD at the same time,

42:18.260 --> 42:20.720
 this is back in 98, 99 at the same time,

42:20.720 --> 42:23.380
 I was in a library, I was reading books on capitalism,

42:23.380 --> 42:24.700
 I was reading books on Marxism,

42:24.700 --> 42:27.700
 I was reading books on what is this thing?

42:27.700 --> 42:29.700
 What does it mean?

42:29.700 --> 42:33.140
 And I encountered, basically I encountered a set of writings

42:33.140 --> 42:35.500
 from people that said they were the inheritors of Adam Smith.

42:35.500 --> 42:37.220
 Read Adam Smith for the first time, right?

42:37.220 --> 42:38.580
 Which is the wealth of nations

42:38.580 --> 42:42.460
 and kind of this notion of emergent societies

42:42.460 --> 42:45.100
 and realized, oh, there's this whole world out here

42:45.100 --> 42:49.460
 of people and the challenge of economics is also political.

42:49.460 --> 42:53.940
 Like, cause economics, people, different parties

42:53.940 --> 42:58.080
 running for office, they want their economic friends.

42:58.080 --> 43:00.040
 They want their economists to back them up, right?

43:00.040 --> 43:03.700
 Or to be their magicians, like the magicians

43:03.700 --> 43:04.660
 in Pharaoh's court, right?

43:04.660 --> 43:06.260
 The people that are kind of say, hey, this is,

43:06.260 --> 43:08.100
 you should listen to me because I've got the expert

43:08.100 --> 43:09.420
 who says this.

43:09.420 --> 43:11.540
 And so it gets really muddled, right?

43:11.540 --> 43:14.020
 But I was looking at it from as a scientist going,

43:14.020 --> 43:14.860
 what is this space?

43:14.860 --> 43:15.680
 What does this mean?

43:15.680 --> 43:16.940
 How does Paris get fed?

43:16.940 --> 43:18.420
 How does, what is money?

43:18.420 --> 43:19.420
 How does it work?

43:19.420 --> 43:21.580
 And I found a lot of writings that I really loved.

43:21.580 --> 43:22.860
 I found some things that I really loved

43:22.860 --> 43:23.980
 and I learned from that.

43:23.980 --> 43:26.300
 It was writings from people like Von Missess.

43:26.300 --> 43:29.060
 He wrote a paper in 1920 that still should be read

43:29.060 --> 43:29.900
 more than it is.

43:29.900 --> 43:33.060
 It was the economic calculation problem

43:33.060 --> 43:34.560
 of the socialist commonwealth.

43:34.560 --> 43:35.420
 It was basically in response

43:35.420 --> 43:37.140
 to the Bolshevik revolution in 1917.

43:37.140 --> 43:40.180
 And his basic argument was it's not gonna work

43:40.180 --> 43:41.780
 to not have private property.

43:41.780 --> 43:43.420
 You're not gonna be able to come up with prices.

43:43.420 --> 43:45.200
 The bureaucrats aren't gonna be able to determine

43:45.200 --> 43:47.620
 how to allocate resources without a price system.

43:47.620 --> 43:51.700
 And a price system emerges from people making trades.

43:51.700 --> 43:53.860
 And they can only make trades if they have authority

43:53.860 --> 43:55.460
 over the thing they're trading.

43:55.460 --> 43:58.020
 And that creates information flow

43:58.020 --> 44:01.300
 that you just don't have if you try to top down it.

44:01.300 --> 44:02.140
 Right.

44:02.140 --> 44:04.780
 And it's like, huh, that's a really good point.

44:04.780 --> 44:06.860
 Yeah, the prices have a signal that's used.

44:06.860 --> 44:09.400
 And it's important to have that signal

44:09.400 --> 44:11.020
 when you're trying to build a community

44:11.020 --> 44:12.580
 of productive people like you would

44:12.580 --> 44:13.700
 in the software engineering space.

44:13.700 --> 44:14.860
 Yeah, the prices are actually

44:14.860 --> 44:17.540
 an important signaling mechanism.

44:17.540 --> 44:20.820
 Right, and that money is just a bartering tool.

44:20.820 --> 44:22.540
 Right, so this is the first time I've encountered

44:22.540 --> 44:24.440
 any of this concept, right, and the fact that,

44:24.440 --> 44:26.600
 oh, this is actually really critical.

44:26.600 --> 44:29.340
 Like it's so critical to our prosperity

44:29.340 --> 44:34.100
 and that we're dangerously not learning about this,

44:34.100 --> 44:36.140
 not teaching our children about this.

44:36.140 --> 44:37.260
 So you had the three kids,

44:37.260 --> 44:38.080
 you had to make some hard decisions.

44:38.080 --> 44:39.880
 I had to make some money, right, had to figure it out.

44:39.880 --> 44:40.720
 But I didn't really care.

44:40.720 --> 44:43.260
 I mean, I've never been driven by money, just need it.

44:43.260 --> 44:45.200
 Yeah, right, need to eat.

44:45.200 --> 44:49.100
 So how did that resolve itself in terms of site buy?

44:49.100 --> 44:51.320
 So I would say it didn't really resolve itself.

44:51.320 --> 44:53.420
 It sort of started a journey that I'm continuing on.

44:53.420 --> 44:54.740
 I'm still on, I would say.

44:54.740 --> 44:55.660
 I don't think it resolved itself.

44:55.660 --> 44:59.260
 But I will say I went in eyes wide open.

44:59.260 --> 45:00.940
 Like I knew that there were problems

45:00.940 --> 45:05.940
 with giving stuff away and creating the market externalities

45:07.900 --> 45:09.780
 that the fact that, yeah, people might use it

45:09.780 --> 45:10.820
 and I might not get paid for it

45:10.820 --> 45:13.060
 and I'll have to figure something else out to get paid.

45:13.060 --> 45:14.940
 Like at least I can say I'm not bitter

45:14.940 --> 45:17.220
 that a lot of people have used stuff that I've written

45:17.220 --> 45:20.240
 and I haven't necessarily benefited economically from it.

45:20.240 --> 45:22.300
 I've heard other people be bitter about that

45:22.300 --> 45:23.300
 when they write or they talk.

45:23.300 --> 45:24.900
 Like, oh, I should've got more value out of this.

45:24.900 --> 45:27.740
 And I'm also, I want to create systems

45:27.740 --> 45:31.060
 that let people like me who might have these desires

45:31.060 --> 45:32.260
 to do things, let them benefit.

45:32.260 --> 45:34.700
 So it actually creates more of the same.

45:34.700 --> 45:36.900
 Not to turn on your bitterness module,

45:36.900 --> 45:40.940
 but there's some aspect, I wish there was mechanisms for me

45:40.940 --> 45:43.580
 to reward whoever created side buy and non buy

45:43.580 --> 45:45.300
 because it brought so much joy to my life.

45:45.300 --> 45:46.140
 I appreciate that.

45:46.140 --> 45:46.980
 You know what I mean?

45:46.980 --> 45:48.340
 The tip dark notion was there.

45:48.340 --> 45:49.180
 I appreciate that.

45:49.180 --> 45:51.940
 But there should be a very frictionless mechanism.

45:51.940 --> 45:52.760
 There should be a frictionless mechanism.

45:52.760 --> 45:53.600
 I totally agree.

45:53.600 --> 45:55.220
 I would love to talk about some of the ideas I have

45:55.220 --> 45:56.220
 because I actually came across,

45:56.220 --> 45:58.200
 I think I've come up with some interesting notions

45:58.200 --> 46:01.860
 that could work, but they'll require anything that will work

46:01.860 --> 46:03.740
 takes time to emerge, right?

46:03.740 --> 46:04.940
 Like things don't just turn overnight.

46:04.940 --> 46:06.340
 That's definitely one thing I've also understood

46:06.340 --> 46:10.120
 and learned is any fixes, that's why it's kind of funny.

46:10.120 --> 46:12.940
 We often give credit to, oh, this president gets elected

46:12.940 --> 46:14.420
 and oh, look how great things have done.

46:14.420 --> 46:18.340
 And I saw that when I had a transition in a condo

46:18.340 --> 46:19.520
 when a new CEO came in, right?

46:19.520 --> 46:22.340
 And it's like the success that's happening,

46:22.340 --> 46:23.460
 there's an inertia there.

46:23.460 --> 46:25.740
 Yeah, and sometimes the decision you made

46:25.740 --> 46:28.980
 like 10 years before is the reason why the success is the.

46:28.980 --> 46:29.820
 Right, exactly.

46:29.820 --> 46:31.560
 So we're sort of just running around taking credit

46:31.560 --> 46:32.400
 for stuff.

46:32.400 --> 46:35.140
 The credit assignment has like a delay to it

46:35.140 --> 46:38.320
 that makes the credit assignment basically wrong

46:38.320 --> 46:39.160
 more than right.

46:39.160 --> 46:40.320
 Wrong more than right, exactly.

46:40.320 --> 46:42.140
 And so I'm like, oh, this is, you know,

46:42.140 --> 46:44.860
 that's the stuff I would read a ton about, you know,

46:44.860 --> 46:45.700
 early on.

46:45.700 --> 46:47.720
 So I don't, I feel like I'm with you.

46:47.720 --> 46:48.780
 Like I want the same thing.

46:48.780 --> 46:50.900
 I want to be able to, and honestly, not for personally,

46:50.900 --> 46:51.740
 I've been happy.

46:51.740 --> 46:52.720
 I've been happy.

46:52.720 --> 46:53.980
 I feel like I don't have any, I mean,

46:53.980 --> 46:56.920
 we've been done reasonably okay, but I've had to pursue it.

46:56.920 --> 47:01.380
 Like that's really what started my trajectory from academia

47:01.380 --> 47:02.940
 is reading that stuff led me to say,

47:02.940 --> 47:04.740
 oh, entrepreneurship matters.

47:05.780 --> 47:09.180
 So I love software, but we need more entrepreneurs

47:09.180 --> 47:10.360
 and I wanna understand that better.

47:10.360 --> 47:14.940
 So once I kind of had that virus infect my brain,

47:16.500 --> 47:17.580
 even though I was on a trajectory

47:17.580 --> 47:20.640
 to go to a tenure track position at a university

47:20.640 --> 47:22.780
 and I was there for six years,

47:22.780 --> 47:26.060
 I was kind of already out the door when I started.

47:26.060 --> 47:27.660
 And we can get into that, but.

47:27.660 --> 47:30.340
 Well, can I just ask you a quick question on,

47:30.340 --> 47:32.740
 is there some design principles

47:32.740 --> 47:34.740
 that were in your mind around SciPy?

47:34.740 --> 47:36.460
 Like, is there some key ideas

47:36.460 --> 47:38.060
 that were just like sticking to you

47:38.060 --> 47:40.300
 that this is the fundamental ideas?

47:40.300 --> 47:41.140
 Yeah, I would say so.

47:41.140 --> 47:43.680
 I would think it's basically accessibility to scientists,

47:43.680 --> 47:46.980
 like give them, give scientists and engineers tools

47:46.980 --> 47:48.380
 that they don't have to think a lot about programming.

47:48.380 --> 47:50.300
 So give them really good building blocks,

47:50.300 --> 47:51.860
 give them functions that they wanna call

47:51.860 --> 47:54.360
 and sort of just the right length of spelling.

47:55.860 --> 47:59.500
 There's one tradition in programming where it's like,

47:59.500 --> 48:01.880
 make very, very long names, right?

48:01.880 --> 48:03.700
 And you can see it in some programming languages

48:03.700 --> 48:06.460
 where the names get, take half the screen.

48:06.460 --> 48:11.460
 And in the 4chan world, characters had to be six letters

48:11.540 --> 48:12.380
 early on, right?

48:12.380 --> 48:14.340
 And that's way too much, too little.

48:14.340 --> 48:16.820
 But I was like, I liked to have names

48:16.820 --> 48:18.940
 that were informative but short.

48:18.940 --> 48:22.340
 So even though Python, well this is a different conversation,

48:22.340 --> 48:25.860
 but documentation is doing some work there.

48:25.860 --> 48:29.180
 So when you look at great scientific libraries

48:29.180 --> 48:32.700
 and functions, there's a richness of documentation

48:32.700 --> 48:34.820
 that helps you get into the details.

48:34.820 --> 48:37.620
 The first glance at a function gives you the intuition

48:37.620 --> 48:40.540
 of all it needs to do by looking at the headers and so on.

48:40.540 --> 48:43.420
 But to get the depths of all the complexities involved,

48:43.420 --> 48:44.740
 all the options involved,

48:44.740 --> 48:45.580
 documentation does some of the work.

48:45.580 --> 48:47.380
 Documentation is essential, yeah.

48:47.380 --> 48:50.520
 So that was actually a, so we thought about several things.

48:50.520 --> 48:51.940
 One is we wanted plotting.

48:51.940 --> 48:53.580
 We wanted interactive environment.

48:53.580 --> 48:54.860
 We wanted good documentation.

48:54.860 --> 48:56.780
 These are things we knew, we wanted.

48:56.780 --> 49:00.460
 The reality is those took about 10 years to evolve, right?

49:00.460 --> 49:02.060
 Given the fact that we didn't have a big budget,

49:02.060 --> 49:03.100
 it was all volunteer labor.

49:03.100 --> 49:06.980
 It was sort of, when nthought got created

49:06.980 --> 49:10.060
 and they started to try to find projects,

49:10.060 --> 49:11.080
 people would pay for pieces

49:11.080 --> 49:13.740
 and they were able to fund some of it.

49:13.740 --> 49:15.780
 Not nearly enough to keep up with what was necessary.

49:15.780 --> 49:18.860
 And no criticism, just simply the reality.

49:18.860 --> 49:21.180
 I mean, it's hard to start a business

49:21.180 --> 49:23.220
 and then do consulting and then also

49:23.220 --> 49:26.180
 promote an open source project that's still fairly new.

49:26.180 --> 49:27.780
 Cypo is fairly niche.

49:27.780 --> 49:30.140
 We stayed connected all while I was a student,

49:30.140 --> 49:30.980
 sorry, a professor.

49:30.980 --> 49:32.340
 I went to BYU and started to teach.

49:32.340 --> 49:35.060
 Electrical engineering, all the applied math courses.

49:35.060 --> 49:36.980
 I loved teaching single processing,

49:36.980 --> 49:39.180
 probability theory, electromagnetism.

49:39.180 --> 49:40.940
 I was, if you look at writing my professor,

49:40.940 --> 49:42.500
 which my kids loved to do,

49:42.500 --> 49:46.900
 I wasn't, I got some bad reviews because people.

49:46.900 --> 49:48.580
 What was the criticism?

49:48.580 --> 49:50.920
 I would speak too high of a level.

49:50.920 --> 49:52.640
 Like I definitely had a calibration problem

49:52.640 --> 49:54.980
 coming out of graduate work

49:54.980 --> 49:56.980
 where I hate to be condescending to people.

49:56.980 --> 49:59.300
 Like I really have a ton of respect for people fundamentally.

49:59.300 --> 50:02.060
 Like my fundamental thing is I respect people.

50:02.060 --> 50:03.900
 Sometimes that can lead to a,

50:03.900 --> 50:07.640
 I was thinking they had more knowledge than they did.

50:07.640 --> 50:10.100
 And so I would just speak at a very high level,

50:10.100 --> 50:11.060
 assume they got it.

50:11.060 --> 50:14.340
 But they need to rise to the standard that you set.

50:14.340 --> 50:15.260
 I mean, that's one of the,

50:15.260 --> 50:17.180
 some of the greatest teachers do that.

50:17.180 --> 50:18.020
 And I agree.

50:18.020 --> 50:19.760
 And that was kind of what was inspiring me.

50:19.760 --> 50:21.300
 But you also have to,

50:22.160 --> 50:24.820
 I cannot say I was articulate

50:24.820 --> 50:26.300
 with some of the greatest teachers, right?

50:26.300 --> 50:28.540
 I was, like one classic example,

50:28.540 --> 50:30.420
 when I first taught at BYU,

50:30.420 --> 50:31.980
 my very first class, it was overheads,

50:31.980 --> 50:34.100
 transparencies, overheads.

50:34.100 --> 50:35.940
 Before projectors were really that common,

50:35.940 --> 50:37.100
 I taught transparencies.

50:37.100 --> 50:38.260
 I'm writing my notes out.

50:38.260 --> 50:40.540
 I go in, room's half dark.

50:40.540 --> 50:42.780
 I just blaring through these transparencies.

50:42.780 --> 50:44.900
 Here it is, here it is, here it is.

50:44.900 --> 50:47.480
 And I did give a quiz after two weeks.

50:47.480 --> 50:48.900
 No one knew anything.

50:48.900 --> 50:50.940
 Nothing I had taught had gotten anywhere.

50:50.940 --> 50:54.140
 And I realized, okay, I'm not, this is not working.

50:54.140 --> 50:56.380
 So I put away the transparencies

50:56.380 --> 50:58.860
 and I turned around and just started using the chalkboard.

50:58.860 --> 51:00.980
 And what it did is it slowed me down, right?

51:00.980 --> 51:02.260
 The chalkboard just slowed me down

51:02.260 --> 51:04.440
 and gave people time to process and to think.

51:04.440 --> 51:06.080
 And then that made me focus.

51:06.080 --> 51:07.900
 My writing wasn't great on the chalkboard,

51:07.900 --> 51:10.520
 but I really love that part of like the teaching.

51:10.520 --> 51:12.500
 So that entered SciPy's world in terms of,

51:12.500 --> 51:14.860
 we always understood that there's a didactic aspect

51:14.860 --> 51:17.740
 of SciPy, kind of how do you take the knowledge

51:17.740 --> 51:18.640
 and then produce it?

51:18.640 --> 51:21.020
 The challenge we had was the scope.

51:21.020 --> 51:23.420
 Like ultimately SciPy was everything, right?

51:23.420 --> 51:25.600
 And so 2001, when it first came out,

51:25.600 --> 51:26.800
 people were starting to use it.

51:26.800 --> 51:29.580
 No, this is cool, this is a tool we actually use.

51:29.580 --> 51:31.400
 At the same time, 2001 timeframe,

51:31.400 --> 51:33.940
 there was a little bit of like the Hubble Space Telescope,

51:33.940 --> 51:35.400
 the folks at Hubble that started to say,

51:35.400 --> 51:36.620
 hey, Python, we're gonna use Python

51:36.620 --> 51:38.720
 for processing images from Hubble.

51:38.720 --> 51:40.820
 And so Perry Greenfield was a good friend

51:40.820 --> 51:42.420
 in running that program.

51:42.420 --> 51:45.060
 And he had called me before I left WIU and said,

51:45.060 --> 51:47.020
 you know, we wanna do this,

51:47.020 --> 51:50.020
 but numeric actually has some challenges in terms of,

51:50.020 --> 51:52.700
 you know, it's not, the array doesn't have enough types.

51:52.700 --> 51:54.280
 We need more operations.

51:54.280 --> 51:56.660
 You know, broadcasting needs to be a little more settled.

51:56.660 --> 51:57.960
 They wanted record arrays.

51:57.960 --> 52:00.600
 They wanted, you know, record arrays are like a data frame,

52:00.600 --> 52:02.220
 but a little bit different,

52:02.220 --> 52:03.820
 but they wanted more structured data.

52:03.820 --> 52:06.020
 So he had called me even early on then,

52:06.020 --> 52:06.860
 and he said, you know, what,

52:06.860 --> 52:08.300
 would you wanna work on something to make this work?

52:08.300 --> 52:10.140
 And I said, yeah, I'm interested, but I'm going here,

52:10.140 --> 52:12.100
 and I, you know, we'll see if I have time.

52:12.100 --> 52:13.340
 So in the meantime, while I was teaching

52:13.340 --> 52:15.660
 and SciPy was emerging, and I had a student,

52:15.660 --> 52:16.840
 I was constantly, while I was teaching,

52:16.840 --> 52:18.840
 trying to figure a way to fund this stuff.

52:18.840 --> 52:21.660
 So I had a graduate student, my only graduate student,

52:21.660 --> 52:26.260
 a Chinese fellow, Liu Hongze is his name, great guy.

52:26.260 --> 52:29.900
 He wrote a bunch of stuff for iterative linear algebra,

52:29.900 --> 52:31.380
 like got into writing some of the iterative

52:31.380 --> 52:34.340
 linear algebra tools that are currently there in SciPy,

52:34.340 --> 52:36.040
 and they've gotten better since,

52:36.040 --> 52:39.260
 but this is in 2005, kept working on SciPy,

52:39.260 --> 52:43.060
 but Perry has started working on a replacement

52:43.060 --> 52:45.300
 to numeric called NumArray.

52:45.300 --> 52:49.020
 And in 2004, a package called ND Image,

52:49.020 --> 52:50.740
 it was an image processing library

52:50.740 --> 52:53.220
 that was written for NumArray,

52:53.220 --> 52:55.580
 and it had in it a morphology tool.

52:55.580 --> 52:56.740
 I don't know if you know what morphology is.

52:56.740 --> 52:58.540
 It's open, dilations, closed, you know,

52:58.540 --> 53:01.660
 there was sort of this, as a medical imaging student,

53:01.660 --> 53:02.500
 I knew what it was,

53:02.500 --> 53:04.420
 because it was used in segmentation a lot.

53:04.420 --> 53:06.460
 And in fact, I'd wanted to do something like that

53:06.460 --> 53:10.220
 in Python, in SciPy, but just had never gotten around to it.

53:10.220 --> 53:14.180
 So when it came out, but it worked only on NumArray,

53:14.180 --> 53:16.420
 and SciPy needed numeric,

53:16.420 --> 53:20.040
 and so we effectively had the beginning of this split.

53:20.040 --> 53:22.500
 And numeric and NumArray didn't share data,

53:22.500 --> 53:24.420
 they were just two, so you could have a gigabyte

53:24.420 --> 53:26.540
 of numeric, NumArray data, and gigabyte of numeric data,

53:26.540 --> 53:27.380
 and they wouldn't share it.

53:27.380 --> 53:28.500
 And so you had these,

53:28.500 --> 53:31.300
 then you had these scientific libraries written on top.

53:31.300 --> 53:32.940
 I got really bugged by that.

53:32.940 --> 53:35.060
 I got really like, oh man, this is not good,

53:35.060 --> 53:36.300
 we're not cooperating now,

53:36.300 --> 53:37.980
 we're sort of redoing each other's work,

53:37.980 --> 53:40.380
 and we're just this young community.

53:40.380 --> 53:43.940
 So that's what led me, even though I knew it was risky,

53:43.940 --> 53:47.140
 because my, you know, I was on a tenure track position,

53:47.140 --> 53:48.540
 2004 I got reviewed.

53:48.540 --> 53:49.540
 They said, hey, things are going okay,

53:49.540 --> 53:51.540
 you're doing well, paper's coming out,

53:51.540 --> 53:52.460
 but you're kind of spending a lot of time

53:52.460 --> 53:54.780
 doing this open source stuff, maybe do a little less of that,

53:54.780 --> 53:57.260
 and a little more of the paper writing and grant writing,

53:57.260 --> 54:00.860
 which was naive, but it was definitely the thinking.

54:00.860 --> 54:01.700
 It still goes on.

54:01.700 --> 54:03.060
 Still goes on.

54:03.060 --> 54:05.120
 You're basically creating a thing

54:05.120 --> 54:08.300
 which enables science in the 21st century.

54:08.300 --> 54:09.340
 Right.

54:09.340 --> 54:11.980
 Maybe don't emphasize that so much in your free year tenure.

54:11.980 --> 54:13.460
 Right.

54:13.460 --> 54:14.860
 It illustrates some of the challenges.

54:14.860 --> 54:15.700
 Yes.

54:15.700 --> 54:18.220
 It does, and it's, people mean well.

54:18.220 --> 54:19.060
 Yes.

54:19.060 --> 54:22.340
 Like, but we've gotten broken in a bunch of ways.

54:22.340 --> 54:23.660
 Certain things, programming,

54:23.660 --> 54:25.500
 understanding the role of software engineering,

54:25.500 --> 54:27.860
 programming in society is a little bit lacking.

54:27.860 --> 54:28.700
 Exactly.

54:28.700 --> 54:30.020
 Now, I was in electrical engineering position.

54:30.020 --> 54:30.860
 Right.

54:30.860 --> 54:33.140
 That's even worse there.

54:33.140 --> 54:34.700
 Yeah, it was very, they were very focused,

54:34.700 --> 54:37.300
 and so, you know, good people, and I had a great time,

54:37.300 --> 54:38.940
 I loved my time, I loved my teaching,

54:38.940 --> 54:40.460
 I loved all the things I did there.

54:40.460 --> 54:42.540
 The problem was, the split was happening

54:42.540 --> 54:43.940
 in this community that I loved, right?

54:43.940 --> 54:45.460
 I saw people, and I went, oh my gosh,

54:45.460 --> 54:47.780
 this is gonna be, this is not great,

54:47.780 --> 54:50.020
 and so I happened, you know, fate,

54:50.020 --> 54:52.620
 I had a class I had signed up for,

54:52.620 --> 54:54.860
 it's a, I was trying to build an MRI system,

54:54.860 --> 54:58.300
 so I had a kind of a radio, instead of a radio,

54:58.300 --> 55:00.780
 a digital radio class, it was a digital MRI class.

55:01.820 --> 55:04.020
 And I had people sign up, two people signed up,

55:04.020 --> 55:06.660
 then they dropped, and so I had nobody in this class.

55:06.660 --> 55:08.820
 So, and I didn't have any other courses to teach,

55:08.820 --> 55:10.940
 and I thought, oh, I've got some time,

55:10.940 --> 55:13.100
 and I'll just write, I'll just write a replace,

55:13.100 --> 55:14.820
 a merger of Numerica Numeray.

55:14.820 --> 55:16.980
 Like, I'll basically take the numeric code base

55:16.980 --> 55:19.220
 at the features Numeray was adding,

55:19.220 --> 55:21.180
 and then kind of come up with a single array library

55:21.180 --> 55:22.460
 that everybody can use.

55:22.460 --> 55:24.140
 So that's where NumPy came from,

55:24.140 --> 55:26.500
 was my thinking, hey, I can do this,

55:26.500 --> 55:27.860
 and who else is going to?

55:27.860 --> 55:29.260
 Because at that point, I'd been around the community

55:29.260 --> 55:30.820
 long enough, and I'd written enough C code,

55:30.820 --> 55:33.260
 I knew, I knew the structures, and I,

55:33.260 --> 55:35.060
 in fact, my first contribution to numeric

55:35.060 --> 55:38.580
 had been writing the CAPI documentation

55:38.580 --> 55:41.080
 that went in the first documentation for NumPy,

55:41.080 --> 55:43.020
 for numeric, sorry, this is Paul DuBois,

55:43.020 --> 55:45.100
 David Asher, Conrad Hinson, and myself.

55:45.100 --> 55:47.580
 I got credit because I wrote this chapter,

55:47.580 --> 55:51.260
 which is all the CAPI of Numerica, all the C stuff.

55:51.260 --> 55:53.380
 So I said, I'm probably the one to do it,

55:53.380 --> 55:54.760
 and nobody else is gonna do this.

55:54.760 --> 55:58.340
 So it was sort of, out of a sense of duty and passion,

55:58.340 --> 56:01.460
 knowing that, eh, I don't think my academic,

56:01.460 --> 56:03.940
 I don't think the department here is gonna appreciate this,

56:03.940 --> 56:06.020
 but it's the right thing to do.

56:06.020 --> 56:06.860
 It was like.

56:06.860 --> 56:08.660
 Can we just link on that moment?

56:08.660 --> 56:09.500
 Yeah, yeah.

56:09.500 --> 56:11.740
 Because the importance of the way you thought

56:11.740 --> 56:16.360
 and the action you took, I feel is understated

56:16.360 --> 56:19.900
 and is rare and I would love to see so much more of it

56:19.900 --> 56:23.680
 because what happens as the tools become more popular,

56:24.820 --> 56:27.180
 there's a split that happens.

56:27.180 --> 56:30.940
 And it's a truly heroic and impactful action

56:30.940 --> 56:33.580
 to in those early, in that early split,

56:33.580 --> 56:37.820
 to step up and it's like great leaders throughout history,

56:37.820 --> 56:39.660
 like get, what is the brave heart,

56:39.660 --> 56:42.500
 like get on a horse and rile the troops

56:42.500 --> 56:46.060
 because I think that can have, make a big difference.

56:46.060 --> 56:48.180
 We have TensorFlow versus PyTorch

56:48.180 --> 56:49.100
 in the machine learning community.

56:49.100 --> 56:50.380
 We have the same problem today.

56:50.380 --> 56:51.780
 Yeah, I wonder.

56:51.780 --> 56:52.620
 It's actually bigger.

56:52.620 --> 56:56.620
 I wonder if it's possible in the early days

56:56.620 --> 56:58.220
 to rally the troops.

56:58.220 --> 57:00.020
 It is possible, especially in the early days.

57:00.020 --> 57:01.620
 The longer it goes, the harder, right?

57:01.620 --> 57:03.940
 The more energy in the factions, the harder.

57:03.940 --> 57:05.700
 But in the early days, it is possible

57:05.700 --> 57:07.660
 and it's extremely helpful

57:07.660 --> 57:09.100
 and there's a willingness there,

57:09.100 --> 57:11.740
 but the challenge is there's just not a willingness

57:11.740 --> 57:12.980
 to fund it.

57:12.980 --> 57:14.880
 There's not a willingness to, you know,

57:14.880 --> 57:17.540
 like I was literally walking into a field

57:17.540 --> 57:18.620
 saying I'm going to do this

57:18.620 --> 57:20.140
 and here I am, like, you know,

57:20.140 --> 57:22.080
 I have five kids at home now.

57:23.740 --> 57:24.820
 Pressure builds.

57:24.820 --> 57:26.220
 Sometimes my wife hears these stories

57:26.220 --> 57:28.100
 and she's like, you did what?

57:29.020 --> 57:29.860
 I thought we were going to,

57:29.860 --> 57:31.460
 I thought you were actually on a path

57:31.460 --> 57:34.100
 to make sure we had resources and money, but,

57:34.100 --> 57:36.420
 but again, there's a, there's an aspect,

57:36.420 --> 57:37.860
 I'm a very hopeful person.

57:37.860 --> 57:39.680
 I'm an optimistic person by nature.

57:39.680 --> 57:41.120
 I love people.

57:41.120 --> 57:43.140
 I learned that about myself later on.

57:43.140 --> 57:47.220
 And part of my, my religious beliefs

57:47.220 --> 57:48.380
 actually lead to that.

57:48.380 --> 57:49.880
 And it's why I hold them dear

57:49.880 --> 57:51.300
 because it's actually how I feel about,

57:51.300 --> 57:53.420
 that's what leads me to these attitudes,

57:53.420 --> 57:55.900
 sort of this hopefulness and this sense of,

57:55.900 --> 57:58.600
 yeah, it may not work out for me financially

57:58.600 --> 58:00.600
 or maybe, but that's not the ultimate gain.

58:00.600 --> 58:02.940
 Like that's a thing, but it's not,

58:02.940 --> 58:05.540
 that's not the scorecard for me.

58:05.540 --> 58:07.060
 And so I just wanted to be helpful

58:07.060 --> 58:09.280
 and I knew, and partly because these SciPy conferences,

58:09.280 --> 58:10.860
 because the maintenance conversations,

58:10.860 --> 58:13.300
 I knew there was a lot of need for this, right?

58:13.300 --> 58:15.460
 And so I had this, it wasn't like I was alone

58:15.460 --> 58:16.460
 in terms of no feedback.

58:16.460 --> 58:19.440
 I had these people who knew, but it was crazy.

58:19.440 --> 58:20.700
 Like people who at the time said,

58:20.700 --> 58:22.340
 yeah, we didn't think you'd be able to do it.

58:22.340 --> 58:23.160
 We thought it was crazy.

58:23.160 --> 58:26.720
 And also instructive, like practically speaking,

58:26.720 --> 58:28.700
 that you had a cool feature

58:28.700 --> 58:30.820
 that you were chasing the morphology, like the.

58:30.820 --> 58:31.660
 Yes.

58:31.660 --> 58:32.500
 Like it's not just like.

58:32.500 --> 58:33.460
 There's an end result.

58:33.460 --> 58:35.140
 It's not some visionary thing.

58:35.140 --> 58:36.820
 I'm going to unite the community.

58:36.820 --> 58:38.060
 You were like. Correct.

58:38.060 --> 58:39.520
 You were actually practically,

58:39.520 --> 58:42.100
 this is what one person actually could do

58:42.100 --> 58:43.220
 and actually build.

58:43.220 --> 58:44.220
 Cause that is important.

58:44.220 --> 58:46.320
 Cause you can get over your skis.

58:47.460 --> 58:49.060
 You can definitely get over your skis.

58:49.060 --> 58:52.140
 And I had, in fact, this almost got me over my skis, right?

58:52.140 --> 58:54.940
 I would say, well, in retrospect, I hate looking back.

58:56.140 --> 58:58.540
 I can tell you all the flaws with NumPy, right?

58:58.540 --> 59:00.700
 When I go into it, there's lots of stuff that I'm like,

59:00.700 --> 59:01.660
 oh man, that's embarrassing.

59:01.660 --> 59:02.500
 That was wrong.

59:02.500 --> 59:04.300
 I wish I had somebody stop me with a wet fish there.

59:04.300 --> 59:07.020
 Like I needed, like what I'd wished I'd had

59:07.020 --> 59:10.460
 was somebody with more experience and certainly library

59:10.460 --> 59:11.540
 writing and array library.

59:11.540 --> 59:12.780
 There's like, I wish I had me.

59:12.780 --> 59:14.520
 I could go back in time and go do this, do that.

59:14.520 --> 59:15.480
 There's a more important thing.

59:15.480 --> 59:18.100
 Cause there's things we did that are still there

59:18.100 --> 59:20.940
 that are problematic, that created challenges for later.

59:20.940 --> 59:22.460
 And I didn't know it at the time.

59:22.460 --> 59:24.420
 Didn't understand how important that was.

59:24.420 --> 59:26.460
 And in many cases, didn't know what to do.

59:26.460 --> 59:29.060
 Like there was pieces of the design of NumPy.

59:29.060 --> 59:31.340
 I didn't know what to do until five years ago.

59:31.340 --> 59:32.860
 Now I know what they should have been, Ben.

59:32.860 --> 59:33.960
 But I didn't know at the time and nobody,

59:33.960 --> 59:35.380
 and I couldn't get the help.

59:35.380 --> 59:36.660
 Anyway, so I wrote it.

59:36.660 --> 59:38.780
 It took about, it took four months to write

59:38.780 --> 59:43.360
 the first version, then about 14 months to make it usable.

59:43.360 --> 59:45.860
 But it was, it wasn't, it was that first four months

59:45.860 --> 59:49.320
 of intense writing, coding, getting something out the door

59:49.320 --> 59:52.380
 that worked that was, it was, it was definitely challenging.

59:52.380 --> 59:54.900
 And then the big thing I did was create a new type object

59:54.900 --> 59:56.100
 called D type.

59:56.100 --> 59:58.780
 That was probably the contribution.

59:58.780 --> 1:00:01.900
 And then the fact that I added broad, not just broadcasting,

1:00:01.900 --> 1:00:06.500
 but advanced indexing so that you could do masked indexing

1:00:06.500 --> 1:00:09.940
 and indirect indexing instead of just slicing.

1:00:09.940 --> 1:00:13.020
 So for people who don't know, and maybe you can elaborate,

1:00:13.020 --> 1:00:17.660
 NumPy, I guess the vision in the narrowest sense

1:00:17.660 --> 1:00:21.460
 is to have this object that represents

1:00:21.460 --> 1:00:23.180
 n dimensional arrays.

1:00:23.180 --> 1:00:26.300
 And like at any level of abstraction you want,

1:00:26.300 --> 1:00:28.220
 but basically it could be a black box

1:00:28.220 --> 1:00:30.940
 that you can investigate in ways that you would naturally

1:00:30.940 --> 1:00:33.340
 want to investigate such objects.

1:00:33.340 --> 1:00:34.180
 Yes, exactly.

1:00:34.180 --> 1:00:35.740
 So you could do math on it easily.

1:00:35.740 --> 1:00:37.180
 Math on it easily, yeah.

1:00:37.180 --> 1:00:39.860
 So it had an associated library of math operations

1:00:39.860 --> 1:00:43.220
 and effectively SciPy became an even larger operate set

1:00:43.220 --> 1:00:44.940
 of math operations.

1:00:44.940 --> 1:00:48.020
 So the key for me was I was going to write NumPy

1:00:48.020 --> 1:00:50.340
 and then move SciPy to depend on NumPy.

1:00:50.340 --> 1:00:52.980
 In fact, early on, one of the initial proposals

1:00:52.980 --> 1:00:54.540
 was that we would just write SciPy

1:00:54.540 --> 1:00:56.660
 and it would have the numeric object inside of it.

1:00:56.660 --> 1:00:59.780
 And it'd be SciPy.array or something.

1:00:59.780 --> 1:01:02.180
 That turned out to be problematic because numeric

1:01:02.180 --> 1:01:04.820
 already had a little mini library of linear algebra

1:01:04.820 --> 1:01:08.020
 and some functions, and it had enough momentum,

1:01:08.020 --> 1:01:10.340
 enough users that nobody wanted to,

1:01:10.340 --> 1:01:12.060
 they wanted backward compatibility.

1:01:12.060 --> 1:01:13.740
 One of the big challenges of NumPy

1:01:13.740 --> 1:01:14.980
 was I had to be backward compatible

1:01:14.980 --> 1:01:16.980
 with both numeric and NumArray

1:01:16.980 --> 1:01:19.300
 in order to allow both of those communities to come together.

1:01:19.300 --> 1:01:21.140
 There was a ton of work in creating

1:01:21.140 --> 1:01:22.580
 that backward compatibility

1:01:22.580 --> 1:01:25.420
 that also created echoes in today's object.

1:01:25.420 --> 1:01:27.180
 Like some of the complexity in today's object

1:01:27.180 --> 1:01:30.060
 is actually from that goal of backward compatibility

1:01:30.060 --> 1:01:31.380
 to these other communities,

1:01:31.380 --> 1:01:34.620
 which if you didn't have that, you'd do something different,

1:01:34.620 --> 1:01:37.740
 which is instructive because a lot of things are there.

1:01:37.740 --> 1:01:38.940
 You think, what is that there for?

1:01:38.940 --> 1:01:41.380
 It's like, well, it's a remnant.

1:01:41.380 --> 1:01:45.220
 It's an artifact of its historical existence.

1:01:45.220 --> 1:01:46.780
 By the way, I love the empathy

1:01:46.780 --> 1:01:48.460
 and the lack of ego behind that

1:01:48.460 --> 1:01:51.420
 because I feel, you see that in the split

1:01:51.420 --> 1:01:53.340
 in the JavaScript framework, for example,

1:01:53.340 --> 1:01:54.860
 the arbitrary branching.

1:01:54.860 --> 1:01:55.700
 Right.

1:01:56.980 --> 1:01:59.020
 I think in order to unite people,

1:01:59.020 --> 1:02:00.620
 you have to kind of put your ego aside

1:02:00.620 --> 1:02:02.260
 and truly listen to others.

1:02:02.260 --> 1:02:03.100
 You do.

1:02:03.100 --> 1:02:04.820
 What do you love about NumArray?

1:02:04.820 --> 1:02:06.020
 What do you love about Numeric?

1:02:06.020 --> 1:02:07.460
 Like actually get a sense,

1:02:07.460 --> 1:02:08.860
 we were talking about languages earlier,

1:02:08.860 --> 1:02:11.100
 sort of empathize to the culture,

1:02:11.100 --> 1:02:14.660
 the people that love something about this particular API,

1:02:14.660 --> 1:02:18.100
 some of the naming style

1:02:18.100 --> 1:02:21.220
 or the actual usage patterns

1:02:21.220 --> 1:02:22.820
 and truly understand them

1:02:22.820 --> 1:02:26.780
 and so that you can create that same draw

1:02:26.780 --> 1:02:28.620
 in the united thing. I completely agree.

1:02:28.620 --> 1:02:29.460
 I completely agree.

1:02:29.460 --> 1:02:31.780
 And you have to also have enough passion

1:02:31.780 --> 1:02:32.620
 that you'll do it.

1:02:32.620 --> 1:02:34.660
 It can't be just like a perfunctory,

1:02:34.660 --> 1:02:36.500
 oh yes, I'll listen to you

1:02:36.500 --> 1:02:38.380
 and then I'm not really that excited about it.

1:02:38.380 --> 1:02:39.620
 So it really is an aspect,

1:02:39.620 --> 1:02:42.260
 it's a philosophical, like there's a philia,

1:02:42.260 --> 1:02:44.260
 there's a love of esteeming of others.

1:02:44.260 --> 1:02:47.060
 It's actually at the heart of what,

1:02:47.060 --> 1:02:49.220
 it's sort of a life philosophy for me, right?

1:02:49.220 --> 1:02:51.540
 That I'm constantly pursuing and that helped,

1:02:51.540 --> 1:02:52.660
 absolutely helped.

1:02:52.660 --> 1:02:54.260
 Makes me wonder in a philosophical,

1:02:54.260 --> 1:02:57.460
 like looking at human civilization as one object,

1:02:57.460 --> 1:02:59.980
 it makes me wonder how we can copy and paste Travis's

1:02:59.980 --> 1:03:00.820
 in this book.

1:03:00.820 --> 1:03:03.300
 Well, some aspects, maybe.

1:03:03.300 --> 1:03:05.220
 Some aspects, right, right, exactly.

1:03:05.220 --> 1:03:07.300
 Well, it's a good question.

1:03:07.300 --> 1:03:08.140
 How do we teach this?

1:03:08.140 --> 1:03:09.300
 How do we encourage it?

1:03:09.300 --> 1:03:10.140
 How do we lift it?

1:03:10.140 --> 1:03:12.700
 Because so much of the software world,

1:03:12.700 --> 1:03:15.140
 it's giant communities, right?

1:03:15.140 --> 1:03:16.820
 But it seems like so much is moved by,

1:03:16.820 --> 1:03:18.180
 like little individuals.

1:03:18.180 --> 1:03:21.020
 You talk about like Linus Torvalds.

1:03:21.020 --> 1:03:23.380
 It's like, could you have not,

1:03:23.380 --> 1:03:25.980
 could you have had Linux without him?

1:03:25.980 --> 1:03:26.820
 Could you?

1:03:26.820 --> 1:03:28.140
 Yeah, Guido and Python.

1:03:28.140 --> 1:03:28.980
 Guido and Python.

1:03:28.980 --> 1:03:29.820
 Guido and Python.

1:03:29.820 --> 1:03:30.980
 Well, the iPy community particularly,

1:03:30.980 --> 1:03:32.820
 it's like I said, we wanted to build this big thing,

1:03:32.820 --> 1:03:33.780
 but ultimately we didn't.

1:03:33.780 --> 1:03:36.060
 What happened is we had Mavericks and champions

1:03:36.060 --> 1:03:37.780
 like John Hunter who created Matplotlib.

1:03:37.780 --> 1:03:39.940
 We had Fernando Perez who created iPython.

1:03:39.940 --> 1:03:42.260
 And so we sort of inspired each other,

1:03:42.260 --> 1:03:43.980
 but then it kind of, there's sort of a culture

1:03:43.980 --> 1:03:47.820
 of this selfless giving, the stewardship mentality,

1:03:47.820 --> 1:03:49.140
 as opposed to ownership mentality,

1:03:49.140 --> 1:03:54.040
 but stewardship and community focused,

1:03:54.040 --> 1:03:56.620
 community focused, but intentional work.

1:03:56.620 --> 1:03:58.900
 Like not waiting for everybody else to do the work,

1:03:58.900 --> 1:04:00.700
 but you're doing it for the benefit of others

1:04:00.700 --> 1:04:02.900
 and not worried about what you're gonna get.

1:04:04.020 --> 1:04:04.860
 You're not worried about the credit.

1:04:04.860 --> 1:04:05.860
 You're not worried about what you're gonna get.

1:04:05.860 --> 1:04:07.580
 You're worried about, I later realized

1:04:07.580 --> 1:04:09.000
 that I have to worry a little about credit,

1:04:09.000 --> 1:04:10.300
 not because I want the credit,

1:04:10.300 --> 1:04:11.380
 because I want people to understand

1:04:11.380 --> 1:04:13.020
 what led to the results.

1:04:13.020 --> 1:04:15.060
 Like, I don't, it's not about me.

1:04:15.060 --> 1:04:17.540
 It's I want to understand this is what led to the result.

1:04:17.540 --> 1:04:18.980
 So let's like, I think doing,

1:04:18.980 --> 1:04:21.100
 and this is what had no impact on the result.

1:04:21.100 --> 1:04:23.420
 Like let's promote, just like you said,

1:04:23.420 --> 1:04:25.100
 I want to promote the attributes

1:04:25.100 --> 1:04:26.520
 that help make us better off.

1:04:26.520 --> 1:04:28.820
 How do we make more of West McKinney?

1:04:28.820 --> 1:04:31.620
 Like West McKinney was critical to the success of Python

1:04:31.620 --> 1:04:33.420
 because of his creation of pandas,

1:04:33.420 --> 1:04:36.420
 which is the roots of that were all the way back

1:04:36.420 --> 1:04:40.260
 in numeric and num array and numpy,

1:04:40.260 --> 1:04:43.180
 where numpy created an array of records.

1:04:43.180 --> 1:04:45.980
 West started to use that almost like a data frame,

1:04:45.980 --> 1:04:47.840
 except it's an array of records.

1:04:47.840 --> 1:04:49.780
 And data frame, the challenge is,

1:04:49.780 --> 1:04:52.240
 okay, if you want to augment it at another column,

1:04:52.240 --> 1:04:54.700
 you have to insert, you have to do all this memory movement

1:04:54.700 --> 1:04:55.660
 to insert a column.

1:04:55.660 --> 1:04:57.180
 Whereas data frames became,

1:04:57.180 --> 1:05:00.460
 oh, I'm going to have a loose collection of arrays.

1:05:00.460 --> 1:05:03.980
 So it's a record of arrays that is a part of a data frame.

1:05:03.980 --> 1:05:05.560
 And we thought about that back in the memory days,

1:05:05.560 --> 1:05:08.940
 but West ended up doing the work to build it.

1:05:08.940 --> 1:05:11.300
 And then also the operations that were relevant

1:05:11.300 --> 1:05:12.620
 for data processing.

1:05:12.620 --> 1:05:15.220
 What I noticed is just that each of these little things

1:05:15.220 --> 1:05:17.380
 creates just another tick, another up.

1:05:17.380 --> 1:05:19.940
 So numpy ultimately took a little while,

1:05:19.940 --> 1:05:22.700
 about six months in, people started to join me,

1:05:22.700 --> 1:05:27.300
 Francesc Altad, Robert Kern, Charles Harris.

1:05:27.300 --> 1:05:30.300
 And these people are many of the unsung heroes, I would say.

1:05:30.300 --> 1:05:31.980
 People who are, you know,

1:05:31.980 --> 1:05:34.100
 they sometimes don't get the credit they deserve

1:05:34.100 --> 1:05:36.540
 because they were critical both to support,

1:05:36.540 --> 1:05:38.260
 like, you know, it's hard and you want,

1:05:38.260 --> 1:05:40.340
 you need some support, people need support.

1:05:40.340 --> 1:05:41.580
 And I needed just encouragement.

1:05:41.580 --> 1:05:43.860
 And they were helping and encouraged by contributing.

1:05:43.860 --> 1:05:47.260
 And once, the big thing for me was when John Hunter,

1:05:48.240 --> 1:05:50.180
 he had previously done kind of a simple thing

1:05:50.180 --> 1:05:52.820
 called numerics to kind of, you know, between numeric

1:05:52.820 --> 1:05:55.100
 and numerae, he had a little high level tool

1:05:55.100 --> 1:05:57.900
 that would just select each one for matplotlib.

1:05:57.900 --> 1:06:00.420
 In 2006, he finally said,

1:06:00.420 --> 1:06:03.220
 we're gonna just make numpy the dependency of matplotlib.

1:06:03.220 --> 1:06:04.420
 As soon as he did that,

1:06:04.420 --> 1:06:06.100
 and I remember specifically when he did that,

1:06:06.100 --> 1:06:07.900
 I said, okay, we've done it.

1:06:07.900 --> 1:06:11.260
 Like, that was when I knew we had to see success.

1:06:11.260 --> 1:06:13.620
 Before then it was still unsure,

1:06:13.620 --> 1:06:15.060
 but that kind of started a roller coaster.

1:06:15.060 --> 1:06:17.900
 And then 2006 to 2009.

1:06:17.900 --> 1:06:20.940
 And then I've been floored by what it's done.

1:06:20.940 --> 1:06:22.900
 Like, I knew it would help.

1:06:22.900 --> 1:06:25.380
 I had no idea how much it would help.

1:06:25.380 --> 1:06:26.300
 Right, so.

1:06:26.300 --> 1:06:28.660
 And it has to do with, again, the language thing.

1:06:28.660 --> 1:06:31.940
 It just, people started to think in terms of numpy.

1:06:31.940 --> 1:06:32.820
 Yes.

1:06:32.820 --> 1:06:36.460
 And that opened up a whole new way of thinking.

1:06:36.460 --> 1:06:39.220
 And part of the story that you kind of mentioned,

1:06:39.220 --> 1:06:42.980
 but maybe you can elaborate,

1:06:42.980 --> 1:06:46.320
 is it seems like at some point in the story,

1:06:46.320 --> 1:06:50.800
 Python took over science and data science.

1:06:50.800 --> 1:06:51.640
 Yes.

1:06:51.640 --> 1:06:54.800
 And bigger than that,

1:06:54.800 --> 1:06:59.800
 the scientific community started to think like programmers

1:07:00.160 --> 1:07:04.280
 or started to utilize the tools of computers to do,

1:07:04.280 --> 1:07:06.640
 like at a scale that wasn't done with Fortran.

1:07:06.640 --> 1:07:09.320
 Like at this gigantic scale,

1:07:09.320 --> 1:07:10.760
 they started to open in their heart.

1:07:10.760 --> 1:07:12.040
 And then Python was the thing.

1:07:12.040 --> 1:07:14.280
 I mean, there's a few other competitors, I guess,

1:07:14.280 --> 1:07:16.960
 but Python, I think, really, really took over.

1:07:16.960 --> 1:07:17.800
 I agree.

1:07:17.800 --> 1:07:18.620
 There's a lot of stories here

1:07:18.620 --> 1:07:19.720
 that are kind of during this journey,

1:07:19.720 --> 1:07:23.240
 because this is sort of the start of this journey in 2005, 2006.

1:07:23.240 --> 1:07:28.180
 So my tenure committee, I applied for tenure in 2006, 2007.

1:07:28.180 --> 1:07:29.780
 It came back, I split the department.

1:07:29.780 --> 1:07:31.300
 I was very polarizing.

1:07:31.300 --> 1:07:32.560
 I had some huge fans

1:07:32.560 --> 1:07:34.380
 and then some people that said no way, right?

1:07:34.380 --> 1:07:36.840
 So it was very, I was a polarizing figure in the department.

1:07:36.840 --> 1:07:39.800
 It went all the way up to the university president.

1:07:39.800 --> 1:07:42.760
 Ultimately, my department chair had the sway

1:07:42.760 --> 1:07:43.760
 and they didn't say no.

1:07:43.760 --> 1:07:46.360
 They said, come back in two years and do it again.

1:07:46.360 --> 1:07:49.680
 And I went, eh, at that point, I was like,

1:07:49.680 --> 1:07:52.840
 I mean, I had this interest in entrepreneurship,

1:07:52.840 --> 1:07:56.400
 this interest in not the academic circles,

1:07:56.400 --> 1:07:59.680
 not the, like, how do we make industry work?

1:07:59.680 --> 1:08:03.060
 So I do have to give credit to that exploration of economics

1:08:03.060 --> 1:08:06.540
 because that led me, oh, I had a lot of opinions.

1:08:06.540 --> 1:08:09.520
 I was actually very libertarian at the time.

1:08:09.520 --> 1:08:11.840
 And I still have some libertarian trends,

1:08:11.840 --> 1:08:15.880
 but I'm more of a, I'm more of a collectivist libertarian.

1:08:15.880 --> 1:08:18.720
 So you value broadly, philosophically freedom.

1:08:18.720 --> 1:08:20.360
 I value broadly, philosophically freedom,

1:08:20.360 --> 1:08:23.440
 but I also understand the power of communities,

1:08:23.440 --> 1:08:26.200
 like the power of collective behavior.

1:08:26.200 --> 1:08:27.840
 And so what's that balance, right?

1:08:27.840 --> 1:08:28.880
 That makes sense.

1:08:29.800 --> 1:08:31.520
 So by the time I was just,

1:08:31.520 --> 1:08:33.380
 I gotta go out and explore this entrepreneur world.

1:08:33.380 --> 1:08:34.220
 So I left academia.

1:08:34.220 --> 1:08:37.820
 I said, no thanks, called my friend, Eric, here,

1:08:37.820 --> 1:08:39.560
 who had, his company was going.

1:08:39.560 --> 1:08:43.120
 I said, hey, could I join you and start this trend?

1:08:43.120 --> 1:08:45.920
 And he, at that time they were using SciFi a lot.

1:08:45.920 --> 1:08:47.120
 They were trying to get clients.

1:08:47.120 --> 1:08:48.760
 And so I came down to Texas.

1:08:48.760 --> 1:08:51.160
 And in Texas is where I sort of,

1:08:51.160 --> 1:08:53.440
 it's my entrepreneur world, right?

1:08:53.440 --> 1:08:57.360
 I left academia and went to entrepreneur world in 2007.

1:08:57.360 --> 1:08:59.920
 So I moved here in 2007, kind of took a leap,

1:08:59.920 --> 1:09:01.600
 knew nothing really about business,

1:09:01.600 --> 1:09:03.740
 knew nothing about a lot of stuff there.

1:09:05.100 --> 1:09:06.980
 There's, you know, for a long time,

1:09:06.980 --> 1:09:08.980
 I've kept some connections to a lot of academics

1:09:08.980 --> 1:09:10.080
 because I still value it.

1:09:10.080 --> 1:09:12.520
 I still love the scientific tradition.

1:09:12.520 --> 1:09:15.240
 I still value the essence and the soul and the heart

1:09:15.240 --> 1:09:17.320
 of what is possible.

1:09:17.320 --> 1:09:21.380
 Don't like a lot of the administration

1:09:21.380 --> 1:09:24.160
 and the kind of, we can go into detail about why

1:09:24.160 --> 1:09:25.320
 and where and how this happens,

1:09:25.320 --> 1:09:26.520
 what are some of the challenges.

1:09:26.520 --> 1:09:28.480
 I don't know, but I'm with you.

1:09:28.480 --> 1:09:31.840
 So I'm still affiliated with MIT.

1:09:31.840 --> 1:09:35.600
 I still love MIT because there's magic there.

1:09:35.600 --> 1:09:40.320
 There's people I talk to, like researchers, faculty,

1:09:40.320 --> 1:09:43.120
 in those conversations and the whiteboard

1:09:43.120 --> 1:09:46.220
 and just the conversation, that's magic there.

1:09:46.220 --> 1:09:48.120
 All the other stuff, the administration,

1:09:48.120 --> 1:09:51.020
 all that kind of stuff seems to,

1:09:52.020 --> 1:09:54.920
 you don't wanna say too harshly criticize

1:09:54.920 --> 1:09:57.680
 sort of bureaucracies, but there's a lag

1:09:57.680 --> 1:10:00.800
 that seems to get in the way of the magic.

1:10:00.800 --> 1:10:03.800
 And I'm still have a lot of hope

1:10:03.800 --> 1:10:08.320
 that that can change because I don't often see

1:10:08.320 --> 1:10:12.840
 that particular type of magic elsewhere in the industry.

1:10:12.840 --> 1:10:15.800
 So like we need that and we need that flame going.

1:10:15.800 --> 1:10:19.120
 And it's the same thing as exactly as you said,

1:10:19.120 --> 1:10:20.560
 it has the same kind of elements

1:10:20.560 --> 1:10:23.240
 like the open source community does.

1:10:23.240 --> 1:10:27.160
 And, but then if you, like the reason I stepped away,

1:10:27.160 --> 1:10:30.260
 the reason I'm here, just like you did in Austin is like,

1:10:30.260 --> 1:10:33.240
 if I wanna build one robot, I'll stay at MIT.

1:10:33.240 --> 1:10:37.460
 But if I wanna build millions and make money enough

1:10:37.460 --> 1:10:41.000
 to where I can explore the magic of that, then you can't.

1:10:41.000 --> 1:10:44.160
 And I think that dance is...

1:10:44.160 --> 1:10:47.480
 That translational dance has been lost a bit, right?

1:10:47.480 --> 1:10:48.640
 And there's a lot of reasons for that.

1:10:48.640 --> 1:10:50.160
 I'm not, I'm certainly not an expert on this stuff.

1:10:50.160 --> 1:10:51.660
 I can opine like anybody else,

1:10:51.660 --> 1:10:55.820
 but I realized that I wanted to explore entrepreneurship,

1:10:55.820 --> 1:10:57.720
 which I, and really figure out,

1:10:57.720 --> 1:11:01.560
 and it's been a driving passion for 20 years, 25 years.

1:11:01.560 --> 1:11:06.480
 How do we connect capital markets and company?

1:11:06.480 --> 1:11:07.880
 Cause again, I fell in love with the notion of,

1:11:07.880 --> 1:11:11.160
 oh, profit seeking on its own is not a bad thing.

1:11:11.160 --> 1:11:13.520
 It's actually a coordination mechanism

1:11:13.520 --> 1:11:16.480
 for allocating resources that, you know,

1:11:16.480 --> 1:11:18.000
 in an emergent way, right?

1:11:18.000 --> 1:11:20.720
 That respects everybody's opinions, right?

1:11:20.720 --> 1:11:21.880
 So this is actually powerful.

1:11:21.880 --> 1:11:25.320
 So I say all the time, when I make a company

1:11:25.320 --> 1:11:27.260
 and we do something that makes profit,

1:11:27.260 --> 1:11:28.100
 what we're saying is, hey,

1:11:28.100 --> 1:11:29.800
 we're collecting of the world's resources

1:11:29.800 --> 1:11:31.480
 and voluntarily people are asking us

1:11:31.480 --> 1:11:33.000
 to do something that they like.

1:11:33.000 --> 1:11:34.000
 And that's a huge deal.

1:11:34.000 --> 1:11:36.120
 And so I really liked that energy.

1:11:36.120 --> 1:11:37.560
 So that's what I came to do and to learn

1:11:37.560 --> 1:11:38.480
 and to try to figure out.

1:11:38.480 --> 1:11:40.120
 And that's what I've been kind of stumbling through

1:11:40.120 --> 1:11:40.960
 since for the past 14 years.

1:11:40.960 --> 1:11:42.580
 And that's 2007.

1:11:42.580 --> 1:11:43.420
 2007, yeah.

1:11:43.420 --> 1:11:44.960
 And so you were still working at NoPi.

1:11:44.960 --> 1:11:46.560
 So NoPi was just emerging.

1:11:46.560 --> 1:11:47.400
 Just emerging.

1:11:47.400 --> 1:11:49.160
 One of the things I've done,

1:11:49.160 --> 1:11:51.480
 it's worth mentioning because it emphasizes

1:11:51.480 --> 1:11:53.840
 the exploratory nature of my thinking at the time.

1:11:53.840 --> 1:11:55.240
 I said, well, I don't know how to fund this thing.

1:11:55.240 --> 1:11:56.720
 I've got a graduate student I'm paying for

1:11:56.720 --> 1:11:57.880
 and I've got no funding for him.

1:11:57.880 --> 1:12:00.520
 And I had done some fundraising from the public

1:12:00.520 --> 1:12:02.800
 to try to get public fundraisers in my lab.

1:12:02.800 --> 1:12:03.880
 I didn't really wanna go out

1:12:03.880 --> 1:12:05.360
 and just do the fundraising circuit

1:12:05.360 --> 1:12:06.920
 the way it's traditionally done.

1:12:06.920 --> 1:12:09.960
 So I wrote a book and I said, I'm gonna write a book

1:12:09.960 --> 1:12:11.440
 and I'm gonna charge for it.

1:12:11.440 --> 1:12:12.720
 It was called Guide to NoPi.

1:12:12.720 --> 1:12:14.040
 And so ultimately NoPi became

1:12:14.040 --> 1:12:15.960
 documentation driven development

1:12:15.960 --> 1:12:17.280
 because I basically wrote the book

1:12:17.280 --> 1:12:19.760
 and made sure the stuff worked or the book would work.

1:12:19.760 --> 1:12:23.040
 So it really helped actually make NoPi become a thing.

1:12:23.040 --> 1:12:25.800
 So writing that book,

1:12:25.800 --> 1:12:28.200
 and it's not a page turner.

1:12:28.200 --> 1:12:29.680
 Guide to NoPi is not a book you pick up

1:12:29.680 --> 1:12:31.520
 and go, oh, this is great, over the fire.

1:12:31.520 --> 1:12:33.640
 But it's where you could find the details,

1:12:33.640 --> 1:12:34.720
 like how'd all this work.

1:12:34.720 --> 1:12:36.520
 And a lot of people love that book.

1:12:36.520 --> 1:12:38.040
 And so a lot of people ended up,

1:12:38.040 --> 1:12:41.600
 so I said, look, I need to, so I'm gonna charge for it.

1:12:41.600 --> 1:12:42.760
 And I got some flack for that.

1:12:42.760 --> 1:12:45.920
 Not that much, just probably five angry messages,

1:12:45.920 --> 1:12:49.960
 people yelling at me saying I was a bad guy

1:12:49.960 --> 1:12:51.360
 for charging for this book.

1:12:51.360 --> 1:12:53.280
 Was one of them Richard Stallman?

1:12:53.280 --> 1:12:54.120
 No. Just kidding.

1:12:54.120 --> 1:12:56.920
 No, I haven't really had any interaction with him personally,

1:12:56.920 --> 1:12:59.840
 like I said, but there were a few,

1:12:59.840 --> 1:13:01.280
 but actually surprisingly not.

1:13:01.280 --> 1:13:02.760
 There was actually a lot of people like,

1:13:02.760 --> 1:13:04.240
 no, it's fine, you can charge for a book.

1:13:04.240 --> 1:13:05.080
 That's no big deal.

1:13:05.080 --> 1:13:07.080
 We know that's a way you can try to make money

1:13:07.080 --> 1:13:07.920
 around open source.

1:13:07.920 --> 1:13:10.160
 So what I did, I did it in an interesting way.

1:13:10.160 --> 1:13:14.280
 I said, well, kind of my ideas around IP law and stuff.

1:13:14.280 --> 1:13:16.120
 I love the idea you can share something, you can spread it.

1:13:16.120 --> 1:13:18.280
 Like once it's, the fact that you have a thing

1:13:18.280 --> 1:13:21.640
 and copying is free, but the creation is not free.

1:13:21.640 --> 1:13:25.600
 So how do you fund the creation and allow the copying?

1:13:25.600 --> 1:13:27.040
 And in software, it's a little more complicated than that

1:13:27.040 --> 1:13:29.360
 because creation is actually a continuous thing.

1:13:29.360 --> 1:13:31.160
 It's not like you build a widget and it's done.

1:13:31.160 --> 1:13:32.640
 It's sort of a process of emerging

1:13:32.640 --> 1:13:34.560
 and continuing to create.

1:13:34.560 --> 1:13:35.520
 But I wrote the book

1:13:35.520 --> 1:13:37.520
 and had this market determined price thing.

1:13:37.520 --> 1:13:40.720
 I said, look, I need, I think I said 250,000.

1:13:40.720 --> 1:13:44.280
 If I make 250,000 from this book, I'll make it free.

1:13:44.280 --> 1:13:45.760
 So as soon as I get that much money,

1:13:45.760 --> 1:13:48.960
 or I said five years, so there's a time limit.

1:13:48.960 --> 1:13:49.800
 Like it's not forever.

1:13:49.800 --> 1:13:50.640
 That's really cool.

1:13:50.640 --> 1:13:51.680
 It's amazing.

1:13:51.680 --> 1:13:53.080
 I released it on this.

1:13:53.080 --> 1:13:54.240
 And it's actually interesting

1:13:54.240 --> 1:13:55.800
 because one of the people

1:13:55.800 --> 1:13:57.040
 who also thought that was interesting

1:13:57.040 --> 1:13:58.600
 ended up being Chris White,

1:13:58.600 --> 1:14:01.360
 who was the director of DARPA project

1:14:01.360 --> 1:14:02.920
 that we got funding through at Anaconda.

1:14:02.920 --> 1:14:04.640
 And the reason he even called us back

1:14:04.640 --> 1:14:06.720
 is because he remembered my name from this book

1:14:06.720 --> 1:14:08.080
 and he thought that was interesting.

1:14:08.080 --> 1:14:10.880
 And so even though we hadn't gone to the demo days,

1:14:10.880 --> 1:14:12.680
 we applied and the people said, yeah,

1:14:12.680 --> 1:14:15.360
 nobody ever gets this without coming to the demo day first.

1:14:15.360 --> 1:14:16.320
 This is the first time I've seen it.

1:14:16.320 --> 1:14:18.200
 But it's because I knew, you know,

1:14:18.200 --> 1:14:19.640
 Chris had done this and had this interaction.

1:14:19.640 --> 1:14:21.680
 So it did have impact.

1:14:21.680 --> 1:14:23.880
 I was actually really, really pleased by the result.

1:14:23.880 --> 1:14:27.360
 I mean, I ended up in three years, I made 90,000.

1:14:27.360 --> 1:14:29.480
 So sold 30,000 copies by myself.

1:14:29.480 --> 1:14:33.000
 I just put it up on, you know, use PayPal and sold it.

1:14:33.000 --> 1:14:36.040
 And that was my first taste of kind of, okay,

1:14:36.040 --> 1:14:37.600
 this can work to some degree.

1:14:37.600 --> 1:14:40.320
 And I, you know, all over the world, right?

1:14:40.320 --> 1:14:44.480
 From Germany to Japan to, it was actually, it did work.

1:14:44.480 --> 1:14:47.040
 And so I appreciated the fact that PayPal existed

1:14:47.040 --> 1:14:51.200
 and I had a way to get the money, the distribution was simple.

1:14:51.200 --> 1:14:53.480
 This is pre Amazon book stuff.

1:14:53.480 --> 1:14:55.320
 So it was just publishing a website.

1:14:55.320 --> 1:14:57.120
 It was the popularity of SciPy emerging

1:14:57.120 --> 1:14:58.960
 and getting company usage.

1:14:58.960 --> 1:15:00.600
 I ended up not letting it go the five years

1:15:00.600 --> 1:15:01.960
 and not trying to make the full amount

1:15:01.960 --> 1:15:04.560
 because, you know, a year and a half later,

1:15:04.560 --> 1:15:05.400
 I was at Enthought.

1:15:05.400 --> 1:15:06.680
 I had left academia as an Enthought

1:15:06.680 --> 1:15:07.880
 and I kind of had a full time job.

1:15:07.880 --> 1:15:10.000
 And then actually what happened is the documentation people,

1:15:10.000 --> 1:15:10.840
 there's a group that said, hey,

1:15:10.840 --> 1:15:14.280
 we want to do documentation for SciPy as a collective.

1:15:14.280 --> 1:15:18.680
 And they're essentially needing the stuff in the book, right?

1:15:18.680 --> 1:15:20.360
 And so they kind of ask,

1:15:20.360 --> 1:15:21.920
 hey, could we just use the stuff in your book?

1:15:21.920 --> 1:15:24.160
 And at that point I said, yeah, I'll just open it up.

1:15:24.160 --> 1:15:27.320
 So that's, but it has served its purpose.

1:15:27.320 --> 1:15:31.040
 And the money that I made actually funded my grad student.

1:15:31.040 --> 1:15:32.160
 Like it was actually, you know,

1:15:32.160 --> 1:15:35.440
 I paid him 25,000 a year out of that money.

1:15:35.440 --> 1:15:37.440
 So the funny thing is if you do a very similar

1:15:37.440 --> 1:15:40.680
 kind of experiment now with NumPy or something like it,

1:15:40.680 --> 1:15:42.480
 you could probably make a lot more.

1:15:42.480 --> 1:15:43.800
 It's probably true.

1:15:43.800 --> 1:15:46.360
 Because of the tooling and the community building.

1:15:46.360 --> 1:15:47.200
 Yeah, I agree.

1:15:47.200 --> 1:15:48.680
 Like the, and social media,

1:15:48.680 --> 1:15:51.560
 that there's just a virality to that kind of idea.

1:15:51.560 --> 1:15:52.400
 I agree.

1:15:52.400 --> 1:15:53.240
 There'd be things to do.

1:15:53.240 --> 1:15:54.080
 I've thought about that.

1:15:54.080 --> 1:15:56.080
 And really I thought about a couple of books

1:15:56.080 --> 1:15:57.440
 or a couple of things that could be done there.

1:15:57.440 --> 1:15:58.960
 And I just haven't, right?

1:15:58.960 --> 1:16:01.920
 Even, I tried to hire a ghostwriter this year too

1:16:01.920 --> 1:16:04.160
 to see if that could help, but it didn't.

1:16:04.160 --> 1:16:06.240
 But part of my problem is this,

1:16:06.240 --> 1:16:08.080
 I've been so excited by a number of things

1:16:08.080 --> 1:16:09.480
 that have stemmed from that.

1:16:09.480 --> 1:16:13.040
 Like, so I came here, worked at Enthought for four years,

1:16:13.040 --> 1:16:14.960
 graciously, Eric made me president.

1:16:14.960 --> 1:16:16.280
 Then we started to work closely together.

1:16:16.280 --> 1:16:18.400
 We actually helped him buy out his partner.

1:16:19.440 --> 1:16:20.720
 It didn't end great.

1:16:20.720 --> 1:16:22.880
 Like unfortunately Eric and I aren't real,

1:16:22.880 --> 1:16:24.560
 aren't friends now.

1:16:24.560 --> 1:16:25.400
 I still respect him.

1:16:25.400 --> 1:16:26.640
 I have a lot, I wish we were,

1:16:26.640 --> 1:16:30.240
 but he didn't like the fact that Peter and I

1:16:30.240 --> 1:16:31.680
 started Anaconda, right?

1:16:31.680 --> 1:16:36.200
 That was not, I mean, so there's two sides to that story.

1:16:36.200 --> 1:16:37.360
 So I'm not gonna go into it, right?

1:16:37.360 --> 1:16:38.200
 Sure.

1:16:38.200 --> 1:16:40.600
 But you, as human beings

1:16:40.600 --> 1:16:42.320
 and you wish you still could be friends.

1:16:42.320 --> 1:16:43.920
 I do, I do.

1:16:43.920 --> 1:16:45.160
 It saddens me.

1:16:45.160 --> 1:16:49.040
 I mean, that's a story of great minds

1:16:49.040 --> 1:16:51.480
 building great companies.

1:16:51.480 --> 1:16:55.000
 Somehow it's sad that when there's that kind of.

1:16:55.000 --> 1:16:57.360
 And I hold him in esteem.

1:16:57.360 --> 1:16:58.200
 I'm grateful for him.

1:16:58.200 --> 1:17:00.320
 I think Enthought still exists.

1:17:00.320 --> 1:17:02.520
 They're doing great work helping scientists.

1:17:02.520 --> 1:17:05.040
 They still run the SciPy conference.

1:17:05.040 --> 1:17:07.320
 They have an R&D platform they're selling now

1:17:07.320 --> 1:17:10.080
 that's a tool that you can go get today, right?

1:17:10.080 --> 1:17:14.920
 So Enthought has played a role in the SciPy

1:17:14.920 --> 1:17:18.240
 in supporting the community around SciPy, I would say.

1:17:18.240 --> 1:17:20.560
 They ended up not being able to,

1:17:20.560 --> 1:17:22.040
 they ended up building a tool suite

1:17:22.040 --> 1:17:24.040
 to write GUI applications.

1:17:24.040 --> 1:17:25.440
 Like that's where they could actually make

1:17:25.440 --> 1:17:26.680
 that the business could work.

1:17:26.680 --> 1:17:29.480
 And so supporting SciPy and NumPy itself

1:17:29.480 --> 1:17:30.560
 wasn't as possible.

1:17:30.560 --> 1:17:31.960
 Like they didn't, they tried.

1:17:31.960 --> 1:17:33.280
 I mean, it was not just because,

1:17:33.280 --> 1:17:34.480
 it was just because of the business aspect.

1:17:34.480 --> 1:17:36.840
 So, and I wanted to build a company that could do,

1:17:36.840 --> 1:17:39.080
 that could get venture funding, right?

1:17:39.080 --> 1:17:39.920
 Better for worse.

1:17:39.920 --> 1:17:41.040
 I mean, that's a longer story.

1:17:41.040 --> 1:17:42.400
 We could talk a lot about that, but.

1:17:42.400 --> 1:17:44.200
 And that's where Anaconda came to be.

1:17:44.200 --> 1:17:45.040
 That's where Anaconda came to be.

1:17:45.040 --> 1:17:48.040
 So let me ask you, it's a little bit for fun

1:17:48.040 --> 1:17:50.000
 because you built this amazing thing.

1:17:50.000 --> 1:17:54.640
 And so let's talk about like an old warrior

1:17:54.640 --> 1:17:56.280
 looking over old battles.

1:17:57.320 --> 1:18:01.480
 You've, you know, there's a sad letter in 2012

1:18:01.480 --> 1:18:04.360
 that you wrote to the NumPy mailing list

1:18:04.360 --> 1:18:06.320
 announcing that you're leaving NumPy.

1:18:06.320 --> 1:18:08.560
 And some of the things you've listed

1:18:08.560 --> 1:18:10.720
 as some of the things you regret

1:18:10.720 --> 1:18:14.440
 or not regret necessarily, but some things to think about.

1:18:14.440 --> 1:18:17.640
 If you could go back and you could fix stuff about NumPy

1:18:17.640 --> 1:18:20.640
 or both sort of in a personal level,

1:18:20.640 --> 1:18:21.960
 but also like looking forward,

1:18:21.960 --> 1:18:24.560
 what kind of things would you like to see changed?

1:18:24.560 --> 1:18:25.400
 Good question.

1:18:25.400 --> 1:18:26.320
 So I think there's technical questions

1:18:26.320 --> 1:18:28.200
 and social questions right there.

1:18:29.680 --> 1:18:33.400
 First of all, you know, I wrote NumPy as a service

1:18:33.400 --> 1:18:35.000
 and I spent a lot of time doing it.

1:18:35.000 --> 1:18:36.760
 And then other people came help make it happen.

1:18:36.760 --> 1:18:39.840
 NumPy succeeded because the work of a lot of people, right?

1:18:39.840 --> 1:18:42.240
 So it's important to understand that.

1:18:42.240 --> 1:18:43.880
 I'm grateful for the opportunity,

1:18:43.880 --> 1:18:45.080
 the role I had, I could play

1:18:45.080 --> 1:18:47.600
 and grateful that things I did had an impact,

1:18:47.600 --> 1:18:49.200
 but they only had the impact they had

1:18:49.200 --> 1:18:52.200
 because the other people that came to the story.

1:18:52.200 --> 1:18:53.440
 And so they were essential,

1:18:53.440 --> 1:18:55.720
 but the way data types were handled,

1:18:55.720 --> 1:18:59.280
 the way data types, we had array scalers, for example,

1:18:59.280 --> 1:19:04.080
 that are really just a substitute for a type concept, right?

1:19:04.080 --> 1:19:06.960
 So we had array scalers or actual Python objects

1:19:06.960 --> 1:19:09.520
 so that there's for every, for a 32 bit float

1:19:09.520 --> 1:19:13.160
 or a 16 bit float or a 16 bit integer,

1:19:13.160 --> 1:19:14.720
 Python doesn't have a natural,

1:19:14.720 --> 1:19:17.040
 it's just one integer, there's one float.

1:19:17.040 --> 1:19:19.960
 Well, what about these lower precision types,

1:19:19.960 --> 1:19:21.600
 these larger precision types?

1:19:21.600 --> 1:19:23.680
 So we had them in NumPy

1:19:23.680 --> 1:19:25.320
 so that you could have a collection of them,

1:19:25.320 --> 1:19:28.760
 but then have an object in Python that was one of them.

1:19:28.760 --> 1:19:31.440
 And there's questions about like in retrospect,

1:19:31.440 --> 1:19:32.920
 I wouldn't have created those

1:19:32.920 --> 1:19:34.880
 if it improved the type system.

1:19:34.880 --> 1:19:38.000
 And like made the type system actually a Python type system

1:19:38.000 --> 1:19:39.480
 as opposed to currently,

1:19:39.480 --> 1:19:41.400
 it's a Python one level type system.

1:19:41.400 --> 1:19:42.240
 I don't know if you know the difference

1:19:42.240 --> 1:19:43.200
 between Python one, Python two,

1:19:43.200 --> 1:19:44.880
 it's kind of technical, kind of depth,

1:19:44.880 --> 1:19:47.320
 but Python two, one of its big things that Guido did,

1:19:47.320 --> 1:19:48.160
 it was really brilliant.

1:19:48.160 --> 1:19:51.640
 It was the actually Python one,

1:19:51.640 --> 1:19:55.040
 all classes, new objects were one.

1:19:55.040 --> 1:19:56.880
 If you as a user wrote a class,

1:19:56.880 --> 1:19:59.600
 it was an instance of a single Python type

1:19:59.600 --> 1:20:02.000
 called the class type, right?

1:20:02.000 --> 1:20:06.240
 In Python two, he used a meta typing hook

1:20:06.240 --> 1:20:07.960
 to actually go, oh, we can extend this

1:20:07.960 --> 1:20:10.960
 and have users write classes that are new types.

1:20:10.960 --> 1:20:13.320
 So he was able to have your user classes be actual types

1:20:13.320 --> 1:20:16.480
 and the Python type system got a lot more rich.

1:20:16.480 --> 1:20:19.160
 I barely understood that at the time that NumPy was written.

1:20:19.160 --> 1:20:22.480
 And so I essentially in NumPy created a type system

1:20:22.480 --> 1:20:24.400
 that was Python one era.

1:20:24.400 --> 1:20:29.240
 It was every D type is an instance of the same type

1:20:29.240 --> 1:20:33.160
 as opposed to having new D types be really just Python types

1:20:33.160 --> 1:20:34.280
 with additional metadata.

1:20:34.280 --> 1:20:35.440
 What's the cost of that?

1:20:35.440 --> 1:20:37.200
 Is it efficiency, is it usability?

1:20:37.200 --> 1:20:38.840
 It's usability primarily.

1:20:38.840 --> 1:20:40.320
 The cost isn't really efficiency.

1:20:40.320 --> 1:20:45.080
 It's the fact that it's clumsy to create new types.

1:20:45.080 --> 1:20:45.920
 It's hard.

1:20:45.920 --> 1:20:47.560
 And then one of the challenges,

1:20:47.560 --> 1:20:48.400
 you wanna create new types.

1:20:48.400 --> 1:20:52.600
 You wanna quaternion type or you wanna add a new posit type

1:20:52.600 --> 1:20:55.080
 or you wanna, so it's hard.

1:20:55.080 --> 1:20:59.200
 And now, if we had done that well,

1:20:59.200 --> 1:21:00.440
 when Numba came on the scene

1:21:00.440 --> 1:21:02.880
 where we could actually compile Python code,

1:21:02.880 --> 1:21:05.160
 it would integrate with that type system much cleaner.

1:21:05.160 --> 1:21:08.080
 And now all of a sudden you could do gradual typing

1:21:08.080 --> 1:21:08.920
 more easily.

1:21:08.920 --> 1:21:10.560
 You could actually have Python when you add Numba

1:21:10.560 --> 1:21:13.560
 plus better typing, could actually be a,

1:21:14.720 --> 1:21:16.800
 you'd smooth out a lot of rough edges.

1:21:16.800 --> 1:21:18.840
 But there's already, there's like,

1:21:18.840 --> 1:21:20.960
 but are you talking about from the perspective

1:21:20.960 --> 1:21:23.840
 of developers within NumPy or users of NumPy?

1:21:23.840 --> 1:21:27.080
 Developers of new, not really users of NumPy so much.

1:21:27.080 --> 1:21:28.800
 It's the development of NumPy.

1:21:28.800 --> 1:21:32.160
 So you're thinking about like how to design NumPy

1:21:32.160 --> 1:21:33.880
 so that it's contributors.

1:21:33.880 --> 1:21:35.880
 Yeah, the contributors, it's easier.

1:21:35.880 --> 1:21:36.720
 It's easier.

1:21:36.720 --> 1:21:39.320
 It's less work to make it better and to keep it maintained.

1:21:39.320 --> 1:21:41.480
 And where that's impacted things, for example,

1:21:41.480 --> 1:21:43.400
 is the GPU.

1:21:43.400 --> 1:21:45.520
 Like all of a sudden GPUs start getting added

1:21:45.520 --> 1:21:48.360
 and we don't have them in NumPy.

1:21:48.360 --> 1:21:50.560
 Like NumPy should just work on GPUs.

1:21:50.560 --> 1:21:52.680
 The fact that we'd have to download a whole other object

1:21:52.680 --> 1:21:54.800
 called Kupy to have arrays on GPUs

1:21:54.800 --> 1:21:57.440
 is just an artifact of history.

1:21:57.440 --> 1:21:59.160
 Like there's no fundamental reason for it.

1:21:59.160 --> 1:22:00.200
 Well, that's really interesting.

1:22:00.200 --> 1:22:02.520
 If we could sort of go on that tangent briefly

1:22:02.520 --> 1:22:07.520
 is you have PyTorch and other libraries like TensorFlow

1:22:07.800 --> 1:22:11.840
 that basically tried to mimic NumPy.

1:22:11.840 --> 1:22:15.720
 Like you've created a sort of platonic form

1:22:15.720 --> 1:22:16.920
 of multi dimension. Basically, yeah.

1:22:16.920 --> 1:22:17.760
 Yeah, exactly.

1:22:17.760 --> 1:22:19.800
 Well, and the problem was I didn't realize that.

1:22:19.800 --> 1:22:21.760
 Platonic form has a lot of edges.

1:22:21.760 --> 1:22:23.360
 They're like, well, we should cut those out

1:22:23.360 --> 1:22:24.200
 before we present it.

1:22:24.200 --> 1:22:26.920
 So I wonder if you can comment,

1:22:26.920 --> 1:22:29.360
 is there like a difference between their implementations?

1:22:29.360 --> 1:22:31.440
 Do you wish that they were all using NumPy

1:22:31.440 --> 1:22:34.040
 or like in this abstraction of GPU?

1:22:34.040 --> 1:22:38.240
 And sorry to interrupt that there's GPUs, ASICs.

1:22:38.240 --> 1:22:40.040
 There might be other neuromorphic computing.

1:22:40.040 --> 1:22:41.600
 There might be other kind of,

1:22:41.600 --> 1:22:43.920
 or the aliens will come with a new kind of computer.

1:22:43.920 --> 1:22:47.880
 Like an abstraction that NumPy should just operate nicely

1:22:47.880 --> 1:22:50.280
 over the things that are more and more

1:22:50.280 --> 1:22:54.200
 and smarter and smarter with this multi dimensional arrays.

1:22:54.200 --> 1:22:55.520
 Yeah, yeah.

1:22:55.520 --> 1:22:56.920
 There's several comments there.

1:22:56.920 --> 1:23:00.360
 We are working on something now called data dash APIs.org.

1:23:00.360 --> 1:23:02.560
 Data dash API.org, you can go there today.

1:23:02.560 --> 1:23:04.480
 And it's our answer.

1:23:04.480 --> 1:23:05.320
 It's my answer.

1:23:05.320 --> 1:23:06.160
 It's not just me.

1:23:06.160 --> 1:23:09.120
 It's me and Rolf and Athen and Aaron

1:23:09.120 --> 1:23:12.160
 and a lot of companies are helping us at Quansight Labs.

1:23:13.120 --> 1:23:14.560
 It's not unifying all the arrays.

1:23:14.560 --> 1:23:17.200
 It's creating an API that is unified.

1:23:17.200 --> 1:23:19.360
 So we do care about this

1:23:19.360 --> 1:23:21.280
 and we're trying to work through it.

1:23:21.280 --> 1:23:22.560
 I actually had the chance to go and meet

1:23:22.560 --> 1:23:25.360
 with the TensorFlow team and the PyTorch team

1:23:25.360 --> 1:23:29.120
 and talk to them after exiting Anaconda.

1:23:29.120 --> 1:23:29.960
 Just talking about,

1:23:29.960 --> 1:23:33.960
 because the first year after leaving Anaconda in 2018,

1:23:33.960 --> 1:23:36.000
 I became deeply aware of this and realized that,

1:23:36.000 --> 1:23:38.960
 oh, this split in the array community that exists today

1:23:38.960 --> 1:23:43.040
 makes what I was concerned about in 2005 pretty parochial.

1:23:44.160 --> 1:23:45.880
 It's a lot worse, right?

1:23:45.880 --> 1:23:47.280
 Now there's a lot more people.

1:23:47.280 --> 1:23:51.400
 So perhaps the industry can sustain more stacks, right?

1:23:51.400 --> 1:23:52.560
 There's a lot of money,

1:23:52.560 --> 1:23:54.120
 but it makes it a lot less efficient.

1:23:54.120 --> 1:23:56.720
 I mean, but I've also learned to appreciate,

1:23:56.720 --> 1:23:58.440
 it's okay to have some competition.

1:23:58.440 --> 1:24:00.760
 It's okay to have different implementations,

1:24:00.760 --> 1:24:03.560
 but it's better if you can at least refactor some parts.

1:24:03.560 --> 1:24:04.960
 I mean, you're gonna be more efficient

1:24:04.960 --> 1:24:07.000
 if you can refactor parts.

1:24:07.000 --> 1:24:09.560
 It's nice to have competition over things,

1:24:09.560 --> 1:24:11.760
 over what is nice to have competition.

1:24:11.760 --> 1:24:12.600
 They're innovative.

1:24:12.600 --> 1:24:13.440
 Yeah, innovative.

1:24:13.440 --> 1:24:15.920
 And then maybe on the infrastructure,

1:24:15.920 --> 1:24:18.120
 whatever, however you define infrastructure,

1:24:18.120 --> 1:24:21.400
 that maybe it's nice to have come together.

1:24:21.400 --> 1:24:22.440
 Exactly, I agree.

1:24:22.440 --> 1:24:24.600
 And I think, but it was interesting to hear the stories.

1:24:24.600 --> 1:24:29.040
 I mean, TensorFlow came out of a C++ library,

1:24:29.040 --> 1:24:30.160
 Jeff Dean wrote, I think,

1:24:30.160 --> 1:24:33.560
 that was basically how they were doing inference, right?

1:24:33.560 --> 1:24:34.400
 And then they realized, oh,

1:24:34.400 --> 1:24:36.440
 we could do this TensorFlow thing.

1:24:36.440 --> 1:24:38.400
 That C++ library, then what was interesting to me

1:24:38.400 --> 1:24:42.600
 was the fact that both Google and Facebook did not,

1:24:42.600 --> 1:24:44.960
 it's not like they supported Python or NumPy initially.

1:24:44.960 --> 1:24:47.200
 They just realized they had to.

1:24:47.200 --> 1:24:48.760
 They came to this world and then all the users were like,

1:24:48.760 --> 1:24:50.680
 hey, where's the NumPy interface?

1:24:50.680 --> 1:24:52.560
 Oh, and then they kind of came late to it

1:24:52.560 --> 1:24:54.800
 and then they had these bolt ons.

1:24:54.800 --> 1:24:57.280
 TensorFlow's bolt on, I don't mean to offend,

1:24:57.280 --> 1:24:58.480
 but it was so bad.

1:24:58.480 --> 1:24:59.320
 Yeah, it was bad.

1:24:59.320 --> 1:25:01.760
 It's the first time that I'm usually,

1:25:01.760 --> 1:25:04.160
 I mean, one of the challenges I have

1:25:04.160 --> 1:25:07.000
 is I don't criticize enough in the sense

1:25:07.000 --> 1:25:09.960
 that I don't give people input enough, you know, if.

1:25:09.960 --> 1:25:11.680
 I think it's universally agreed upon

1:25:11.680 --> 1:25:13.640
 that the bolt ons on TensorFlow were.

1:25:13.640 --> 1:25:17.080
 But I went to, it was a talk given at Mallorca in Spain

1:25:17.080 --> 1:25:19.880
 and a great guy came and gave a talk and I said,

1:25:19.880 --> 1:25:21.400
 you should never show that API again

1:25:21.400 --> 1:25:23.040
 at a PyData conference.

1:25:23.040 --> 1:25:24.840
 Like that was, that's terrible.

1:25:24.840 --> 1:25:27.080
 Like you're taking this beautiful system we've created

1:25:27.080 --> 1:25:29.440
 and like you're corrupting all these poor Python people,

1:25:29.440 --> 1:25:30.840
 forcing them to write code like that

1:25:30.840 --> 1:25:32.640
 or thinking they should.

1:25:32.640 --> 1:25:35.640
 Fortunately, you know, they adopted Keras as their,

1:25:35.640 --> 1:25:36.760
 and Keras is better.

1:25:36.760 --> 1:25:40.360
 And so Keras, TensorFlow is fine, is reasonable,

1:25:40.360 --> 1:25:42.680
 but they bolted it on.

1:25:42.680 --> 1:25:43.640
 Facebook did too.

1:25:43.640 --> 1:25:48.160
 Like Facebook had their own C++ library for doing inference

1:25:48.160 --> 1:25:51.160
 and they also had the same reaction, they had to do this.

1:25:51.160 --> 1:25:52.840
 One big difference is Facebook,

1:25:52.840 --> 1:25:55.240
 maybe because of the way it's situated in part of fair,

1:25:55.240 --> 1:25:56.600
 part of the research library,

1:25:56.600 --> 1:25:58.880
 TensorFlow is definitely used and, you know,

1:25:58.880 --> 1:26:00.720
 they have to make, they couldn't just open it up

1:26:00.720 --> 1:26:03.160
 and let the community, you know, change what that is.

1:26:03.160 --> 1:26:04.640
 Cause I guess they were worried

1:26:04.640 --> 1:26:06.880
 about disrupting their operations.

1:26:06.880 --> 1:26:10.720
 Facebook's been much more open to having community input

1:26:10.720 --> 1:26:12.400
 on the structure itself.

1:26:12.400 --> 1:26:14.240
 Whereas Google and TensorFlow,

1:26:14.240 --> 1:26:16.000
 they're really eager to have community users,

1:26:16.000 --> 1:26:17.520
 people use it and build the infrastructure,

1:26:17.520 --> 1:26:18.840
 but it's much more walled.

1:26:18.840 --> 1:26:21.600
 Like it's harder to become a contributor to TensorFlow.

1:26:21.600 --> 1:26:24.760
 And it's also, this is very difficult question to answer

1:26:24.760 --> 1:26:27.080
 and don't mean to be throwing shade at anybody,

1:26:27.080 --> 1:26:30.320
 but you have to wonder, it's the Microsoft question

1:26:30.320 --> 1:26:33.920
 of when you have a tool like PyTorch or TensorFlow,

1:26:33.920 --> 1:26:36.320
 how much are you tending to the hackers

1:26:36.320 --> 1:26:39.240
 and how much are you tending to the big corporate clients?

1:26:39.240 --> 1:26:40.080
 Correct.

1:26:40.080 --> 1:26:42.560
 So like the ones that,

1:26:42.560 --> 1:26:44.160
 do you tend to the millions of people

1:26:44.160 --> 1:26:46.440
 that are giving you almost no money,

1:26:46.440 --> 1:26:48.360
 or do you tend to the few

1:26:48.360 --> 1:26:50.320
 that are giving you a ton of money?

1:26:50.320 --> 1:26:54.000
 I tend to stand with the people.

1:26:54.000 --> 1:26:54.840
 Right.

1:26:54.840 --> 1:26:57.760
 Cause I feel like if you nurture the hackers,

1:26:57.760 --> 1:27:00.200
 you will make the right decisions in the longterm

1:27:00.200 --> 1:27:02.000
 that will make the companies happy.

1:27:02.000 --> 1:27:03.280
 I lean that way too.

1:27:03.280 --> 1:27:04.120
 I totally agree.

1:27:04.120 --> 1:27:05.680
 But then you have to find the right dance.

1:27:05.680 --> 1:27:07.080
 But it's a balance.

1:27:07.080 --> 1:27:08.960
 Cause you can lean to the hackers and run out of money.

1:27:08.960 --> 1:27:10.240
 Yeah, exactly.

1:27:10.240 --> 1:27:11.440
 Exactly.

1:27:11.440 --> 1:27:13.760
 Which has been some of the challenge I've faced

1:27:13.760 --> 1:27:14.680
 in the sense that,

1:27:14.680 --> 1:27:17.040
 like I would look at some of the experiments,

1:27:17.040 --> 1:27:19.040
 like NumPy, the fact that we have this split

1:27:19.040 --> 1:27:21.720
 is a factor of I wasn't able to collect more money

1:27:21.720 --> 1:27:22.800
 towards NumPy development.

1:27:22.800 --> 1:27:23.640
 Yeah.

1:27:23.640 --> 1:27:24.480
 Right?

1:27:24.480 --> 1:27:26.480
 I mean, I didn't succeed in the early days

1:27:26.480 --> 1:27:29.560
 of getting enough financial contribution to NumPy

1:27:29.560 --> 1:27:31.080
 so that they could work on it.

1:27:31.080 --> 1:27:31.920
 Right?

1:27:31.920 --> 1:27:32.760
 I couldn't work on it full time.

1:27:32.760 --> 1:27:35.640
 I had to just catch an hour here, an hour there.

1:27:35.640 --> 1:27:37.880
 And I basically not liked that.

1:27:37.880 --> 1:27:39.920
 Like I've wanted to be able to do something about that

1:27:39.920 --> 1:27:41.440
 for a long time and try to figure out how,

1:27:41.440 --> 1:27:42.960
 well, there's lots of ways.

1:27:42.960 --> 1:27:44.640
 I mean, possibly one could say,

1:27:44.640 --> 1:27:46.240
 we had an offer from Microsoft

1:27:46.240 --> 1:27:48.240
 at early days of Anaconda.

1:27:48.240 --> 1:27:51.160
 2014, they offered to come buy us, right?

1:27:51.160 --> 1:27:52.760
 The problem was the right people at Microsoft

1:27:52.760 --> 1:27:53.600
 didn't offer to buy us.

1:27:53.600 --> 1:27:54.880
 And they were still,

1:27:54.880 --> 1:27:56.440
 they were, it was really a,

1:27:56.440 --> 1:27:58.040
 we were like a second,

1:27:58.040 --> 1:27:59.680
 they had really bought, they just bought R,

1:27:59.680 --> 1:28:01.800
 the R company called,

1:28:01.800 --> 1:28:02.800
 it was not R studio,

1:28:02.800 --> 1:28:05.680
 but it was another R company that was emergent.

1:28:05.680 --> 1:28:07.160
 And it was kind of a,

1:28:07.160 --> 1:28:09.360
 well, we should also get a Python play,

1:28:09.360 --> 1:28:11.520
 but they were really doubling down on R.

1:28:11.520 --> 1:28:12.360
 Right?

1:28:12.360 --> 1:28:13.200
 And so it was like,

1:28:13.200 --> 1:28:14.400
 it was where you would go to die.

1:28:14.400 --> 1:28:15.440
 So it's not, it wasn't,

1:28:15.440 --> 1:28:17.160
 it was before Satya was there.

1:28:17.160 --> 1:28:18.680
 Satya had just started.

1:28:18.680 --> 1:28:19.520
 Just started.

1:28:19.520 --> 1:28:20.360
 Right?

1:28:20.360 --> 1:28:21.800
 And the offer was coming from someone

1:28:21.800 --> 1:28:23.080
 two levels down from him.

1:28:23.080 --> 1:28:23.920
 Got you.

1:28:23.920 --> 1:28:24.760
 Right?

1:28:24.760 --> 1:28:26.640
 And if it had come from Scott Guthrie,

1:28:26.640 --> 1:28:28.320
 so I got a chance to meet Scott Guthrie,

1:28:28.320 --> 1:28:29.760
 great guy, I like him.

1:28:29.760 --> 1:28:31.560
 If an offer had come from him,

1:28:31.560 --> 1:28:33.200
 probably would be at Microsoft right now.

1:28:33.200 --> 1:28:34.520
 That'd be fascinating.

1:28:34.520 --> 1:28:36.160
 That would be really nice actually,

1:28:36.160 --> 1:28:38.720
 especially given what Microsoft has since done

1:28:38.720 --> 1:28:40.200
 for the open source community and all those things.

1:28:40.200 --> 1:28:41.640
 Yes, I think they're doing well.

1:28:41.640 --> 1:28:43.720
 I really like some of the stuff they've been doing.

1:28:43.720 --> 1:28:45.200
 They're still working,

1:28:45.200 --> 1:28:46.040
 and they've, you know,

1:28:46.040 --> 1:28:46.880
 they've hired Guido now,

1:28:46.880 --> 1:28:47.720
 and they've hired a lot of Python developers.

1:28:47.720 --> 1:28:49.400
 Wait, Guido's not at Microsoft?

1:28:49.400 --> 1:28:50.240
 Yeah, he works at Microsoft.

1:28:50.240 --> 1:28:51.080
 I need to.

1:28:52.480 --> 1:28:53.600
 Which, he retired,

1:28:53.600 --> 1:28:54.720
 then he came out of retirement,

1:28:54.720 --> 1:28:55.560
 and he's working now.

1:28:55.560 --> 1:28:56.400
 I was just talking to him,

1:28:56.400 --> 1:28:57.840
 and he didn't mention this person.

1:28:57.840 --> 1:28:58.680
 Well.

1:28:58.680 --> 1:29:01.280
 I should investigate this further.

1:29:01.280 --> 1:29:02.120
 Well.

1:29:02.120 --> 1:29:02.960
 Because I know he loved Dropbox,

1:29:02.960 --> 1:29:04.000
 but I wasn't sure what he was doing,

1:29:04.000 --> 1:29:05.160
 who he was up to.

1:29:05.160 --> 1:29:06.560
 Well, he was kind of saying he'd retire,

1:29:06.560 --> 1:29:09.640
 but, and it's literally been five years

1:29:09.640 --> 1:29:12.280
 since I last sat down and really talked to Guido.

1:29:12.280 --> 1:29:13.640
 Right?

1:29:13.640 --> 1:29:16.000
 Guido's a technology expert, right?

1:29:16.000 --> 1:29:17.480
 He's a, so I came,

1:29:17.480 --> 1:29:18.880
 I was excited because I'd finally figured out

1:29:18.880 --> 1:29:20.720
 the type system for NumPy.

1:29:20.720 --> 1:29:22.240
 I wanted to kind of talk about that with him,

1:29:22.240 --> 1:29:23.960
 and I kind of overwhelmed him.

1:29:23.960 --> 1:29:25.080
 Could you stay in that,

1:29:25.080 --> 1:29:26.640
 just for a brief moment,

1:29:26.640 --> 1:29:28.200
 because you're a fascinating person

1:29:28.200 --> 1:29:29.440
 in the history of programming.

1:29:29.440 --> 1:29:31.240
 He is a fascinating person.

1:29:31.240 --> 1:29:34.200
 What have you learned from Guido

1:29:34.200 --> 1:29:37.560
 about programming, about life?

1:29:37.560 --> 1:29:38.400
 Yeah, yeah.

1:29:38.400 --> 1:29:39.240
 A lot, actually.

1:29:39.240 --> 1:29:40.840
 I've been a fan of Guido's.

1:29:40.840 --> 1:29:42.520
 You know, we have a chance to talk.

1:29:42.520 --> 1:29:43.760
 Some, I wouldn't say, you know,

1:29:43.760 --> 1:29:44.840
 we talk all the time.

1:29:44.840 --> 1:29:45.680
 Not at all.

1:29:45.680 --> 1:29:47.520
 He may, but we talk enough to,

1:29:47.520 --> 1:29:48.840
 I respect his,

1:29:48.840 --> 1:29:49.880
 in fact, when I first started NumPy,

1:29:49.880 --> 1:29:51.520
 one of the first things I did was I had a,

1:29:51.520 --> 1:29:53.320
 I asked Guido for a meeting

1:29:53.320 --> 1:29:55.400
 with him and Paul Dubois in San Mateo.

1:29:55.400 --> 1:29:56.920
 And I went and met him for lunch.

1:29:56.920 --> 1:29:58.000
 And basically, to say,

1:29:58.000 --> 1:29:59.200
 maybe we can actually,

1:29:59.200 --> 1:30:00.720
 part of the strategy for NumPy

1:30:00.720 --> 1:30:02.440
 was to get it into Python 3,

1:30:02.440 --> 1:30:04.120
 and maybe be part of Python.

1:30:04.120 --> 1:30:05.160
 And so we talked about that.

1:30:05.160 --> 1:30:06.000
 That's a cool conversation.

1:30:06.000 --> 1:30:06.920
 And about that approach, right?

1:30:06.920 --> 1:30:09.200
 I would have loved to be a flyer in the water.

1:30:09.200 --> 1:30:10.040
 That was good.

1:30:10.040 --> 1:30:12.080
 And over the years for Guido,

1:30:12.080 --> 1:30:13.560
 I learned,

1:30:13.560 --> 1:30:14.840
 so he was open.

1:30:14.840 --> 1:30:18.200
 Like, he was willing to listen to people's ideas.

1:30:18.200 --> 1:30:19.040
 Right?

1:30:19.040 --> 1:30:19.880
 And over the years,

1:30:19.880 --> 1:30:20.920
 now generally, you know,

1:30:20.920 --> 1:30:22.600
 I'm not saying universally that's been true,

1:30:22.600 --> 1:30:24.360
 but generally that's been true.

1:30:24.360 --> 1:30:25.680
 So he's willing to listen.

1:30:25.680 --> 1:30:27.240
 He's willing to defer.

1:30:27.240 --> 1:30:28.280
 Like on the scientific side,

1:30:28.280 --> 1:30:29.120
 he would just kind of defer.

1:30:29.120 --> 1:30:30.160
 He didn't really always understand

1:30:30.160 --> 1:30:31.000
 what we were doing.

1:30:31.000 --> 1:30:31.840
 Yeah.

1:30:31.840 --> 1:30:32.800
 And he'd defer.

1:30:32.800 --> 1:30:35.640
 One place where he didn't enough

1:30:35.640 --> 1:30:37.680
 was we missed a matrix multiply operator.

1:30:37.680 --> 1:30:39.600
 Like that finally got added to Python,

1:30:39.600 --> 1:30:42.240
 but about 10 years later than it should have.

1:30:42.240 --> 1:30:44.760
 But the reason was because nobody,

1:30:44.760 --> 1:30:46.200
 it takes a lot of effort.

1:30:46.200 --> 1:30:48.160
 And I learned this while I was writing NumPy.

1:30:48.160 --> 1:30:49.320
 I also wrote tools to Python.

1:30:49.320 --> 1:30:50.160
 I began with Python Dev,

1:30:50.160 --> 1:30:52.320
 and I added some pieces to Python.

1:30:52.320 --> 1:30:53.400
 Like the memory view object.

1:30:53.400 --> 1:30:55.680
 I wanted the structure of NumPy into Python.

1:30:55.680 --> 1:30:56.960
 So we didn't get NumPy into Python,

1:30:56.960 --> 1:30:59.480
 but we got the basic structure of it into Python.

1:30:59.480 --> 1:31:01.000
 Like, so you could build on it.

1:31:01.000 --> 1:31:01.880
 Nobody did for a while,

1:31:01.880 --> 1:31:04.720
 but eventually database authors started to.

1:31:04.720 --> 1:31:05.760
 And it's a lot better.

1:31:05.760 --> 1:31:06.600
 They did.

1:31:06.600 --> 1:31:08.960
 And also Antoine Petrou and Stefan Krah

1:31:08.960 --> 1:31:10.760
 actually fixed the memory view object.

1:31:10.760 --> 1:31:13.280
 Cause I wrote the underlying infrastructure in C,

1:31:13.280 --> 1:31:15.520
 but the Python exposure was terrible

1:31:15.520 --> 1:31:16.640
 until they came in and fixed it.

1:31:16.640 --> 1:31:18.080
 Partly because I was writing NumPy,

1:31:18.080 --> 1:31:19.960
 and NumPy was the Python exposure.

1:31:19.960 --> 1:31:21.240
 I didn't really care about

1:31:21.240 --> 1:31:22.800
 if you didn't have NumPy installed.

1:31:22.800 --> 1:31:25.360
 Anyway, Guido opened up ideas,

1:31:25.360 --> 1:31:27.280
 technologically brilliant.

1:31:27.280 --> 1:31:29.440
 Like really, I really got a lot of respect for him

1:31:29.440 --> 1:31:30.360
 when I saw what he did

1:31:30.360 --> 1:31:33.320
 with this type class merger thing.

1:31:33.320 --> 1:31:35.200
 It was actually tricky, right?

1:31:35.200 --> 1:31:38.400
 And then willing to share, willing to share his ideas.

1:31:38.400 --> 1:31:40.200
 So the other thing early on in 1998,

1:31:40.200 --> 1:31:42.240
 I said, I wrote my first extension module.

1:31:42.240 --> 1:31:44.800
 The reason I could is because he'd written this blog post

1:31:44.800 --> 1:31:47.360
 on how to do reference counting, right?

1:31:47.360 --> 1:31:50.040
 And without it, I would have been lost, right?

1:31:50.040 --> 1:31:53.240
 But he was willing to at least try to write this post.

1:31:53.240 --> 1:31:56.080
 And so he's been motivated early on with Python.

1:31:56.080 --> 1:31:58.200
 There's a computer science for everybody.

1:31:58.200 --> 1:31:59.880
 You kind of have this early on desire to,

1:31:59.880 --> 1:32:02.040
 oh, maybe we should be pushing programming to more people.

1:32:02.040 --> 1:32:04.560
 So he had this populist notion, I guess,

1:32:04.560 --> 1:32:08.720
 or populist sense to learn that there's a certain skill,

1:32:08.720 --> 1:32:10.560
 and I've seen it in other people too,

1:32:10.560 --> 1:32:13.960
 of engaging with contributors sufficiently to,

1:32:13.960 --> 1:32:15.640
 because when somebody engaged with you

1:32:15.640 --> 1:32:16.480
 and wants to contribute to you,

1:32:16.480 --> 1:32:18.400
 if you ignore them, they go away.

1:32:18.400 --> 1:32:19.760
 So building that early contributor base

1:32:19.760 --> 1:32:23.320
 requires real engagement with other people.

1:32:23.320 --> 1:32:24.520
 And he would do that.

1:32:24.520 --> 1:32:29.080
 Can you also comment on this tragic stepping down

1:32:29.080 --> 1:32:32.880
 from his position as the benevolent dictator for life

1:32:32.880 --> 1:32:35.640
 over the wars, you know?

1:32:35.640 --> 1:32:36.560
 The Walrus operator?

1:32:36.560 --> 1:32:39.200
 The Walrus operator was the last battle.

1:32:39.200 --> 1:32:40.880
 I don't know if that's the cause of it,

1:32:40.880 --> 1:32:43.640
 but there's this, for people who don't know,

1:32:43.640 --> 1:32:45.640
 you can look up, there's the Walrus operator,

1:32:45.640 --> 1:32:49.560
 which looks like a colon and equal sign.

1:32:49.560 --> 1:32:50.800
 Yeah, colon, equal sign.

1:32:50.800 --> 1:32:54.680
 And it actually does maybe the thing

1:32:54.680 --> 1:32:57.560
 that an equal sign should be doing.

1:32:57.560 --> 1:33:00.240
 Yeah, maybe, right, exactly.

1:33:00.240 --> 1:33:02.080
 But it's just historically,

1:33:02.080 --> 1:33:03.560
 equal sign means something else.

1:33:03.560 --> 1:33:05.240
 It just means assignment.

1:33:05.240 --> 1:33:07.280
 So he stepped down over this.

1:33:07.280 --> 1:33:10.360
 What do you think about the pressure of leadership?

1:33:10.360 --> 1:33:12.280
 It's something that, you mentioned the letter I wrote

1:33:12.280 --> 1:33:13.640
 in NumPy at the time.

1:33:13.640 --> 1:33:15.240
 That was a hard time, actually.

1:33:15.240 --> 1:33:17.080
 I mean, there's been really hard times.

1:33:17.080 --> 1:33:17.920
 It was hard.

1:33:19.520 --> 1:33:20.840
 You get criticized, right?

1:33:20.840 --> 1:33:22.800
 And you get pushed, and you get,

1:33:22.800 --> 1:33:23.800
 not everybody loves what you do.

1:33:23.800 --> 1:33:26.880
 Like anytime you do anything that has impact at all,

1:33:26.880 --> 1:33:28.560
 you're not universally loved, right?

1:33:28.560 --> 1:33:29.760
 You get some real critics.

1:33:29.760 --> 1:33:31.960
 And that's an important energy,

1:33:31.960 --> 1:33:35.080
 because it's impossible for you to do everything right.

1:33:35.080 --> 1:33:37.160
 You need people to be pushing.

1:33:37.160 --> 1:33:39.320
 But sometimes people can get mean, right?

1:33:39.320 --> 1:33:43.080
 People can, I prefer to give people the benefit of the doubt.

1:33:43.080 --> 1:33:45.800
 I don't immediately assume they have bad intentions.

1:33:45.800 --> 1:33:49.000
 And maybe for other, maybe that doesn't happen for everybody.

1:33:49.000 --> 1:33:50.200
 For whatever reason, their past,

1:33:50.200 --> 1:33:53.040
 their experiences with people, they sometimes have bad,

1:33:53.040 --> 1:33:54.880
 so they immediately attribute to you bad intentions.

1:33:54.880 --> 1:33:56.080
 So you're like, where did this come from?

1:33:56.080 --> 1:33:57.760
 I mean, I'm definitely open to criticism,

1:33:57.760 --> 1:34:00.520
 but I think you're misinterpreting the whole point.

1:34:00.520 --> 1:34:03.560
 Because I would get that, certainly when I started Anaconda.

1:34:05.800 --> 1:34:07.120
 Sometimes I say to people,

1:34:08.520 --> 1:34:09.760
 I care enough about entrepreneurship

1:34:09.760 --> 1:34:12.240
 to make some open source people uncomfortable.

1:34:12.240 --> 1:34:13.520
 And I care enough about open source

1:34:13.520 --> 1:34:15.560
 to make investors uncomfortable.

1:34:15.560 --> 1:34:19.880
 So I sort of, you create kind of doubters on both sides.

1:34:19.880 --> 1:34:23.840
 So when you have, and this is just a plea

1:34:23.840 --> 1:34:27.680
 to the listener and the public, I've noticed this too,

1:34:27.680 --> 1:34:31.800
 that there's a tendency, and social media makes this worse,

1:34:32.680 --> 1:34:35.560
 when you don't have perfect information about the situation,

1:34:35.560 --> 1:34:39.280
 you tend to fill the gaps with the worst possible,

1:34:39.280 --> 1:34:43.080
 or at least a bad story that fills those gaps.

1:34:43.080 --> 1:34:46.960
 And I think it's good to live life,

1:34:46.960 --> 1:34:49.760
 maybe not fully naively, but filling in the gaps

1:34:49.760 --> 1:34:54.720
 with the good, with the best, with the positive,

1:34:54.720 --> 1:34:57.280
 with the hopeful explanation of why you see this.

1:34:57.280 --> 1:35:00.280
 So if you see somebody like you trying to make money

1:35:00.280 --> 1:35:01.960
 on a book about an umpire,

1:35:01.960 --> 1:35:04.880
 there's a million stories around that that are positive.

1:35:04.880 --> 1:35:07.840
 And those are good to think about,

1:35:07.840 --> 1:35:10.600
 to project positive intent on the people.

1:35:10.600 --> 1:35:13.960
 Because for many reasons, usually because people are good

1:35:13.960 --> 1:35:15.560
 and they do have good intent.

1:35:15.560 --> 1:35:17.480
 And also when you project that positive intent,

1:35:17.480 --> 1:35:19.400
 people will step up to that too.

1:35:19.400 --> 1:35:20.240
 Yes.

1:35:20.240 --> 1:35:21.760
 It's a great point.

1:35:21.760 --> 1:35:24.320
 It has this kind of viral nature to it.

1:35:24.320 --> 1:35:27.720
 And of course with Twitter, early on figured out,

1:35:27.720 --> 1:35:30.360
 and Facebook is that they can make a lot of money

1:35:30.360 --> 1:35:32.280
 and engagement from the negative.

1:35:32.280 --> 1:35:33.120
 Yes.

1:35:33.120 --> 1:35:35.440
 So there's this, we're fighting this mechanism.

1:35:35.440 --> 1:35:36.280
 I agree.

1:35:36.280 --> 1:35:37.120
 Which is challenging.

1:35:37.120 --> 1:35:37.940
 It's easier.

1:35:37.940 --> 1:35:38.780
 It's just easier to be.

1:35:38.780 --> 1:35:39.620
 To be negative.

1:35:39.620 --> 1:35:41.920
 And then for some reason, something in our minds

1:35:41.920 --> 1:35:45.280
 really enjoys sharing that and getting all excited

1:35:45.280 --> 1:35:46.280
 about the negativity.

1:35:46.280 --> 1:35:47.400
 We do, yeah.

1:35:47.400 --> 1:35:50.440
 Some protective mechanism perhaps that we're gonna get eaten

1:35:50.440 --> 1:35:51.280
 if we don't, yeah.

1:35:51.280 --> 1:35:52.100
 Exactly.

1:35:52.100 --> 1:35:53.200
 For us to be effective as a group of people

1:35:53.200 --> 1:35:54.600
 in a software engineering project,

1:35:54.600 --> 1:35:56.860
 you have to project positive intent, I think.

1:35:56.860 --> 1:35:57.820
 I totally agree.

1:35:57.820 --> 1:35:58.660
 Totally agree.

1:35:58.660 --> 1:35:59.480
 And I think that's very,

1:35:59.480 --> 1:36:01.640
 and so that happens in this space.

1:36:01.640 --> 1:36:03.840
 But Python has done a reasonable job in the past,

1:36:03.840 --> 1:36:05.920
 but here is a situation where I think it started

1:36:05.920 --> 1:36:07.840
 to get this pressure where it didn't.

1:36:07.840 --> 1:36:10.440
 I really didn't, I didn't know enough about what happened.

1:36:10.440 --> 1:36:12.160
 I've talked to several people about it.

1:36:12.160 --> 1:36:15.840
 And I know most of the steering committee members today,

1:36:15.840 --> 1:36:17.880
 one person nominated me for that role,

1:36:17.880 --> 1:36:20.880
 but it's the wrong role for me right now, right?

1:36:20.880 --> 1:36:24.040
 I have a lot of respect for the Python developer space

1:36:24.040 --> 1:36:25.440
 and the Python developers.

1:36:25.440 --> 1:36:27.600
 I also understand the gap between computer science

1:36:27.600 --> 1:36:30.440
 Python developers and array programming developers

1:36:30.440 --> 1:36:31.440
 or science developers.

1:36:31.440 --> 1:36:34.560
 And in fact, Python succeeds in the array space

1:36:34.560 --> 1:36:36.520
 the more it has people in that boundary.

1:36:36.520 --> 1:36:37.960
 And there's often very few.

1:36:37.960 --> 1:36:39.440
 Like I was playing a role in that boundary

1:36:39.440 --> 1:36:42.600
 and working like everything to try to keep up

1:36:42.600 --> 1:36:47.600
 with even what Guido was saying, like I'm a C programmer,

1:36:47.720 --> 1:36:49.080
 but not a computer scientist.

1:36:49.080 --> 1:36:52.600
 Like I was an engineer and physicist and mathematician,

1:36:52.600 --> 1:36:54.840
 and I didn't always understand

1:36:54.840 --> 1:36:56.360
 what they were talking about

1:36:56.360 --> 1:36:58.360
 and why they would have opinions the way they did.

1:36:58.360 --> 1:37:00.280
 So, you know, you have to listen and try to understand.

1:37:00.280 --> 1:37:02.120
 Then you also have to explain your point of view

1:37:02.120 --> 1:37:03.560
 in a way they can understand.

1:37:03.560 --> 1:37:04.840
 And that takes a lot of work.

1:37:04.840 --> 1:37:07.920
 And that communication is always the challenge.

1:37:07.920 --> 1:37:09.200
 And it's just what we're describing here

1:37:09.200 --> 1:37:11.520
 about the negativity is just another form of that.

1:37:11.520 --> 1:37:12.560
 Like how do we come together?

1:37:12.560 --> 1:37:14.520
 And it does appear we're wired anyway

1:37:14.520 --> 1:37:16.560
 to at least have a, there's a part of us

1:37:16.560 --> 1:37:18.880
 that will enemy, you know, friend, enemy.

1:37:18.880 --> 1:37:21.360
 And we see, yeah, it's like,

1:37:21.360 --> 1:37:23.520
 why are we wiring on the enemy front?

1:37:23.520 --> 1:37:24.760
 So why are we pushing that?

1:37:24.760 --> 1:37:26.680
 Why are we promoting that so deeply?

1:37:26.680 --> 1:37:28.440
 Assume friend until proven otherwise.

1:37:28.440 --> 1:37:30.000
 Yes, yes.

1:37:30.000 --> 1:37:32.160
 So, cause you have such a fascinating mind in all of this.

1:37:32.160 --> 1:37:34.160
 Let me just ask you these questions.

1:37:34.160 --> 1:37:38.000
 So one interesting side on the Python history

1:37:38.000 --> 1:37:41.000
 is the move from Python two to Python three.

1:37:41.000 --> 1:37:43.720
 You mentioned move from Python one to Python two,

1:37:43.720 --> 1:37:46.800
 but the move from Python two to Python three

1:37:46.800 --> 1:37:47.920
 is a little bit interesting

1:37:47.920 --> 1:37:50.040
 because it took a very long time.

1:37:50.040 --> 1:37:53.520
 It broke, you know, quite a small way

1:37:53.520 --> 1:37:56.280
 backward compatibility, but even that small way

1:37:56.280 --> 1:37:58.680
 seemed to have been very painful for people.

1:37:58.680 --> 1:38:00.640
 Is there lessons you draw?

1:38:00.640 --> 1:38:01.480
 Oh man, tons of lessons.

1:38:01.480 --> 1:38:05.520
 From how long it took and how painful it seemed to be?

1:38:05.520 --> 1:38:07.000
 Yeah, tons of lessons.

1:38:07.000 --> 1:38:08.240
 Well, I mentioned here earlier

1:38:08.240 --> 1:38:11.840
 that NumPy was written in 2005.

1:38:11.840 --> 1:38:15.520
 It was in 2005 that I actually went to Guido

1:38:15.520 --> 1:38:17.240
 to talk about getting NumPy into Python three.

1:38:17.240 --> 1:38:18.880
 Like my strategy was to,

1:38:18.880 --> 1:38:19.960
 oh, we were moving to Python three.

1:38:19.960 --> 1:38:22.200
 Let's have that be, and it seems funny in retrospect

1:38:22.200 --> 1:38:23.360
 because like, wait, Python three,

1:38:23.360 --> 1:38:25.480
 that was in 2020, right?

1:38:25.480 --> 1:38:27.760
 When we finally ended the support for Python two

1:38:27.760 --> 1:38:29.000
 or at least 2017.

1:38:29.000 --> 1:38:30.880
 The reason it took a long time,

1:38:30.880 --> 1:38:33.320
 a lot of time, I think it was because one of the things is

1:38:33.320 --> 1:38:36.240
 there wasn't much to like about Python three.

1:38:36.240 --> 1:38:40.280
 3.0, 3.1, it really wasn't until 3.3.

1:38:40.280 --> 1:38:43.600
 Like I consider Python 3.3 to be Python 3.0.

1:38:43.600 --> 1:38:44.880
 But it wasn't until Python 3.3

1:38:44.880 --> 1:38:47.200
 that I felt there's enough stuff in it

1:38:47.200 --> 1:38:49.800
 to make it worth anybody using it, right?

1:38:49.800 --> 1:38:52.600
 And then 3.4 started to be, oh yeah, I want that.

1:38:52.600 --> 1:38:54.880
 And then 3.5 as the matrix multiply operator,

1:38:54.880 --> 1:38:56.520
 and now it's like, okay, we gotta use that.

1:38:56.520 --> 1:38:58.400
 Plus the libraries that started leveraging

1:38:58.400 --> 1:38:59.600
 some of the features of Python three.

1:38:59.600 --> 1:39:00.760
 Exactly.

1:39:00.760 --> 1:39:03.800
 So it really, the challenge was it was,

1:39:03.800 --> 1:39:07.400
 but it also illustrated a truism that, you know,

1:39:07.400 --> 1:39:08.240
 when you have inertia,

1:39:08.240 --> 1:39:10.480
 when you have a group of people using something,

1:39:10.480 --> 1:39:11.960
 it's really hard to move them away from it.

1:39:11.960 --> 1:39:13.920
 You can't just change the world on them.

1:39:13.920 --> 1:39:15.440
 And Python three, you know, made some,

1:39:15.440 --> 1:39:17.240
 I think it fixed some things Guido had always hated.

1:39:17.240 --> 1:39:18.440
 I don't think he didn't like the fact

1:39:18.440 --> 1:39:19.440
 that print was a statement.

1:39:19.440 --> 1:39:20.760
 He wanted to make it a function.

1:39:20.760 --> 1:39:23.200
 But in some sense, that's a bit of gratuitous change

1:39:23.200 --> 1:39:24.120
 to the language.

1:39:24.120 --> 1:39:27.320
 And you could argue, and people have,

1:39:27.320 --> 1:39:31.520
 but one of the challenges was there wasn't enough features

1:39:31.520 --> 1:39:34.960
 and too many just changes without features.

1:39:34.960 --> 1:39:37.440
 And so the empathy for the end user

1:39:37.440 --> 1:39:40.480
 as to why they would switch wasn't there.

1:39:40.480 --> 1:39:42.960
 I think also it illustrated just the funding realities.

1:39:42.960 --> 1:39:45.040
 Like Python wasn't funded.

1:39:45.040 --> 1:39:46.160
 Like it was also a project

1:39:46.160 --> 1:39:48.280
 with a bunch of volunteer labor, right?

1:39:48.280 --> 1:39:50.240
 It had more people, so more volunteer labor,

1:39:50.240 --> 1:39:52.240
 but it was still, it was fun in the sense

1:39:52.240 --> 1:39:53.480
 that at least Guido had a job.

1:39:53.480 --> 1:39:55.880
 And I've learned some of the behind the scenes on that now

1:39:55.880 --> 1:39:57.840
 since talking to people who have lived through it

1:39:57.840 --> 1:40:00.560
 and maybe not on air, we can talk about some of that.

1:40:00.560 --> 1:40:03.640
 But it's interesting to see, but Guido had a job,

1:40:03.640 --> 1:40:07.080
 but his full time job wasn't just work on Python.

1:40:07.080 --> 1:40:08.880
 Like he had other things to do.

1:40:08.880 --> 1:40:09.880
 Just wild.

1:40:09.880 --> 1:40:10.720
 It is wild, isn't it?

1:40:10.720 --> 1:40:13.320
 It's wild how few people are funded.

1:40:13.320 --> 1:40:14.160
 Yes.

1:40:14.160 --> 1:40:15.200
 And how much impact they have.

1:40:15.200 --> 1:40:16.160
 Yes.

1:40:16.160 --> 1:40:17.920
 Maybe that's a feature not a bug, I don't know.

1:40:17.920 --> 1:40:19.080
 Maybe, yes, exactly.

1:40:19.080 --> 1:40:21.840
 At least early on, like it's sort of, I know, yeah.

1:40:21.840 --> 1:40:25.160
 It's like Olympic athletes are often severely underfunded,

1:40:25.160 --> 1:40:27.360
 but maybe that's what brings out the greatness.

1:40:27.360 --> 1:40:28.520
 Perhaps, yes, correct.

1:40:28.520 --> 1:40:29.680
 No, exactly.

1:40:29.680 --> 1:40:31.880
 Maybe this is the essential part of it.

1:40:31.880 --> 1:40:33.680
 Because I do think about that in terms of,

1:40:33.680 --> 1:40:36.200
 I currently have an incubator for open source startups.

1:40:36.200 --> 1:40:37.640
 Like what I'm trying to do right now

1:40:37.640 --> 1:40:40.480
 is create the environment I wished had existed

1:40:40.480 --> 1:40:42.880
 when I was leaving academia with NumPy

1:40:42.880 --> 1:40:44.120
 and trying to figure out what to do.

1:40:44.120 --> 1:40:46.120
 I'm trying to create those opportunities and environments.

1:40:46.120 --> 1:40:49.320
 So, and that's what drives me still,

1:40:49.320 --> 1:40:50.760
 is how do I make the world easier

1:40:50.760 --> 1:40:52.600
 for the open source entrepreneur?

1:40:52.600 --> 1:40:55.960
 So let me stay, I mean, I could probably stay on NumPy

1:40:55.960 --> 1:41:00.960
 for a long time, but this is fun question.

1:41:00.960 --> 1:41:04.680
 So Andre Kapathy leads the Tesla Autopilot team,

1:41:04.680 --> 1:41:09.680
 and he's also one of the most like legit programmers I know.

1:41:10.720 --> 1:41:13.760
 It's like he builds stuff from scratch a lot,

1:41:13.760 --> 1:41:16.200
 and that's how he builds intuition about how a problem works.

1:41:16.200 --> 1:41:18.320
 He just builds it from scratch, and I always love that.

1:41:18.320 --> 1:41:21.320
 And the primary language he uses is Python

1:41:21.320 --> 1:41:23.080
 for the intuition building.

1:41:23.080 --> 1:41:27.600
 But he posted something on Twitter saying

1:41:27.600 --> 1:41:31.280
 that they got a significant improvement

1:41:31.280 --> 1:41:35.640
 on some aspect of their like data loading, I think,

1:41:35.640 --> 1:41:39.840
 by switching away from np.square root,

1:41:39.840 --> 1:41:42.160
 so the NumPy's implementation of square root,

1:41:42.160 --> 1:41:44.520
 to math.square root, and then somebody else commented

1:41:44.520 --> 1:41:48.120
 that you can get even a much greater improvement

1:41:48.120 --> 1:41:52.600
 by using the vanilla Python square root, which is like.

1:41:52.600 --> 1:41:53.640
 Power 0.5.

1:41:53.640 --> 1:41:55.200
 Power 0.5.

1:41:55.200 --> 1:41:57.520
 And it's fascinating to me, I just wanted to.

1:41:58.640 --> 1:42:02.080
 So that was some shade throwing at some.

1:42:02.080 --> 1:42:04.640
 No, no, and yes, we're talking about.

1:42:04.640 --> 1:42:08.080
 It's a good way to ask the trade off

1:42:08.080 --> 1:42:12.080
 between usability and efficiency broadly in NumPy,

1:42:12.080 --> 1:42:14.920
 but also on these specific weird quirks

1:42:14.920 --> 1:42:16.680
 of like a single function.

1:42:16.680 --> 1:42:21.360
 Yep, so on that point, if you use a NumPy math function

1:42:21.360 --> 1:42:25.000
 on a scaler, it's gonna be slower

1:42:25.000 --> 1:42:27.960
 than using a Python function on that scaler.

1:42:27.960 --> 1:42:32.960
 But because the math object in NumPy is more complicated,

1:42:33.800 --> 1:42:36.760
 because you can also call that math object on an array.

1:42:36.760 --> 1:42:39.200
 And so effectively, it goes through a similar machine.

1:42:39.200 --> 1:42:41.840
 There aren't enough of the, which you would do

1:42:41.840 --> 1:42:45.960
 and you could do like checks and fast paths.

1:42:45.960 --> 1:42:48.800
 So yeah, if you're basically doing a list,

1:42:48.800 --> 1:42:50.680
 if you run over a list, in fact,

1:42:50.680 --> 1:42:53.700
 for problems that are less than 1,000,

1:42:53.700 --> 1:42:55.320
 even maybe 10,000 is probably the,

1:42:55.320 --> 1:42:56.900
 if you're going more than 10,000,

1:42:56.900 --> 1:42:59.080
 that's where you definitely need to be using arrays.

1:42:59.080 --> 1:43:01.200
 But if you're less than that, and for reading,

1:43:01.200 --> 1:43:02.760
 if you're doing a reading process

1:43:02.760 --> 1:43:05.600
 and essentially it's not compute bound, it's IO bound.

1:43:05.600 --> 1:43:08.480
 And so you're really taking lists of 1,000 at a time

1:43:08.480 --> 1:43:09.540
 and doing work on it.

1:43:09.540 --> 1:43:11.680
 Yeah, you could be faster just using Python,

1:43:11.680 --> 1:43:12.740
 straight up Python.

1:43:12.740 --> 1:43:16.640
 See, but also, and this is the side to the top,

1:43:16.640 --> 1:43:18.680
 there's the fundamental questions

1:43:18.680 --> 1:43:21.240
 when you look at the long arc of history,

1:43:21.240 --> 1:43:25.560
 it's very possible that np.square root is much faster.

1:43:25.560 --> 1:43:26.400
 It could be.

1:43:26.400 --> 1:43:29.480
 So like in terms of like, don't worry about it,

1:43:29.480 --> 1:43:32.420
 it's the evils of over optimization or whatever,

1:43:32.420 --> 1:43:34.040
 all the different quotes around that,

1:43:34.040 --> 1:43:39.040
 is sometimes obsessing about this particular little quark

1:43:39.520 --> 1:43:41.720
 is not sufficient.

1:43:41.720 --> 1:43:45.220
 For somebody like, if you're trying to optimize your path,

1:43:45.220 --> 1:43:47.680
 I mean, I agree, premature optimization

1:43:47.680 --> 1:43:49.320
 creates all kinds of challenges, right?

1:43:49.320 --> 1:43:51.840
 Because now, but you may have to do it.

1:43:51.840 --> 1:43:53.880
 I believe the quote is, it's the root of all evil.

1:43:53.880 --> 1:43:55.560
 It's the root of all evil, right?

1:43:55.560 --> 1:43:57.040
 Let's give Donald Knuth, I think,

1:43:57.040 --> 1:43:59.160
 or is he more than somebody else?

1:43:59.160 --> 1:44:00.800
 Well, Doc Knuth is kind of like Mark Twain,

1:44:00.800 --> 1:44:02.880
 people just attribute stuff to him, I don't know.

1:44:02.880 --> 1:44:04.640
 And it's fine because he's brilliant.

1:44:04.640 --> 1:44:07.640
 So, no, I was a LaTeX user myself,

1:44:07.640 --> 1:44:09.280
 and so I have a lot of respect,

1:44:09.280 --> 1:44:10.820
 and he did more than that, of course,

1:44:10.820 --> 1:44:14.120
 but yeah, someone I really appreciate

1:44:14.120 --> 1:44:15.640
 in the computer science space.

1:44:15.640 --> 1:44:17.080
 Yeah, I don't, I think that's appropriate.

1:44:17.080 --> 1:44:18.320
 There's a lot of little things like that,

1:44:18.320 --> 1:44:20.120
 where people actually, if you understood it,

1:44:20.120 --> 1:44:22.640
 you go, yeah, of course, that's the case.

1:44:22.640 --> 1:44:25.040
 And the other part, the other part I didn't mention,

1:44:25.040 --> 1:44:27.960
 and Numba was a thing we wrote early on,

1:44:27.960 --> 1:44:29.040
 and I was really excited by Numba

1:44:29.040 --> 1:44:30.040
 because it's something we wanted,

1:44:30.040 --> 1:44:32.160
 it was a compiler for Python syntax,

1:44:32.160 --> 1:44:35.440
 and I wanted it from the beginning of writing NumPy

1:44:35.440 --> 1:44:38.280
 because of this function question,

1:44:38.280 --> 1:44:41.900
 like taking, the power of arrays

1:44:41.900 --> 1:44:45.120
 is really that you can write functions using all of it.

1:44:45.120 --> 1:44:47.000
 It has implicit looping, right?

1:44:47.000 --> 1:44:47.840
 So you don't worry about,

1:44:47.840 --> 1:44:49.200
 I write this n dimensional for loop

1:44:49.200 --> 1:44:51.240
 with four loops, four, four statements.

1:44:51.240 --> 1:44:53.600
 You just say, oh, big four dimensional array,

1:44:53.600 --> 1:44:55.760
 I'm gonna do this operation, this plus, this minus,

1:44:55.760 --> 1:44:57.680
 this reduction, and you get this,

1:44:57.680 --> 1:44:59.560
 it's called vectorization in other areas,

1:44:59.560 --> 1:45:01.440
 but you can basically think at a high level

1:45:01.440 --> 1:45:03.640
 and get massive amounts of computation done

1:45:03.640 --> 1:45:06.200
 with the added benefit of,

1:45:06.200 --> 1:45:08.040
 oh, it can be paralyzed easily.

1:45:08.040 --> 1:45:09.040
 It can be put in parallel.

1:45:09.040 --> 1:45:10.000
 You don't have to think about that.

1:45:10.000 --> 1:45:12.720
 In fact, it's worse to go decompose your,

1:45:12.720 --> 1:45:14.160
 you write the for loops

1:45:14.160 --> 1:45:16.280
 and then try to infer parallelism from for loops.

1:45:16.280 --> 1:45:17.600
 That's actually a harder problem

1:45:17.600 --> 1:45:19.640
 than to take the array problem

1:45:19.640 --> 1:45:22.040
 and just automatically parallelize that problem.

1:45:22.040 --> 1:45:25.320
 That's what, and so functions in NumPy

1:45:25.320 --> 1:45:27.080
 are called universal functions, ufuncs.

1:45:27.080 --> 1:45:29.000
 So square root is an example of a ufunk.

1:45:29.000 --> 1:45:32.400
 There are others, sine, cosine, add, subtract.

1:45:32.400 --> 1:45:34.520
 In fact, one of the first libraries to SciPy

1:45:34.520 --> 1:45:35.520
 was something called Special

1:45:35.520 --> 1:45:36.920
 where I added Bessel functions

1:45:36.920 --> 1:45:40.240
 and all these special functions that come up in physics

1:45:40.240 --> 1:45:43.040
 and I added them as ufuncs so they could work on arrays.

1:45:43.040 --> 1:45:44.720
 So I understood ufuncs very, very well

1:45:44.720 --> 1:45:45.960
 from day one inside of numeric.

1:45:45.960 --> 1:45:47.320
 That was one of the things we tried to make better

1:45:47.320 --> 1:45:49.120
 in NumPy was how do they work?

1:45:49.120 --> 1:45:50.360
 Can they do broadcasting?

1:45:50.360 --> 1:45:51.960
 What does broadcasting mean?

1:45:51.960 --> 1:45:54.600
 But one of the problems is, okay,

1:45:54.600 --> 1:45:57.320
 what do I do with a Python scaler?

1:45:57.320 --> 1:45:59.800
 So what happens, the Python scaler gets broadcast

1:45:59.800 --> 1:46:01.320
 to a zero dimensional array

1:46:01.320 --> 1:46:02.800
 and then it goes through the whole same machinery

1:46:02.800 --> 1:46:05.080
 as if it were a 10,000 dimensional array.

1:46:05.080 --> 1:46:07.640
 And then it kind of unpacks the element

1:46:07.640 --> 1:46:08.920
 and then does the addition.

1:46:09.880 --> 1:46:12.600
 That's not to mention the function it calls

1:46:12.600 --> 1:46:13.640
 in the case of square root

1:46:13.640 --> 1:46:15.960
 is just the clib square root, right?

1:46:15.960 --> 1:46:18.160
 In some cases, like Python's power,

1:46:18.160 --> 1:46:20.360
 there's some optimizations they're doing

1:46:20.360 --> 1:46:21.520
 that could be faster

1:46:21.520 --> 1:46:23.760
 than just calling this the clib square root.

1:46:23.760 --> 1:46:25.320
 In the interpreter or in the?

1:46:25.320 --> 1:46:27.640
 No, in the C code, in the Python runtime.

1:46:27.640 --> 1:46:30.960
 In the Python runtime, so they really optimize it

1:46:30.960 --> 1:46:32.120
 and they have the freedom to do that

1:46:32.120 --> 1:46:32.960
 because they don't have to worry about.

1:46:32.960 --> 1:46:34.080
 It's just a scaler.

1:46:34.080 --> 1:46:34.920
 It's just a scaler.

1:46:34.920 --> 1:46:36.200
 Right, they don't have to worry about the fact

1:46:36.200 --> 1:46:39.360
 that, oh, this could be an object with many pieces.

1:46:39.360 --> 1:46:41.080
 The ufunc machine is also generic

1:46:41.080 --> 1:46:44.600
 in sense that typecasting and broadcasting,

1:46:44.600 --> 1:46:46.160
 broadcasting's idea of I'm gonna go,

1:46:46.160 --> 1:46:47.360
 I have a zero dimensional array,

1:46:47.360 --> 1:46:49.240
 I have a scaler with a four dimensional array

1:46:49.240 --> 1:46:50.480
 and I add them.

1:46:50.480 --> 1:46:54.640
 Oh, I have to kind of coerce the shape of this guy

1:46:54.640 --> 1:46:56.880
 to make it work against the whole four dimensional array.

1:46:56.880 --> 1:46:59.680
 So it's the idea of I can do a one dimensional array

1:46:59.680 --> 1:47:02.200
 against a two dimensional array and have it make sense.

1:47:02.200 --> 1:47:04.040
 Well, that's what NumPy does is it challenges you

1:47:04.040 --> 1:47:07.040
 to reformulate, rethink your problem

1:47:07.040 --> 1:47:09.080
 as a multi dimensional array problem

1:47:09.080 --> 1:47:12.640
 versus move away from scalers completely.

1:47:12.640 --> 1:47:14.240
 Right, exactly, exactly.

1:47:14.240 --> 1:47:16.680
 In fact, that's where some of the edge cases boundaries are

1:47:16.680 --> 1:47:18.960
 is that, well, they're still there

1:47:18.960 --> 1:47:21.080
 and this is where array scalers are particular.

1:47:21.080 --> 1:47:23.120
 So array scalers are particularly bad

1:47:23.120 --> 1:47:24.360
 in the sense that they were written

1:47:24.360 --> 1:47:26.840
 so that you could optimize the math on them,

1:47:26.840 --> 1:47:29.040
 but that hasn't happened.

1:47:29.040 --> 1:47:32.800
 And so their default is to coerce the array scaler

1:47:32.800 --> 1:47:33.760
 to a zero dimensional array

1:47:33.760 --> 1:47:36.000
 and then use the NumPy machinery.

1:47:36.000 --> 1:47:38.200
 That's what, and you could specialize,

1:47:38.200 --> 1:47:39.960
 but it doesn't happen all the time.

1:47:39.960 --> 1:47:41.760
 So in fact, when we first wrote Numba,

1:47:41.760 --> 1:47:44.740
 we do comparisons and say, look, it's 1000X speed up.

1:47:45.720 --> 1:47:47.160
 We were lying a little bit in the sense that,

1:47:47.160 --> 1:47:50.240
 well, first do the 40X slowdown

1:47:50.240 --> 1:47:52.280
 of using the array scalers inside of a loop.

1:47:52.280 --> 1:47:53.560
 Cause if you used to use Python scalers,

1:47:53.560 --> 1:47:56.200
 you'd already be 10 times faster.

1:47:56.200 --> 1:47:58.080
 But then we would get a hundred times faster

1:47:58.080 --> 1:48:00.320
 over that using just compilation.

1:48:00.320 --> 1:48:01.600
 But what we do is compile the loop

1:48:01.600 --> 1:48:04.000
 from out of the interpreter to machine code.

1:48:04.000 --> 1:48:06.280
 And then that's always been the power of Python

1:48:06.280 --> 1:48:08.280
 is this extensibility so that you can,

1:48:08.280 --> 1:48:09.680
 cause people say, oh, Python's so slow.

1:48:09.680 --> 1:48:11.520
 Well, sure, if you do all your logic

1:48:11.520 --> 1:48:13.920
 in the runtime of the Python interpreter, yeah.

1:48:13.920 --> 1:48:15.800
 But the power is that you don't have to.

1:48:15.800 --> 1:48:17.260
 You write all the logic,

1:48:17.260 --> 1:48:19.860
 what you do in the high level is just high level logic.

1:48:19.860 --> 1:48:21.920
 And the actual calls you're making

1:48:21.920 --> 1:48:24.400
 could be on gigabyte arrays of data.

1:48:24.400 --> 1:48:26.880
 And that's all done at compiled speeds.

1:48:26.880 --> 1:48:30.320
 And the fact that integration is one can happen,

1:48:30.320 --> 1:48:32.420
 but two is separable.

1:48:32.420 --> 1:48:35.240
 That's one of the, the language like Julia says,

1:48:35.240 --> 1:48:36.380
 we're going to be all in one.

1:48:36.380 --> 1:48:37.400
 You can do all of it together.

1:48:37.400 --> 1:48:39.880
 And then there's, the jury's out, is that possible?

1:48:39.880 --> 1:48:41.760
 I tend to think that you're going to,

1:48:41.760 --> 1:48:43.280
 there's separate concerns there.

1:48:43.280 --> 1:48:44.320
 You want to precompile.

1:48:44.320 --> 1:48:47.560
 In fact, generally you will want to precompile your,

1:48:47.560 --> 1:48:48.400
 some of your loops.

1:48:48.400 --> 1:48:50.160
 Like SciPy is a compilation step.

1:48:50.160 --> 1:48:53.240
 To install SciPy, it takes about two hours.

1:48:53.240 --> 1:48:54.080
 If you have many machines,

1:48:54.080 --> 1:48:55.440
 maybe you can get it down to one hour.

1:48:55.440 --> 1:48:57.920
 But to compile those libraries takes about, takes a while.

1:48:57.920 --> 1:48:59.920
 You don't want to do that at runtime.

1:48:59.920 --> 1:49:00.800
 You don't want to do that all the time.

1:49:00.800 --> 1:49:02.720
 You want to have this precompiled binary available

1:49:02.720 --> 1:49:04.400
 that you're then just linking into.

1:49:04.400 --> 1:49:09.040
 So there's real questions about the whole source code.

1:49:09.040 --> 1:49:11.840
 Code is, running binary code is more than source code.

1:49:11.840 --> 1:49:14.480
 It's creating object code, it's the linker, it's the loader,

1:49:14.480 --> 1:49:15.600
 it's the how does that interpret it

1:49:15.600 --> 1:49:17.640
 inside of virtual memory space.

1:49:17.640 --> 1:49:19.160
 There's a lot of details there that actually

1:49:19.160 --> 1:49:20.520
 I didn't understand for a long time

1:49:20.520 --> 1:49:23.000
 until I read books on the topic.

1:49:23.000 --> 1:49:27.060
 And it led to, the more you know, the better off you are

1:49:27.060 --> 1:49:28.440
 and you can do more details,

1:49:28.440 --> 1:49:31.280
 but sometimes it helps with abstractions too.

1:49:31.280 --> 1:49:33.480
 Well, the problem, as we mentioned earlier

1:49:33.480 --> 1:49:36.760
 with abstractions is you kind of sometimes assume

1:49:37.700 --> 1:49:41.520
 that whoever implemented this thing

1:49:41.520 --> 1:49:45.000
 had your case in mind and found the optimal solution.

1:49:45.000 --> 1:49:45.840
 Yes.

1:49:45.840 --> 1:49:47.320
 Or like you assume certain things.

1:49:47.320 --> 1:49:48.160
 I mean, there's a lot of,

1:49:48.160 --> 1:49:49.000
 Correct.

1:49:49.000 --> 1:49:52.800
 One of the really powerful things to me early on,

1:49:52.800 --> 1:49:55.480
 I mean, it sounds silly to say, but with Python,

1:49:55.480 --> 1:49:58.440
 probably one of the reasons I fell in love with it

1:49:58.440 --> 1:49:59.800
 is dictionaries.

1:49:59.800 --> 1:50:00.920
 Yes.

1:50:00.920 --> 1:50:03.680
 So obviously probably most languages

1:50:03.680 --> 1:50:06.440
 have some mapping concept,

1:50:06.440 --> 1:50:09.040
 but it felt like it was a first class citizen

1:50:09.040 --> 1:50:12.200
 and it was just my brain was able to think in dictionaries.

1:50:12.200 --> 1:50:14.640
 But then there's the thing that I guess I still use

1:50:14.640 --> 1:50:16.920
 to this day is order dictionaries

1:50:16.920 --> 1:50:20.120
 because that seems like a more natural way

1:50:20.120 --> 1:50:21.680
 to construct dictionaries.

1:50:21.680 --> 1:50:22.520
 Yeah.

1:50:22.520 --> 1:50:23.720
 And from a computer science perspective,

1:50:23.720 --> 1:50:26.000
 the running time cost is not that significant,

1:50:26.000 --> 1:50:30.400
 but there's a lot of things to understand about dictionaries

1:50:30.400 --> 1:50:33.800
 that the abstraction kind of

1:50:33.800 --> 1:50:37.400
 doesn't necessarily incentivize you to understand.

1:50:37.400 --> 1:50:39.400
 Right, do you really understand the notion of a hash map

1:50:39.400 --> 1:50:41.080
 and how the dictionary is implemented?

1:50:41.080 --> 1:50:42.080
 But you're right.

1:50:42.080 --> 1:50:43.440
 Dictionaries are a good example

1:50:43.440 --> 1:50:44.920
 of an abstraction that's powerful.

1:50:44.920 --> 1:50:46.000
 And I agree with you.

1:50:46.000 --> 1:50:47.800
 I agree, I love dictionaries too.

1:50:47.800 --> 1:50:49.160
 Took me a while to understand that once you do,

1:50:49.160 --> 1:50:50.280
 you realize, oh, they're everywhere.

1:50:50.280 --> 1:50:52.760
 And Python uses them everywhere too.

1:50:52.760 --> 1:50:54.240
 Like it's actually constructed,

1:50:54.240 --> 1:50:55.760
 one of the foundational things is dictionaries

1:50:55.760 --> 1:50:57.560
 and it does everything with dictionaries.

1:50:57.560 --> 1:50:58.600
 So it is, it's powerful.

1:50:58.600 --> 1:51:00.160
 Order dictionaries came later,

1:51:00.160 --> 1:51:02.200
 but it is very, very powerful.

1:51:02.200 --> 1:51:03.400
 It took me a little while coming

1:51:03.400 --> 1:51:05.960
 from just the array programming entirely

1:51:05.960 --> 1:51:07.360
 to understand these other objects,

1:51:07.360 --> 1:51:11.600
 like dictionaries and lists and tuples and binary trees.

1:51:11.600 --> 1:51:13.360
 Like I said, I wasn't a computer scientist,

1:51:13.360 --> 1:51:15.120
 I studied arrays first.

1:51:15.120 --> 1:51:16.800
 And so I was very array centric.

1:51:16.800 --> 1:51:17.960
 And you realize, oh, these others

1:51:17.960 --> 1:51:20.140
 don't have purposes and value actually.

1:51:21.200 --> 1:51:22.040
 I agree.

1:51:22.040 --> 1:51:24.320
 There's a friendliness about,

1:51:24.320 --> 1:51:26.760
 like one way to think about arrays

1:51:26.760 --> 1:51:31.760
 is arrays are just like full of numbers,

1:51:31.920 --> 1:51:35.000
 but to make them accessible to humans

1:51:35.000 --> 1:51:38.700
 and make them less error prone to human users,

1:51:38.700 --> 1:51:41.480
 sometimes you want to attach names,

1:51:41.480 --> 1:51:43.120
 human interpretable names

1:51:43.120 --> 1:51:44.720
 that are sticky to those arrays.

1:51:44.720 --> 1:51:47.160
 So that's how you start to think about dictionaries

1:51:47.160 --> 1:51:50.520
 is you start to convert numbers

1:51:50.520 --> 1:51:52.120
 into something that's human interpretable.

1:51:52.120 --> 1:51:55.320
 And that's actually the tension I've had with NumPy

1:51:55.320 --> 1:51:58.160
 because I've built so much tooling

1:51:58.160 --> 1:52:02.320
 around human interpretability

1:52:02.320 --> 1:52:05.680
 and also protecting me from a year later

1:52:05.680 --> 1:52:07.960
 not making the mistakes by being,

1:52:07.960 --> 1:52:12.880
 I wanted to force myself to use English versus numbers.

1:52:12.880 --> 1:52:15.680
 Yes, so there's a project called Labeled Arrays.

1:52:15.680 --> 1:52:18.040
 Like very early it was recognized that,

1:52:18.040 --> 1:52:21.320
 oh, we're indexing NumPy with just numbers,

1:52:21.320 --> 1:52:23.640
 all the columns and particularly the dimensions.

1:52:23.640 --> 1:52:25.520
 I mean, if you have an image,

1:52:25.520 --> 1:52:27.680
 you don't necessarily need to label each column or row,

1:52:27.680 --> 1:52:29.160
 but if you have a lot of images

1:52:29.160 --> 1:52:30.440
 or you have another dimension,

1:52:30.440 --> 1:52:31.640
 you'd at least like to label the dimension

1:52:31.640 --> 1:52:33.120
 as this is X, this is Y, this is Z,

1:52:33.120 --> 1:52:34.640
 or this is give us some human meaning

1:52:34.640 --> 1:52:36.760
 or some domain specific meaning.

1:52:36.760 --> 1:52:39.680
 That was one of the impetuses for Pandas actually

1:52:39.680 --> 1:52:43.040
 was just, oh, we do need to label these things.

1:52:43.040 --> 1:52:45.240
 And Label Array was an attempt to add

1:52:45.240 --> 1:52:47.680
 that like a lighter weight version of that.

1:52:47.680 --> 1:52:49.360
 And there's been, like, that's an example of something

1:52:49.360 --> 1:52:53.080
 I think NumPy could add, could be added to NumPy,

1:52:53.080 --> 1:52:55.000
 but one of the challenges again, how do you fund this?

1:52:55.000 --> 1:52:58.280
 Like I said, one of the tragedies I think is that,

1:52:58.280 --> 1:53:00.240
 so I never had the chance to,

1:53:00.240 --> 1:53:02.360
 I was never paid to work on NumPy, right?

1:53:02.360 --> 1:53:04.400
 So I've always just done it in my spare time,

1:53:04.400 --> 1:53:05.880
 always taken from one thing,

1:53:05.880 --> 1:53:07.920
 taken from another thing to do it.

1:53:07.920 --> 1:53:09.800
 And at the time, I mean, today,

1:53:09.800 --> 1:53:11.000
 it would be the wrong day and today,

1:53:11.000 --> 1:53:12.160
 like paying me to work on NumPy now

1:53:12.160 --> 1:53:13.480
 would not be a good use of effort,

1:53:13.480 --> 1:53:16.640
 but we are finally at Quansight Labs,

1:53:16.640 --> 1:53:19.440
 I'm actually paying people to work on NumPy and SciPy,

1:53:19.440 --> 1:53:22.000
 which is I'm thrilled with, I'm excited by.

1:53:22.000 --> 1:53:22.840
 I've wanted to do that.

1:53:22.840 --> 1:53:24.280
 That's what I always wanted to do from day one.

1:53:24.280 --> 1:53:27.640
 It just took me a while to figure out a mechanism to do that.

1:53:27.640 --> 1:53:29.680
 Even like in the university setting,

1:53:29.680 --> 1:53:33.840
 respecting that, like pushing students,

1:53:33.840 --> 1:53:38.000
 young minds and young graduate students to contribute

1:53:38.000 --> 1:53:41.160
 and then figuring out financial mechanisms

1:53:41.160 --> 1:53:43.280
 that enable them to contribute

1:53:43.280 --> 1:53:45.280
 and then sort of reward them

1:53:45.280 --> 1:53:48.000
 for their innovative scientific journey,

1:53:48.000 --> 1:53:49.160
 that would be nice.

1:53:49.160 --> 1:53:53.360
 But then also just a better allocation of resources.

1:53:53.360 --> 1:53:55.760
 It's 20 year anniversary since 9.11

1:53:55.760 --> 1:53:59.240
 and I was just looking, we spent over $6 trillion

1:53:59.240 --> 1:54:04.240
 in the Middle East after 9.11 in the various efforts there.

1:54:04.560 --> 1:54:08.040
 And sort of to put politics and all that aside,

1:54:08.040 --> 1:54:10.120
 it's just, you think about the education system,

1:54:10.120 --> 1:54:11.320
 all the other ways we could have

1:54:11.320 --> 1:54:12.920
 possibly allocated that money.

1:54:14.280 --> 1:54:16.560
 To me, to take it back,

1:54:16.560 --> 1:54:21.200
 the amount of impact you would have

1:54:21.200 --> 1:54:26.200
 by allocating a little bit of money to the programmers

1:54:26.360 --> 1:54:30.600
 that build the tools that run the world is fascinating.

1:54:30.600 --> 1:54:31.440
 It is.

1:54:32.600 --> 1:54:34.920
 I don't know, I think, again,

1:54:34.920 --> 1:54:38.040
 there is some aspect to being broke

1:54:38.040 --> 1:54:40.240
 as somewhat of a feature, not a bug,

1:54:40.240 --> 1:54:42.320
 that you make sure that you're valued.

1:54:42.320 --> 1:54:43.440
 But you can still manage that.

1:54:43.440 --> 1:54:45.320
 Right, no, I know.

1:54:45.320 --> 1:54:47.040
 But I don't think that's a big part.

1:54:47.040 --> 1:54:50.720
 So it's like, I think you can have enough money

1:54:50.720 --> 1:54:53.880
 and actually be wealthy while maintaining your values.

1:54:53.880 --> 1:54:55.520
 Agreed, agreed.

1:54:55.520 --> 1:54:57.800
 There's an old adage that nations that trade together

1:54:57.800 --> 1:54:59.440
 don't go to war together.

1:54:59.440 --> 1:55:01.680
 I've often thought about nations that code together.

1:55:01.680 --> 1:55:02.520
 Yeah, code together.

1:55:02.520 --> 1:55:03.360
 Right?

1:55:03.360 --> 1:55:04.200
 I love that.

1:55:04.200 --> 1:55:05.360
 Because one of the things I love about open source

1:55:05.360 --> 1:55:07.880
 is it's global, it's multinational.

1:55:07.880 --> 1:55:09.160
 Like there aren't national boundaries.

1:55:09.160 --> 1:55:10.760
 One of the challenges with business and open source

1:55:10.760 --> 1:55:12.800
 is the fact that, well, business is national.

1:55:12.800 --> 1:55:13.960
 Like businesses are entities

1:55:13.960 --> 1:55:16.240
 that are recognized in legal jurisdictions, right?

1:55:16.240 --> 1:55:18.280
 And have laws that are respected in those jurisdictions

1:55:18.280 --> 1:55:21.320
 and hiring, and yet the open source ecosystem

1:55:21.320 --> 1:55:23.040
 is not, it's not there.

1:55:23.040 --> 1:55:25.080
 Like currently, one of the problems we're solving

1:55:25.080 --> 1:55:27.200
 is hiring people all over the world, right?

1:55:27.200 --> 1:55:29.600
 Because we, it's a global effort.

1:55:29.600 --> 1:55:31.920
 And I've had the chance to work, and I've loved the chance.

1:55:31.920 --> 1:55:35.280
 I've never been to like Iran,

1:55:35.280 --> 1:55:36.800
 but I once had a conference

1:55:36.800 --> 1:55:38.640
 where I was able to talk to people there, right?

1:55:38.640 --> 1:55:40.920
 And talk to folks in Pakistan.

1:55:40.920 --> 1:55:44.080
 I've never been there, but we had a call

1:55:44.080 --> 1:55:45.320
 where there were people there,

1:55:45.320 --> 1:55:47.600
 like just scientists and normal people.

1:55:47.600 --> 1:55:52.600
 And there's a certain amount of humanizing, right?

1:55:52.640 --> 1:55:54.360
 That gets away from the,

1:55:54.360 --> 1:55:56.200
 like we often get the memes of society

1:55:56.200 --> 1:55:58.560
 that bubble up and get discussed,

1:55:58.560 --> 1:56:00.760
 but the memes are not even an accurate reflection

1:56:00.760 --> 1:56:02.400
 of the reality of what people are.

1:56:02.400 --> 1:56:05.440
 Well, if you look at the major power centers

1:56:05.440 --> 1:56:08.240
 that are leading to something like cyber war

1:56:08.240 --> 1:56:10.000
 in the next few decades,

1:56:10.000 --> 1:56:13.320
 it's the United States, it's Russia, and China.

1:56:13.320 --> 1:56:16.080
 And those three countries in particular

1:56:16.080 --> 1:56:18.240
 have incredible developers.

1:56:18.240 --> 1:56:21.360
 So if they work together, I think that's one way,

1:56:21.360 --> 1:56:23.360
 the politicians can do their stupid bickering,

1:56:23.360 --> 1:56:27.360
 but like there's a layer of infrastructure, of humanity.

1:56:27.360 --> 1:56:29.400
 If they collaborate together,

1:56:29.400 --> 1:56:34.080
 that I think can prevent major military conflict,

1:56:34.080 --> 1:56:37.840
 which would, I think most likely happen at the cyber level

1:56:37.840 --> 1:56:39.800
 versus the actual hot war level.

1:56:39.800 --> 1:56:40.640
 You're right.

1:56:40.640 --> 1:56:43.320
 You know, I think that's a good prediction.

1:56:43.320 --> 1:56:46.560
 Nations that code together don't go to war together.

1:56:46.560 --> 1:56:47.880
 Don't go to war together.

1:56:47.880 --> 1:56:48.720
 That's a hope, right?

1:56:48.720 --> 1:56:51.160
 That's one of the philosophical hopes, but yeah.

1:56:52.360 --> 1:56:55.640
 So you mentioned the project of Numba,

1:56:55.640 --> 1:56:58.520
 which is fascinating.

1:56:58.520 --> 1:56:59.720
 So from the early days,

1:56:59.720 --> 1:57:04.560
 there was kind of a pushback on Python that it's not fast.

1:57:04.560 --> 1:57:05.520
 You know, you see C plus,

1:57:05.520 --> 1:57:06.920
 if you wanna write something that's fast,

1:57:06.920 --> 1:57:08.240
 you use C plus plus.

1:57:08.240 --> 1:57:11.320
 If you wanna write something that's usable and friendly,

1:57:11.320 --> 1:57:13.240
 but slow, you use Python.

1:57:13.240 --> 1:57:15.840
 And so what is Numba?

1:57:15.840 --> 1:57:16.800
 What is its goal?

1:57:16.800 --> 1:57:17.640
 How does it work?

1:57:17.640 --> 1:57:18.480
 Great, yeah.

1:57:18.480 --> 1:57:19.760
 Yes, that's what the argument.

1:57:19.760 --> 1:57:22.440
 And the reality was people would write high level coding

1:57:22.440 --> 1:57:23.440
 and use compiled code,

1:57:23.440 --> 1:57:25.240
 but there's still user stories, use cases,

1:57:25.240 --> 1:57:27.440
 where you want to write Python,

1:57:27.440 --> 1:57:28.880
 but then have it still be fast.

1:57:28.880 --> 1:57:30.720
 You still need to write a for loop.

1:57:30.720 --> 1:57:33.920
 Like before Numba, it was always don't write a for loop.

1:57:33.920 --> 1:57:35.800
 You know, write it in a vectorized way,

1:57:35.800 --> 1:57:37.240
 you know, put it in an array.

1:57:37.240 --> 1:57:39.640
 And often that can make a memory trade off.

1:57:39.640 --> 1:57:41.080
 Like quite often you can do it,

1:57:41.080 --> 1:57:42.720
 but then you make maybe use more memory

1:57:42.720 --> 1:57:44.920
 because you have to build this array of data

1:57:44.920 --> 1:57:46.680
 that you don't necessarily need all the time.

1:57:46.680 --> 1:57:50.960
 So Numba was, it started from a desire to have

1:57:50.960 --> 1:57:52.840
 kind of a vectorized that worked.

1:57:52.840 --> 1:57:56.260
 A vectorized was a tool in NumPy, it was released.

1:57:56.260 --> 1:57:57.800
 You give it a Python function

1:57:57.800 --> 1:57:59.680
 and it gave you a universal function,

1:57:59.680 --> 1:58:01.120
 a ufunc that would work on arrays.

1:58:01.120 --> 1:58:03.640
 So you get the function that just worked on a scaler.

1:58:03.640 --> 1:58:04.880
 Like you could make a,

1:58:04.880 --> 1:58:07.280
 like the classic case was a simple function

1:58:07.280 --> 1:58:08.280
 that an if then statement in it.

1:58:08.280 --> 1:58:12.160
 So sine X over X function, sync function.

1:58:12.160 --> 1:58:15.120
 If X equals zero, return one, otherwise do sine X over X.

1:58:16.080 --> 1:58:17.760
 The challenge is you don't want that loop

1:58:17.760 --> 1:58:18.720
 peg one in Python.

1:58:18.720 --> 1:58:21.480
 So you want a compiled version of that,

1:58:21.480 --> 1:58:23.160
 but the ufunc, the vectorized in NumPy

1:58:23.160 --> 1:58:24.840
 would just give you a Python function.

1:58:24.840 --> 1:58:26.720
 So it would take the array of numbers

1:58:26.720 --> 1:58:29.560
 and at every call do a loop back into Python.

1:58:29.560 --> 1:58:30.440
 So it was very slow.

1:58:30.440 --> 1:58:31.800
 It gave you the appearance of a ufunc,

1:58:31.800 --> 1:58:32.840
 but it was very slow.

1:58:32.840 --> 1:58:34.600
 So I always wanted a vectorized

1:58:34.600 --> 1:58:36.280
 that would take that Python scaler function

1:58:36.280 --> 1:58:39.480
 and produce a ufunc working on binary native code.

1:58:39.480 --> 1:58:42.800
 So in fact, I had somebody work on that with PyPy

1:58:42.800 --> 1:58:45.640
 and see if PyPy could be used to produce a ufunc like that

1:58:45.640 --> 1:58:50.560
 early on in 2009 or something like that, 2010.

1:58:50.560 --> 1:58:51.480
 They didn't work that well.

1:58:51.480 --> 1:58:52.880
 It was kind of pretty bulky.

1:58:52.880 --> 1:58:57.000
 But in 2012, Peter and I had just started Anaconda.

1:58:57.000 --> 1:59:00.680
 We had, I just, I'd learned to raise money.

1:59:00.680 --> 1:59:01.640
 That's a different topic,

1:59:01.640 --> 1:59:04.640
 but I'd learned to raise money from friends, family,

1:59:04.640 --> 1:59:05.960
 and fools, as they say.

1:59:05.960 --> 1:59:06.800
 And.

1:59:06.800 --> 1:59:07.840
 That's a good line.

1:59:09.840 --> 1:59:11.200
 Oh, that's a good line.

1:59:11.200 --> 1:59:13.440
 But, so we were trying to do something.

1:59:13.440 --> 1:59:14.680
 We were trying to change the world.

1:59:14.680 --> 1:59:15.840
 Peter and I are super ambitious.

1:59:15.840 --> 1:59:17.600
 We wanted to make array computing

1:59:17.600 --> 1:59:19.480
 and we had ideas for really what's still,

1:59:19.480 --> 1:59:20.640
 it's still the energy right now.

1:59:20.640 --> 1:59:23.520
 How do you do at scale data science?

1:59:23.520 --> 1:59:25.840
 And we had a bunch of ideas there, but one of them,

1:59:25.840 --> 1:59:27.720
 I had just talked to people about LLVM

1:59:27.720 --> 1:59:30.040
 and I was like, there's a way to do this.

1:59:30.040 --> 1:59:32.600
 I just, I went, I heard about my friend Dave Beasley

1:59:32.600 --> 1:59:33.920
 at a compiler course.

1:59:33.920 --> 1:59:35.560
 So I was looking at compilers like,

1:59:35.560 --> 1:59:37.640
 and I realized, oh, this is what you do.

1:59:37.640 --> 1:59:40.040
 And so I wrote a version of Numba

1:59:40.040 --> 1:59:45.040
 that just basically mapped Python bytecode to LLVM.

1:59:45.640 --> 1:59:46.480
 Nice.

1:59:46.480 --> 1:59:49.200
 Right, so, and the first version is like, this works

1:59:49.200 --> 1:59:50.840
 and it produces code that's fast.

1:59:50.840 --> 1:59:51.960
 This is cool for, you know,

1:59:51.960 --> 1:59:53.440
 obviously a reduced subset of Python.

1:59:53.440 --> 1:59:55.360
 I didn't support all the Python language.

1:59:55.360 --> 1:59:57.480
 There had been efforts to speed up Python in the past,

1:59:57.480 --> 1:59:59.200
 but those efforts were, I would say,

1:59:59.200 --> 2:00:00.840
 not from the array computing perspective,

2:00:00.840 --> 2:00:02.160
 not from the perspective of wanting to produce

2:00:02.160 --> 2:00:03.560
 a vectorized improvement.

2:00:03.560 --> 2:00:05.120
 They were from the perspective of speeding up

2:00:05.120 --> 2:00:07.520
 the runtime of Python, which is fundamentally hard

2:00:07.520 --> 2:00:10.520
 because Python allows for some constructs

2:00:10.520 --> 2:00:12.160
 that aren't, you can't speed up.

2:00:12.160 --> 2:00:15.560
 Like it's this generic, you know, when it does this variable.

2:00:15.560 --> 2:00:17.720
 So I, from the start, did not try to replicate

2:00:17.720 --> 2:00:20.280
 Python's semantics entirely.

2:00:20.280 --> 2:00:23.000
 I said, I'm gonna take a subset of the Python syntax

2:00:23.000 --> 2:00:25.080
 and let people write syntax in Python,

2:00:25.080 --> 2:00:27.440
 but it's kind of a new language really.

2:00:27.440 --> 2:00:30.480
 So it's almost like four loops, like focusing on four loops.

2:00:30.480 --> 2:00:34.400
 Four loops, scalar arithmetic, you know, typed,

2:00:34.400 --> 2:00:37.200
 you know, really typed language, a typed subset.

2:00:38.280 --> 2:00:39.360
 That was the key.

2:00:39.360 --> 2:00:41.880
 So, but we wanted to add inference of types.

2:00:41.880 --> 2:00:43.400
 So you didn't have to spell all the types out

2:00:43.400 --> 2:00:45.840
 because when you call a function,

2:00:45.840 --> 2:00:48.040
 so Python is typed, it's just dynamically typed.

2:00:48.040 --> 2:00:49.360
 So you don't tell it what the types are,

2:00:49.360 --> 2:00:52.080
 but when it runs, every time an object runs,

2:00:52.080 --> 2:00:53.360
 there's a type for the variables.

2:00:53.360 --> 2:00:54.560
 You know what it is.

2:00:54.560 --> 2:00:56.800
 And so that was the design goals of Numba

2:00:56.800 --> 2:00:59.200
 were to make it possible to write functions

2:00:59.200 --> 2:01:03.440
 that could be compiled and have them used for NumPy arrays.

2:01:03.440 --> 2:01:05.520
 Like they needed to support NumPy arrays.

2:01:05.520 --> 2:01:07.040
 And so how does it work?

2:01:07.040 --> 2:01:10.200
 Do you add a comment within Python that tells it to do,

2:01:10.200 --> 2:01:11.880
 like how do you help out the compiler?

2:01:11.880 --> 2:01:15.860
 Yeah, so there isn't much actually.

2:01:15.860 --> 2:01:17.740
 You don't, it's kind of magical in the sense

2:01:17.740 --> 2:01:19.600
 that it just looks at the type of the objects

2:01:19.600 --> 2:01:21.320
 and then it's typed inference to determine

2:01:21.320 --> 2:01:23.320
 any other variables it needs.

2:01:23.320 --> 2:01:26.080
 And then it was also, because we had a use case

2:01:26.080 --> 2:01:28.280
 that could work early.

2:01:28.280 --> 2:01:30.700
 Like one of the challenges of any kind of new development

2:01:30.700 --> 2:01:32.280
 is if you have something that to make it work,

2:01:32.280 --> 2:01:34.200
 it was gonna take you a long time,

2:01:34.200 --> 2:01:35.960
 it's really hard to get out off the ground.

2:01:35.960 --> 2:01:39.200
 If you have a project where there's some incremental story,

2:01:39.200 --> 2:01:42.300
 it can start working today and solve a problem,

2:01:42.300 --> 2:01:44.640
 then you can start getting it out there, getting feedback.

2:01:44.640 --> 2:01:48.160
 Because Numba today, now Numba is nine years old today,

2:01:48.160 --> 2:01:52.120
 the first two, three versions were not great, right?

2:01:52.120 --> 2:01:54.120
 But they solved a problem and some people could try it

2:01:54.120 --> 2:01:55.560
 and we could get some feedback on it.

2:01:55.560 --> 2:01:57.520
 Not great in that it was very focused.

2:01:57.520 --> 2:02:02.000
 Very fragile, the subset it would actually compile

2:02:02.000 --> 2:02:04.320
 was small and so if you wrote Python code

2:02:04.320 --> 2:02:06.880
 and said, so the way it worked is you write a function

2:02:06.880 --> 2:02:09.000
 and you say at JIT, use decorators.

2:02:09.000 --> 2:02:11.040
 So decorators, just these little constructs

2:02:11.040 --> 2:02:15.040
 let you decorate code with an at and then a name.

2:02:15.040 --> 2:02:17.760
 The at JIT would take your Python function

2:02:17.760 --> 2:02:20.240
 and actually just compile it and replace the Python function

2:02:20.240 --> 2:02:23.200
 with another function that interacts

2:02:23.200 --> 2:02:24.920
 with this compiled function.

2:02:24.920 --> 2:02:28.480
 And it would just do that and we went from Python bytecode

2:02:28.480 --> 2:02:29.400
 then we went to AST.

2:02:29.400 --> 2:02:31.200
 I mean, writing compilers actually,

2:02:31.200 --> 2:02:32.940
 I learned a lot about why computer science

2:02:32.940 --> 2:02:35.560
 is taught the way it is because compilers

2:02:35.560 --> 2:02:36.640
 can be hard to write.

2:02:36.640 --> 2:02:39.080
 They use tree structures, they use all the concepts

2:02:39.080 --> 2:02:40.520
 of computer science that are needed.

2:02:40.520 --> 2:02:44.600
 It's actually hard to, it's easy to write a compiler

2:02:44.600 --> 2:02:46.000
 and then have it be spaghetti code.

2:02:46.000 --> 2:02:47.600
 Like the passes become challenging

2:02:47.600 --> 2:02:49.940
 and we ended up with three versions of Numba, right?

2:02:49.940 --> 2:02:51.540
 Numba got written three times.

2:02:51.540 --> 2:02:55.560
 What programming language is Numba written in?

2:02:55.560 --> 2:02:56.440
 Python.

2:02:56.440 --> 2:02:57.440
 Wait, okay.

2:02:57.440 --> 2:02:58.640
 Yeah, Python.

2:02:58.640 --> 2:03:00.040
 So.

2:03:00.040 --> 2:03:00.860
 Really?

2:03:00.860 --> 2:03:01.700
 That's fascinating.

2:03:01.700 --> 2:03:03.520
 Yeah, so Python, but then the whole goal of Numba

2:03:03.520 --> 2:03:07.480
 is to translate Python bytecode to LLVM.

2:03:07.480 --> 2:03:09.400
 And so LLVM actually does the code generation.

2:03:09.400 --> 2:03:10.780
 In fact, a lot of times they'd say,

2:03:10.780 --> 2:03:12.780
 yeah, it's super easy to write a compiler

2:03:12.780 --> 2:03:15.880
 if you're not writing the parser nor the code generator.

2:03:15.880 --> 2:03:16.720
 Right?

2:03:16.720 --> 2:03:19.440
 So for people who don't know, LLVM is a compiler itself.

2:03:19.440 --> 2:03:20.360
 So your compiler.

2:03:20.360 --> 2:03:22.680
 Yeah, it's really badly named low level virtual machine,

2:03:22.680 --> 2:03:24.480
 which that part of it is not used.

2:03:24.480 --> 2:03:25.320
 It's really low level.

2:03:25.320 --> 2:03:26.160
 Chris, he doesn't mean that.

2:03:26.160 --> 2:03:29.280
 Yeah, love Chris.

2:03:29.280 --> 2:03:31.640
 But the name makes you imply that the virtual machine

2:03:31.640 --> 2:03:32.480
 is what it's all about.

2:03:32.480 --> 2:03:34.520
 It's actually the IR and the library,

2:03:34.520 --> 2:03:36.000
 the code generation.

2:03:36.000 --> 2:03:37.680
 That's the real beauty of it.

2:03:37.680 --> 2:03:39.360
 The fact that, what I love about LLVM

2:03:39.360 --> 2:03:43.200
 was the fact that it was a plateau you could collaborate on.

2:03:43.200 --> 2:03:44.040
 Right?

2:03:44.040 --> 2:03:45.880
 Instead of the internals of GCC

2:03:45.880 --> 2:03:47.440
 or the internals of the Intel compiler,

2:03:47.440 --> 2:03:49.120
 or like how do I extend that?

2:03:49.120 --> 2:03:51.020
 And it was a place we could collaborate.

2:03:51.020 --> 2:03:52.400
 And we were early.

2:03:52.400 --> 2:03:54.000
 I mean, people had started before.

2:03:54.000 --> 2:03:55.240
 It's a slow compiler.

2:03:55.240 --> 2:03:56.840
 Like it's not a fast compiler.

2:03:56.840 --> 2:03:59.520
 So for some kind of JITs,

2:03:59.520 --> 2:04:01.040
 like JITs are common in language

2:04:01.040 --> 2:04:04.760
 because one, every browser has a JavaScript JIT.

2:04:04.760 --> 2:04:06.560
 It does real time compilation

2:04:06.560 --> 2:04:09.080
 of the JavaScript to machine code.

2:04:09.080 --> 2:04:11.520
 For people who don't know, JIT is just in time compilation.

2:04:11.520 --> 2:04:12.340
 Thank you.

2:04:12.340 --> 2:04:13.240
 Yeah, just in time compilation.

2:04:13.240 --> 2:04:14.840
 They're actually really sophisticated.

2:04:14.840 --> 2:04:17.100
 In fact, I got jealous of how much effort

2:04:17.100 --> 2:04:18.600
 was put into the JavaScript JITs.

2:04:18.600 --> 2:04:20.800
 Yes, well, it's kind of incredible what they've done.

2:04:20.800 --> 2:04:22.760
 Yes, I completely agree.

2:04:22.760 --> 2:04:23.840
 I'm very impressed.

2:04:24.760 --> 2:04:26.880
 But you know, Numba was an effort

2:04:26.880 --> 2:04:29.320
 to make that happen with Python.

2:04:29.320 --> 2:04:30.960
 And so we used some of the money

2:04:30.960 --> 2:04:32.440
 we raised from Anaconda to do it.

2:04:32.440 --> 2:04:34.800
 And then we also applied for this DARPA grant

2:04:34.800 --> 2:04:36.820
 and used some of that money to continue the development.

2:04:36.820 --> 2:04:40.680
 And then we used proceeds from service projects we would do.

2:04:40.680 --> 2:04:41.800
 We get consulting projects

2:04:41.800 --> 2:04:44.480
 that we would then use some of the profits

2:04:44.480 --> 2:04:45.400
 to invest in Numba.

2:04:45.400 --> 2:04:47.160
 So we ended up with a team of two or three people

2:04:47.160 --> 2:04:48.880
 working on Numba.

2:04:48.880 --> 2:04:50.720
 It was a fits and starts, right?

2:04:50.720 --> 2:04:53.560
 And ultimately, the fact that we had a commercial version

2:04:53.560 --> 2:04:54.720
 of it also we were writing.

2:04:54.720 --> 2:04:56.640
 So part of the way I was trying to fund Numba,

2:04:56.640 --> 2:04:58.560
 say, well, let's do the free Numba

2:04:58.560 --> 2:04:59.920
 and then we'll have a commercial version of Numba

2:04:59.920 --> 2:05:00.820
 called Numba Pro.

2:05:00.820 --> 2:05:03.240
 And what Numba Pro did is it targeted GPUs.

2:05:03.240 --> 2:05:05.520
 So we had the very first CUDA JIT

2:05:05.520 --> 2:05:10.520
 and the very first at JIT compiler that in 2012 for 13,

2:05:10.840 --> 2:05:14.140
 you could run not just a view func on CPU,

2:05:14.140 --> 2:05:15.640
 but a view func on GPUs.

2:05:15.640 --> 2:05:17.480
 And it would automatically paralyze it

2:05:17.480 --> 2:05:18.840
 and get 1000X speed on it.

2:05:18.840 --> 2:05:21.120
 And that's an interesting funding mechanism

2:05:21.120 --> 2:05:26.120
 because large companies or larger companies

2:05:26.860 --> 2:05:30.120
 care about speed in just this way.

2:05:30.120 --> 2:05:33.140
 So it's exactly a really good way.

2:05:33.140 --> 2:05:34.240
 Yeah, there's been a couple of things

2:05:34.240 --> 2:05:35.200
 you know people will pay for.

2:05:35.200 --> 2:05:37.960
 One, they'll pay for really good user interfaces, right?

2:05:37.960 --> 2:05:40.160
 And so I'm always looking for what are the things

2:05:40.160 --> 2:05:41.720
 people will pay for that you could actually adapt

2:05:41.720 --> 2:05:43.240
 to the open source infrastructure?

2:05:43.240 --> 2:05:45.560
 One is definitely user interfaces.

2:05:45.560 --> 2:05:49.120
 The second is speed, like a better runtime, faster runtime.

2:05:49.120 --> 2:05:50.000
 And then when you say people,

2:05:50.000 --> 2:05:52.280
 you mean like a small number of people pay a lot of money,

2:05:52.280 --> 2:05:54.440
 but then there's also this other mechanism that.

2:05:54.440 --> 2:05:55.280
 That's true.

2:05:55.280 --> 2:05:56.400
 A ton of people pay.

2:05:56.400 --> 2:05:57.220
 That's true.

2:05:57.220 --> 2:05:58.060
 A little bit.

2:05:58.060 --> 2:06:00.320
 First, I gotta, we mentioned Anaconda,

2:06:00.320 --> 2:06:04.280
 we mentioned friends, family, and fools.

2:06:04.280 --> 2:06:06.800
 So Anaconda is yet another.

2:06:06.800 --> 2:06:09.080
 So there's a company, but there's also a project.

2:06:09.080 --> 2:06:09.920
 Correct.

2:06:09.920 --> 2:06:14.600
 That is exceptionally impactful in terms of,

2:06:14.600 --> 2:06:16.880
 for many reasons, but one of which is bringing

2:06:16.880 --> 2:06:21.880
 a lot more people into the community

2:06:21.960 --> 2:06:23.640
 of folks who use Python.

2:06:23.640 --> 2:06:26.920
 So what is Anaconda?

2:06:26.920 --> 2:06:28.960
 What is its goals?

2:06:28.960 --> 2:06:31.540
 Maybe what is Conda versus Anaconda?

2:06:31.540 --> 2:06:33.080
 Yeah, I'll tell you a little bit of the history of that.

2:06:33.080 --> 2:06:35.280
 Cause Anaconda, we wanted to do,

2:06:35.280 --> 2:06:37.440
 we wanted to scale Python.

2:06:37.440 --> 2:06:38.680
 Cause we, you know, that was the goal.

2:06:38.680 --> 2:06:40.720
 Peter and I had the goal of when we started Anaconda,

2:06:40.720 --> 2:06:42.440
 we actually started as Continuum Analytics

2:06:42.440 --> 2:06:44.000
 was the name of the company that started.

2:06:44.000 --> 2:06:47.000
 It got renamed Anaconda in 2015.

2:06:47.000 --> 2:06:49.880
 But we said, we want to scale analytics.

2:06:49.880 --> 2:06:52.680
 NumPy is great, Pandas is emerging,

2:06:52.680 --> 2:06:55.320
 but these need to run at scale with lots of machines.

2:06:55.320 --> 2:06:57.920
 The other thing we wanted to do was make user interfaces

2:06:57.920 --> 2:06:59.360
 that were web.

2:06:59.360 --> 2:07:01.320
 We wanted to make sure the web did not pass

2:07:01.320 --> 2:07:02.920
 by the Python community.

2:07:02.920 --> 2:07:06.000
 That we had ways to translate your data science to the web.

2:07:06.000 --> 2:07:07.720
 So those are the two kind of technical areas.

2:07:07.720 --> 2:07:09.920
 We thought, oh, we'll build products in this space.

2:07:09.920 --> 2:07:12.500
 And that was the idea.

2:07:12.500 --> 2:07:13.640
 Very quickly in, but of course,

2:07:13.640 --> 2:07:15.760
 the thing I knew how to do was to do consulting

2:07:15.760 --> 2:07:18.920
 to make money and to make sure my family and friends

2:07:18.920 --> 2:07:21.680
 and fools that had invested didn't lose their money.

2:07:21.680 --> 2:07:22.640
 So it's a little different

2:07:22.640 --> 2:07:24.360
 than if you take money from a venture fund.

2:07:24.360 --> 2:07:25.520
 If you take money from a venture fund,

2:07:25.520 --> 2:07:27.720
 the venture fund, they want you to go big or go home.

2:07:27.720 --> 2:07:30.280
 And they're kind of like expecting nine out of 10 to fail

2:07:30.280 --> 2:07:33.080
 or 99 out of 100 to fail.

2:07:33.080 --> 2:07:33.920
 It's different.

2:07:33.920 --> 2:07:35.480
 I was, I was owed a barbell strategy.

2:07:35.480 --> 2:07:37.280
 I was like, I can't fail.

2:07:37.280 --> 2:07:38.680
 I mean, I may not do super well,

2:07:38.680 --> 2:07:40.440
 but I cannot lose their money.

2:07:40.440 --> 2:07:43.560
 So I'm going to do something I know can return a profit,

2:07:43.560 --> 2:07:46.320
 but I want to have exposure to an upside.

2:07:46.320 --> 2:07:47.920
 So that's what happened at Anaconda.

2:07:47.920 --> 2:07:50.320
 We didn't, there was lots of things we did not well

2:07:50.320 --> 2:07:51.320
 in terms of that structure.

2:07:51.320 --> 2:07:53.740
 And I've learned from since and how to do it better.

2:07:53.740 --> 2:07:56.700
 But we've, we did a really good job

2:07:56.700 --> 2:07:59.140
 of kind of attracting the interest around the area

2:07:59.140 --> 2:08:00.360
 to get good people working

2:08:00.360 --> 2:08:01.700
 and then get funnel some money

2:08:01.700 --> 2:08:03.080
 on some interesting projects.

2:08:03.080 --> 2:08:05.200
 Super excited about what came out of our energy there.

2:08:05.200 --> 2:08:06.840
 Like a lot did.

2:08:06.840 --> 2:08:08.280
 So what are some of the interesting projects?

2:08:08.280 --> 2:08:12.120
 So Dask, Numba, Bokeh, Conda.

2:08:12.120 --> 2:08:15.200
 There was a data shader, Panel, Holoviz.

2:08:16.200 --> 2:08:19.040
 These are all tools that are extremely relevant

2:08:19.040 --> 2:08:21.400
 in terms of helping you build applications,

2:08:21.400 --> 2:08:25.060
 build tools, build, you know, faster code.

2:08:25.060 --> 2:08:25.900
 There's a couple I'm forgetting.

2:08:25.900 --> 2:08:28.680
 Oh, JupyterLab, JupyterLab came out of this too.

2:08:28.680 --> 2:08:30.320
 And yeah.

2:08:30.320 --> 2:08:32.700
 Okay, so Bokeh does plotting?

2:08:32.700 --> 2:08:33.540
 Is that?

2:08:33.540 --> 2:08:34.360
 Bokeh does plotting.

2:08:34.360 --> 2:08:35.880
 So Bokeh was one of the foundational things to say,

2:08:35.880 --> 2:08:37.360
 I want to do plot in Python,

2:08:37.360 --> 2:08:39.140
 but have the things show up in a web.

2:08:39.140 --> 2:08:40.040
 Right, that's right.

2:08:40.040 --> 2:08:40.880
 That's right, that's right.

2:08:40.880 --> 2:08:43.280
 And plotting to me still,

2:08:43.280 --> 2:08:46.480
 with all due respect to Matplotlib and Bokeh,

2:08:46.480 --> 2:08:48.760
 it feels like still an unsolved problem,

2:08:48.760 --> 2:08:50.260
 not a solved problem.

2:08:50.260 --> 2:08:52.160
 It is, it's a big problem.

2:08:52.160 --> 2:08:55.640
 Right, because you're, I mean, I don't know,

2:08:55.640 --> 2:08:58.640
 it's visualization broadly, right?

2:08:58.640 --> 2:09:00.960
 I think we've got a pretty good API story

2:09:00.960 --> 2:09:03.440
 around certain use cases of plotting.

2:09:03.440 --> 2:09:04.920
 But there's a difference between static plots

2:09:04.920 --> 2:09:07.800
 versus interactive plots versus I'm an end user,

2:09:07.800 --> 2:09:09.760
 I just want to write a simple,

2:09:09.760 --> 2:09:12.040
 for Pandas started the idea of here's a data frame

2:09:12.040 --> 2:09:14.200
 on a dot plot, I'm just going to attach plot

2:09:14.200 --> 2:09:16.380
 as a method to my object,

2:09:16.380 --> 2:09:18.280
 which was a little bit controversial, right?

2:09:18.280 --> 2:09:20.160
 But works pretty well, actually,

2:09:20.160 --> 2:09:23.680
 because there's a lot less you have to pass in, right?

2:09:23.680 --> 2:09:26.280
 You can just say, here's my object, you know what you are,

2:09:26.280 --> 2:09:29.000
 you tell the visualization what to do.

2:09:29.000 --> 2:09:31.320
 So that, and there's things like that

2:09:31.320 --> 2:09:33.720
 that have not been super well developed entirely,

2:09:33.720 --> 2:09:36.320
 but Bokeh was focused on interactive plotting.

2:09:36.320 --> 2:09:38.400
 So you could, it's a short path

2:09:38.400 --> 2:09:41.080
 between interactive plotting and application,

2:09:41.080 --> 2:09:42.680
 dashboard application.

2:09:42.680 --> 2:09:44.760
 And there's some incredible work that got done there, right?

2:09:44.760 --> 2:09:45.800
 And it was a hard project,

2:09:45.800 --> 2:09:49.440
 because then you're basically doing JavaScript and Python.

2:09:49.440 --> 2:09:51.560
 So we wanted to tackle some of these hard problems

2:09:51.560 --> 2:09:53.440
 and try to just go after them.

2:09:53.440 --> 2:09:54.920
 We got some DARPA funding to help,

2:09:54.920 --> 2:09:56.880
 and it was super helpful, funny story there,

2:09:56.880 --> 2:09:58.320
 we actually did two DARPA proposals,

2:09:58.320 --> 2:10:00.580
 but one we were five minutes late for.

2:10:00.580 --> 2:10:03.040
 And DARPA has a very strict cutoff window.

2:10:03.040 --> 2:10:04.760
 And so I, we had two proposals,

2:10:04.760 --> 2:10:06.720
 one for the Bokeh and one for actually Numba

2:10:06.720 --> 2:10:09.320
 and the other work.

2:10:09.320 --> 2:10:10.920
 Which one were you late for?

2:10:10.920 --> 2:10:12.920
 The Foundation on Numerical Work.

2:10:12.920 --> 2:10:14.880
 So Bokeh got funded. Oh no.

2:10:14.880 --> 2:10:17.120
 Fortunately, Chris let us use some of the money to fund

2:10:17.120 --> 2:10:19.320
 still some of the other foundational work,

2:10:19.320 --> 2:10:22.040
 but it wasn't as, yeah, his hands were tired,

2:10:22.040 --> 2:10:23.880
 he couldn't do anything about it.

2:10:23.880 --> 2:10:25.880
 That was a whole interesting story.

2:10:25.880 --> 2:10:27.700
 So one of the incredible projects

2:10:27.700 --> 2:10:29.200
 that you worked on is Conda.

2:10:29.200 --> 2:10:30.040
 Yes.

2:10:30.040 --> 2:10:31.400
 So what is Conda? So how that came about,

2:10:31.400 --> 2:10:35.480
 yeah, Conda, it was early on, like I said, with SciPy.

2:10:35.480 --> 2:10:37.880
 SciPy was a distribution mass generation library.

2:10:37.880 --> 2:10:40.320
 And he said, he heard me talking about compiler issues

2:10:40.320 --> 2:10:41.480
 and trying to get the stuff shipped

2:10:41.480 --> 2:10:43.320
 and the fact that people can use your libraries

2:10:43.320 --> 2:10:44.660
 if they have it.

2:10:44.660 --> 2:10:45.500
 So for a long time,

2:10:45.500 --> 2:10:47.800
 we'd understood the packaging problem in Python.

2:10:47.800 --> 2:10:50.680
 And one of the first things he did at Conda Analytics

2:10:50.680 --> 2:10:54.240
 became Anaconda was organize the Pi data ecosystem

2:10:54.240 --> 2:10:56.160
 in conjunction with NumFocus.

2:10:56.160 --> 2:10:57.960
 We actually started NumFocus

2:10:58.960 --> 2:11:00.480
 with some other folks in the community

2:11:00.480 --> 2:11:02.880
 the same year we started Anaconda.

2:11:02.880 --> 2:11:04.200
 I said, we're gonna build a corporation,

2:11:04.200 --> 2:11:07.040
 but we're also gonna reify the community aspect

2:11:07.040 --> 2:11:08.280
 and build a nonprofit.

2:11:08.280 --> 2:11:09.400
 So we did both of those.

2:11:09.400 --> 2:11:13.280
 Can we pause real quick and can you say what is PyPy,

2:11:13.280 --> 2:11:14.720
 the Python package index,

2:11:14.720 --> 2:11:19.300
 like this whole story of packaging in Python?

2:11:19.300 --> 2:11:20.880
 Yeah, that's what I'm gonna get to actually.

2:11:20.880 --> 2:11:22.240
 This is exactly the journey I'm on.

2:11:22.240 --> 2:11:24.200
 It's to sort of explain packaging in Python.

2:11:24.200 --> 2:11:26.080
 I think it's best expressed to the conversation

2:11:26.080 --> 2:11:27.600
 I had with Guido at a conference,

2:11:27.600 --> 2:11:31.280
 where I said, so packaging is kind of a problem.

2:11:31.280 --> 2:11:34.080
 And Guido said, I don't ever care about packaging.

2:11:34.080 --> 2:11:34.920
 I don't use it.

2:11:34.920 --> 2:11:36.320
 I don't install new libraries.

2:11:36.320 --> 2:11:38.200
 I'm like, I guess if you're the language creator

2:11:38.200 --> 2:11:40.480
 and if you need something, you just put it in the distribution

2:11:40.480 --> 2:11:42.520
 maybe you don't worry about packaging.

2:11:42.520 --> 2:11:45.200
 But Guido has never really cared about packaging, right?

2:11:45.200 --> 2:11:47.400
 And never really cared about the problem of distribution.

2:11:47.400 --> 2:11:48.480
 It's somebody else's problem.

2:11:48.480 --> 2:11:50.240
 And that's a fair position to take, I think,

2:11:50.240 --> 2:11:51.480
 as a language creator.

2:11:51.480 --> 2:11:54.160
 In fact, there's a philosophical question about

2:11:54.160 --> 2:11:56.680
 should you have different development packaging managers?

2:11:56.680 --> 2:11:58.400
 Should you have a package manager per language?

2:11:58.400 --> 2:11:59.800
 Is that really the right approach?

2:11:59.800 --> 2:12:01.900
 I think there are some answers of

2:12:01.900 --> 2:12:04.200
 it is appropriate to have development tools.

2:12:04.200 --> 2:12:06.040
 And there's an aspect of a development tool

2:12:06.040 --> 2:12:07.680
 that is related to packaging.

2:12:07.680 --> 2:12:10.600
 And every language should have some story there

2:12:10.600 --> 2:12:12.120
 to help their developers create.

2:12:12.120 --> 2:12:14.960
 So you should have language specific development tools.

2:12:14.960 --> 2:12:17.080
 Development tools that relate to package managers.

2:12:17.080 --> 2:12:19.520
 But then there's a very specific user story

2:12:19.520 --> 2:12:20.680
 around package management

2:12:20.680 --> 2:12:22.240
 that those language specific package managers

2:12:22.240 --> 2:12:23.560
 have to interact with.

2:12:23.560 --> 2:12:25.920
 And currently aren't doing a good job of that.

2:12:25.920 --> 2:12:27.000
 That was one of the challenges

2:12:27.000 --> 2:12:29.140
 that not seeing that difference,

2:12:29.140 --> 2:12:31.720
 and it still exists in the difference today.

2:12:31.720 --> 2:12:34.480
 Conda always was a user.

2:12:34.480 --> 2:12:36.540
 I'm gonna use Python to do data science.

2:12:36.540 --> 2:12:38.240
 I'm gonna use Python to do something.

2:12:38.240 --> 2:12:39.560
 How do I get this installed?

2:12:39.560 --> 2:12:41.160
 It was always focused on that.

2:12:41.160 --> 2:12:43.880
 So it didn't have a develop.

2:12:43.880 --> 2:12:45.960
 Classic example is pip has a pip develop.

2:12:45.960 --> 2:12:47.480
 It's like, I wanna install this

2:12:47.480 --> 2:12:50.280
 into my current development environment today.

2:12:50.280 --> 2:12:51.520
 Conda doesn't have that concept

2:12:51.520 --> 2:12:52.840
 because it's not part of the story.

2:12:52.840 --> 2:12:54.640
 For people who don't know,

2:12:54.640 --> 2:12:59.640
 pip is a Python specific package manager.

2:12:59.640 --> 2:13:04.640
 That's exceptionally popular.

2:13:04.640 --> 2:13:06.520
 That's probably like the default thing you've learned.

2:13:06.520 --> 2:13:07.360
 It's the default user.

2:13:07.360 --> 2:13:08.840
 And so the story there emerged

2:13:08.840 --> 2:13:11.480
 because what happened is in 2012,

2:13:11.480 --> 2:13:13.760
 we had this meeting at the Googleplex

2:13:13.760 --> 2:13:15.600
 and Guido was there to come talk about what we're gonna do,

2:13:15.600 --> 2:13:17.240
 how we're gonna make things work better.

2:13:17.240 --> 2:13:19.960
 And Wes McKinney, me, Peter,

2:13:19.960 --> 2:13:21.880
 Peter has a great photo of me talking to Guido

2:13:21.880 --> 2:13:23.560
 and he pretends we're talking about this story.

2:13:23.560 --> 2:13:24.680
 Maybe we were, maybe we weren't.

2:13:24.680 --> 2:13:26.320
 But we did at that meeting talk about it

2:13:26.320 --> 2:13:29.920
 and asked Guido, we need to fix packaging in Python.

2:13:29.920 --> 2:13:31.040
 People can't get the stuff.

2:13:31.040 --> 2:13:32.400
 And he said, go fix it yourself.

2:13:32.400 --> 2:13:33.600
 I don't think we're gonna do it.

2:13:33.600 --> 2:13:35.720
 All right.

2:13:35.720 --> 2:13:36.960
 The origin story right there.

2:13:36.960 --> 2:13:39.440
 All right, you said, okay, you said to do this ourselves.

2:13:39.440 --> 2:13:41.640
 So at the same time,

2:13:41.640 --> 2:13:44.600
 people did start to work on the packaging story in Python.

2:13:44.600 --> 2:13:45.680
 It just took a little longer.

2:13:45.680 --> 2:13:48.160
 So in 2012, kind of motivated

2:13:48.160 --> 2:13:49.600
 by our training courses we were teaching,

2:13:49.600 --> 2:13:51.440
 like very similar to what you just mentioned

2:13:51.440 --> 2:13:52.280
 about your mother.

2:13:52.280 --> 2:13:54.160
 Like it was motivated by the same purpose.

2:13:54.160 --> 2:13:56.040
 Like how do we get this into people's hands?

2:13:56.040 --> 2:13:57.120
 It's this big, long process.

2:13:57.120 --> 2:13:58.520
 It takes too expensive.

2:13:58.520 --> 2:14:00.200
 It was actually hurting NumPy development

2:14:00.200 --> 2:14:02.280
 because I would hear people were saying,

2:14:02.280 --> 2:14:03.480
 don't make that change to NumPy

2:14:03.480 --> 2:14:05.480
 because I just spent a week getting my Python environment.

2:14:05.480 --> 2:14:09.160
 And if you change NumPy, I have to reinstall everything.

2:14:09.160 --> 2:14:10.880
 And reinstalling is such a pain, don't do it.

2:14:10.880 --> 2:14:12.120
 I'm like, wait, okay.

2:14:12.120 --> 2:14:14.640
 So now we're not making changes to a library

2:14:14.640 --> 2:14:16.000
 because of the installation problem

2:14:16.000 --> 2:14:17.440
 that it'll cause for end users.

2:14:17.440 --> 2:14:19.400
 Okay, there's a problem with installation.

2:14:19.400 --> 2:14:20.520
 We gotta fix this.

2:14:20.520 --> 2:14:23.760
 So we said, we're gonna make a distribution in Python.

2:14:23.760 --> 2:14:24.760
 And we'd previously done that.

2:14:24.760 --> 2:14:26.920
 I'd previously done that at mthought.

2:14:26.920 --> 2:14:28.520
 I wanted to make one that would give away for free,

2:14:28.520 --> 2:14:29.840
 that everyone could just get.

2:14:29.840 --> 2:14:32.080
 Like that was critical that we could just get it.

2:14:32.080 --> 2:14:33.880
 It wasn't tied to a product.

2:14:33.880 --> 2:14:35.360
 It was just you could get it.

2:14:35.360 --> 2:14:36.960
 And then we had constantly thought about,

2:14:36.960 --> 2:14:39.120
 well, do we just leverage RPM?

2:14:39.120 --> 2:14:40.400
 But the challenge had always been,

2:14:40.400 --> 2:14:42.240
 we want a package manager that works on Windows,

2:14:42.240 --> 2:14:45.040
 Mac OS X, and Linux the same, right?

2:14:45.040 --> 2:14:46.560
 And it wasn't there.

2:14:46.560 --> 2:14:47.960
 Like you don't have anything like that.

2:14:47.960 --> 2:14:48.800
 You have...

2:14:48.800 --> 2:14:49.640
 And for people who don't know,

2:14:49.640 --> 2:14:54.560
 RPM is an operating system specific package manager.

2:14:54.560 --> 2:14:55.960
 Correct, it's an operating specific.

2:14:55.960 --> 2:14:56.800
 Yes, exactly.

2:14:56.800 --> 2:15:00.160
 So do you create the design questions,

2:15:00.160 --> 2:15:02.240
 do you create an umbrella package manager

2:15:02.240 --> 2:15:03.840
 that works across operating systems?

2:15:03.840 --> 2:15:05.680
 Yes, that was the decision.

2:15:05.680 --> 2:15:08.080
 And in neighboring design questions,

2:15:08.080 --> 2:15:09.920
 do you also create a package manager

2:15:09.920 --> 2:15:11.840
 that spans multiple programming languages?

2:15:11.840 --> 2:15:12.760
 Correct, exactly.

2:15:12.760 --> 2:15:14.280
 That was the world we faced.

2:15:14.280 --> 2:15:17.080
 And we decided to go multiple operating systems,

2:15:17.080 --> 2:15:19.220
 multiple and programming language independent.

2:15:19.220 --> 2:15:21.800
 Because even Python, and particularly what was important

2:15:21.800 --> 2:15:24.920
 was SciPy has a bunch of Fortran in it, right?

2:15:24.920 --> 2:15:27.760
 And scikit learn has links to a bunch of C++.

2:15:27.760 --> 2:15:29.960
 There's a lot of compiled code.

2:15:29.960 --> 2:15:32.920
 And the Python package managers, especially early on,

2:15:32.920 --> 2:15:34.320
 didn't even support that.

2:15:34.320 --> 2:15:38.520
 So in 2000, so we released Anaconda,

2:15:38.520 --> 2:15:39.960
 which was just a distribution of libraries,

2:15:39.960 --> 2:15:42.480
 but we started to work on Conda in 2012.

2:15:42.480 --> 2:15:44.680
 First version of Conda came out in early 2013,

2:15:44.680 --> 2:15:47.840
 summer of 2013, and it was a package manager.

2:15:47.840 --> 2:15:49.560
 So you could say, Conda install scikit learn.

2:15:49.560 --> 2:15:54.280
 In fact, scikit learn was a fantastic project that emerged.

2:15:54.280 --> 2:15:57.120
 It was the classic example of the scikits.

2:15:57.120 --> 2:15:59.760
 I talked to you earlier about SciPy being too big

2:15:59.760 --> 2:16:01.240
 to be a single library.

2:16:01.240 --> 2:16:02.680
 Well, what the community had done is said,

2:16:02.680 --> 2:16:04.160
 let's make scikits.

2:16:04.160 --> 2:16:05.840
 And there's scikit image, there's scikit learn,

2:16:05.840 --> 2:16:07.640
 there's a lot of scikits.

2:16:07.640 --> 2:16:10.200
 And it was a fantastic move that the community did.

2:16:10.200 --> 2:16:11.460
 I didn't do it.

2:16:11.460 --> 2:16:12.560
 I was like, okay, that's a good idea.

2:16:12.560 --> 2:16:13.540
 I didn't like the name.

2:16:13.540 --> 2:16:15.500
 I didn't like the fact you typed scikit image.

2:16:15.500 --> 2:16:17.400
 I was like, that's gotta be simpler.

2:16:17.400 --> 2:16:19.800
 That's scikit learn, we gotta make that smaller.

2:16:19.800 --> 2:16:21.940
 I don't like typing all this stuff from imports.

2:16:21.940 --> 2:16:23.220
 So I was kind of a pressure that way,

2:16:23.220 --> 2:16:25.280
 but I love the energy and love the fact

2:16:25.280 --> 2:16:26.200
 that they went out and they did it,

2:16:26.200 --> 2:16:29.400
 and DOS people, Jared Millman, and then of course, Gael,

2:16:29.400 --> 2:16:31.280
 and there's people I'm not even naming.

2:16:31.280 --> 2:16:34.640
 Scikit learn really emerged as a fantastic project.

2:16:34.640 --> 2:16:36.680
 And the documentation around that is also incredible.

2:16:36.680 --> 2:16:37.840
 And the documentation was incredible, exactly.

2:16:37.840 --> 2:16:40.160
 I don't know who did that, but they did a great job.

2:16:40.160 --> 2:16:44.040
 A lot of people in Inria, a lot of European contributors.

2:16:45.120 --> 2:16:47.120
 There's some Andreas in the US.

2:16:47.120 --> 2:16:48.920
 There's a lot of just people I just adore,

2:16:48.920 --> 2:16:50.320
 I think are amazing people.

2:16:51.180 --> 2:16:52.480
 Awesome use of SciPy, right?

2:16:52.480 --> 2:16:54.600
 I love the fact that they were using SciPy effectively

2:16:54.600 --> 2:16:57.160
 to do something I love, which is machine learning,

2:16:57.160 --> 2:16:58.980
 but couldn't install it.

2:16:58.980 --> 2:17:00.600
 Because there's so many pieces involved.

2:17:00.600 --> 2:17:02.160
 So many dependencies, right?

2:17:02.160 --> 2:17:06.080
 So our use case of Conda was Conda install scikit learn.

2:17:06.080 --> 2:17:09.440
 Right, and it was the best way to install scikit learn

2:17:09.440 --> 2:17:14.440
 in 2013 to really 2018, 17, 18, PIP finally caught up.

2:17:14.440 --> 2:17:16.440
 I still think it's you should Conda install scikit learn

2:17:16.440 --> 2:17:17.560
 for the PIP install scikit learn,

2:17:17.560 --> 2:17:19.360
 but you can PIP install scikit learn.

2:17:19.360 --> 2:17:21.840
 The issue is the package they created was wheels

2:17:21.840 --> 2:17:24.480
 and PIP does not handle the multi vendor approach.

2:17:24.480 --> 2:17:26.600
 They don't handle the fact you have C++ libraries

2:17:26.600 --> 2:17:27.680
 you're depending on.

2:17:27.680 --> 2:17:29.240
 They just stop at the Python boundary.

2:17:29.240 --> 2:17:31.280
 And so what you have to do in the wheel world

2:17:31.280 --> 2:17:33.200
 is you have to vendor.

2:17:33.200 --> 2:17:35.640
 You have to take all of the binary and vendor it.

2:17:35.640 --> 2:17:38.480
 Now, if your change happens in underlying dependency,

2:17:38.480 --> 2:17:40.280
 you have to redo the whole wheel.

2:17:40.280 --> 2:17:42.080
 So TensorFlow, as you know,

2:17:42.080 --> 2:17:44.680
 you should not PIP install TensorFlow.

2:17:44.680 --> 2:17:45.520
 It's a terrible idea.

2:17:45.520 --> 2:17:48.640
 People do it because the popularity of PIP,

2:17:48.640 --> 2:17:49.480
 many people think, oh, of course,

2:17:49.480 --> 2:17:51.480
 that's how I install everything in Python.

2:17:51.480 --> 2:17:53.960
 Yeah, this is one of the big challenges.

2:17:53.960 --> 2:17:57.920
 You take a GitHub repository or just a basic blog post.

2:17:57.920 --> 2:18:00.840
 The number of time PIP is mentioned over Conda

2:18:00.840 --> 2:18:02.760
 is like 100 X to one.

2:18:02.760 --> 2:18:03.600
 Correct, correct.

2:18:03.600 --> 2:18:04.440
 So it just has to do with the.

2:18:04.440 --> 2:18:05.280
 And that was increasing.

2:18:05.280 --> 2:18:07.520
 It wasn't true early because PIP didn't exist.

2:18:07.520 --> 2:18:08.840
 Like Conda came first.

2:18:08.840 --> 2:18:10.160
 So but that's the problem.

2:18:10.160 --> 2:18:13.040
 Like Conda came first, but that's like the long tail

2:18:13.040 --> 2:18:15.840
 of the internet documentation user generated.

2:18:15.840 --> 2:18:19.160
 So that like you think, how do I install Google?

2:18:19.160 --> 2:18:20.400
 How do I install TensorFlow?

2:18:20.400 --> 2:18:23.000
 You're just not gonna see Conda in that first page.

2:18:23.000 --> 2:18:24.120
 Correct, exactly.

2:18:24.120 --> 2:18:24.960
 And that.

2:18:24.960 --> 2:18:29.400
 Not today, you would have in 2016, 2017.

2:18:29.400 --> 2:18:32.760
 And it's sad because Conda solves

2:18:32.760 --> 2:18:34.160
 a lot of usability issues.

2:18:34.160 --> 2:18:35.000
 Correct.

2:18:35.000 --> 2:18:36.480
 Like for especially super challenging thing.

2:18:36.480 --> 2:18:37.320
 I don't know.

2:18:37.320 --> 2:18:39.520
 One of the big pain points for me was

2:18:39.520 --> 2:18:43.560
 just on the computer vision side, OpenCV installation.

2:18:43.560 --> 2:18:44.400
 Perfect example.

2:18:44.400 --> 2:18:45.240
 Yes.

2:18:45.240 --> 2:18:47.400
 I think Conda, I don't know if Conda solved that one.

2:18:47.400 --> 2:18:49.080
 Conda has an OpenCV package.

2:18:49.080 --> 2:18:49.920
 I don't know.

2:18:49.920 --> 2:18:53.440
 I certainly know PIP has not solved.

2:18:53.440 --> 2:18:55.840
 I mean, there's complexities there because.

2:18:55.840 --> 2:18:56.680
 Right.

2:18:56.680 --> 2:18:57.640
 I actually don't know.

2:18:57.640 --> 2:18:59.120
 I should probably know a good answer for this,

2:18:59.120 --> 2:19:04.120
 but if you compile OpenCV with certain dependencies,

2:19:05.440 --> 2:19:07.440
 you'll be able to do certain things.

2:19:07.440 --> 2:19:09.840
 So there's this kind of flexibility of what you,

2:19:09.840 --> 2:19:12.960
 like what options you compile with.

2:19:12.960 --> 2:19:13.800
 Yes.

2:19:13.800 --> 2:19:17.840
 And I don't think it's trivial to do that with Conda or.

2:19:17.840 --> 2:19:20.520
 So Conda has a notion of variance of a package.

2:19:20.520 --> 2:19:23.120
 You can actually have different compilation versions

2:19:23.120 --> 2:19:23.960
 of a package.

2:19:23.960 --> 2:19:24.800
 So not just the version is different,

2:19:24.800 --> 2:19:26.880
 but oh, this is compiled with these optimizations on.

2:19:26.880 --> 2:19:28.000
 So Conda does have an answer.

2:19:28.000 --> 2:19:28.840
 Has those flavors.

2:19:28.840 --> 2:19:30.080
 Has flavors, basically.

2:19:30.080 --> 2:19:32.360
 Well, PIP, as far as I know, does not have flavors.

2:19:32.360 --> 2:19:33.280
 No, no.

2:19:33.280 --> 2:19:36.440
 PIP generally hasn't thought deeply

2:19:36.440 --> 2:19:38.400
 about the binary dependency problem, right?

2:19:38.400 --> 2:19:41.840
 And that's why fundamentally it doesn't work

2:19:41.840 --> 2:19:43.640
 for the SciPy ecosystem.

2:19:43.640 --> 2:19:46.120
 It barely, you can sort of paper over it and duct tape

2:19:46.120 --> 2:19:48.040
 and it kind of works until it doesn't

2:19:48.040 --> 2:19:49.560
 and it falls apart entirely.

2:19:49.560 --> 2:19:51.520
 So it's been a mixed bag.

2:19:51.520 --> 2:19:54.360
 Like, and I've been having lots of conversations

2:19:54.360 --> 2:19:56.120
 with people over the years because again,

2:19:56.120 --> 2:19:58.400
 it's an area where if you understand some things,

2:19:58.400 --> 2:19:59.240
 but not all the things,

2:19:59.240 --> 2:20:02.200
 but they've done a great job of community appeal.

2:20:02.200 --> 2:20:05.560
 This is an area where I think Anaconda as a company

2:20:05.560 --> 2:20:07.040
 needed to do some things

2:20:07.040 --> 2:20:10.440
 in order to make Conda more community centric, right?

2:20:10.440 --> 2:20:13.080
 And this is a, I talk about this all the time.

2:20:13.080 --> 2:20:16.640
 There's a balance between you have every project starts

2:20:16.640 --> 2:20:18.280
 with what I called company backed open source.

2:20:18.280 --> 2:20:20.320
 Even if the company is yourself, it's just one person,

2:20:20.320 --> 2:20:23.360
 just doing business as.

2:20:23.360 --> 2:20:26.080
 But ultimately for products to succeed virally

2:20:26.080 --> 2:20:28.320
 and become massive influencers,

2:20:28.320 --> 2:20:29.160
 they have to create,

2:20:29.160 --> 2:20:30.520
 they have to get community people on board.

2:20:30.520 --> 2:20:32.120
 They have to get other people on board.

2:20:32.120 --> 2:20:33.680
 So it has to become community driven.

2:20:33.680 --> 2:20:35.520
 And a big part of that is engagement with those people.

2:20:35.520 --> 2:20:38.600
 Empowering people, governance around it.

2:20:38.600 --> 2:20:41.360
 And what happened with Conda in the early days,

2:20:41.360 --> 2:20:43.720
 PIP emerged and we did do some good things.

2:20:43.720 --> 2:20:46.400
 Conda Forge, Conda Forge community

2:20:46.400 --> 2:20:49.880
 is sort of the community recipe creation community.

2:20:49.880 --> 2:20:52.160
 But Conda itself, I still believe,

2:20:52.160 --> 2:20:55.120
 and Peter is CEO of Anaconda, he's my co founder.

2:20:55.120 --> 2:20:58.160
 I ran Anaconda until 2017, 2018.

2:20:58.160 --> 2:20:59.000
 Is Peter still Anaconda?

2:20:59.000 --> 2:21:00.000
 Peter's still Anaconda, right?

2:21:00.000 --> 2:21:01.360
 And we're still great friends.

2:21:01.360 --> 2:21:02.560
 We talk all the time.

2:21:02.560 --> 2:21:03.600
 I love him to death.

2:21:03.600 --> 2:21:06.080
 There's a long story there about like why and how

2:21:06.080 --> 2:21:08.640
 and we can cover in some other podcast perhaps.

2:21:08.640 --> 2:21:09.480
 Yeah.

2:21:09.480 --> 2:21:11.400
 It's sort of a more, maybe a more business focused one.

2:21:11.400 --> 2:21:15.160
 But this is one area where I think Conda

2:21:15.160 --> 2:21:17.280
 should be more community driven.

2:21:17.280 --> 2:21:18.960
 Like he should be pushing more

2:21:18.960 --> 2:21:21.200
 to get more community contributors to Conda

2:21:21.200 --> 2:21:26.080
 and let the, Anaconda shouldn't be fighting this battle.

2:21:26.080 --> 2:21:26.920
 Yeah.

2:21:26.920 --> 2:21:27.760
 Right?

2:21:27.760 --> 2:21:28.600
 It's actually, it's really a developers.

2:21:28.600 --> 2:21:30.400
 Like you said, like help the developers

2:21:30.400 --> 2:21:32.200
 and then they'll actually move us the right direction.

2:21:32.200 --> 2:21:34.040
 Well, that was the problem I have is many

2:21:34.040 --> 2:21:36.520
 of the cool kids I know don't use Conda.

2:21:36.520 --> 2:21:38.880
 And that to me is confusing.

2:21:38.880 --> 2:21:39.800
 It is confusing.

2:21:39.800 --> 2:21:42.640
 It's really a matter of, Conda has some challenges.

2:21:42.640 --> 2:21:44.120
 First of all, Conda still needs to be improved.

2:21:44.120 --> 2:21:45.320
 There's lots of improvements to be made.

2:21:45.320 --> 2:21:47.600
 And it's that aspect of wait, who's doing this?

2:21:47.600 --> 2:21:50.960
 And the fact that then the Pi PA really stepped up.

2:21:50.960 --> 2:21:53.400
 Like they were not solving the problem at all.

2:21:53.400 --> 2:21:55.640
 And now they kind of got to where they're solving it

2:21:55.640 --> 2:21:56.720
 for the most part.

2:21:56.720 --> 2:21:58.160
 And then effectively you could get,

2:21:58.160 --> 2:22:00.360
 like Conda solved a problem that was there.

2:22:00.360 --> 2:22:01.200
 And it still does.

2:22:01.200 --> 2:22:03.960
 It's still, you know, there's still great things it can do.

2:22:03.960 --> 2:22:06.920
 But, and we still use it all the time at one site

2:22:06.920 --> 2:22:08.960
 and with other clients, but with,

2:22:08.960 --> 2:22:12.160
 but you can kind of do similar things with PIP and Docker.

2:22:12.160 --> 2:22:13.000
 Right?

2:22:13.000 --> 2:22:15.280
 So especially with the web development community,

2:22:15.280 --> 2:22:17.080
 that part of it, again, is this is the,

2:22:17.080 --> 2:22:19.200
 there's a lot of different kinds of developers

2:22:19.200 --> 2:22:20.200
 in the Python ecosystem.

2:22:20.200 --> 2:22:23.720
 And there's still a lack of some clear understanding.

2:22:23.720 --> 2:22:25.320
 I go to the Python conference all the time

2:22:25.320 --> 2:22:28.280
 and then there's only a few people in the Pi PA who get it.

2:22:28.280 --> 2:22:30.680
 And then others who are just massively trumpeting

2:22:30.680 --> 2:22:32.840
 the power of PIP, but just do not understand the problem.

2:22:32.840 --> 2:22:33.680
 Yeah.

2:22:33.680 --> 2:22:36.040
 So one of the obvious things to me from a mom,

2:22:36.040 --> 2:22:37.840
 from a non programmer perspective,

2:22:37.840 --> 2:22:41.760
 is the across operating system usability.

2:22:41.760 --> 2:22:42.680
 That's much more natural.

2:22:42.680 --> 2:22:45.440
 So there's people that use Windows and just,

2:22:45.440 --> 2:22:49.080
 it seems much easier to recommend Conda there,

2:22:49.080 --> 2:22:51.840
 but then it, you should also recommend it across the board.

2:22:51.840 --> 2:22:53.520
 So I'll definitely sort of.

2:22:53.520 --> 2:22:55.320
 But what I recommend now is a hybrid.

2:22:55.320 --> 2:22:56.160
 I do.

2:22:56.160 --> 2:22:57.000
 I mean, I have no problem.

2:22:57.000 --> 2:22:57.840
 Is it possible to use?

2:22:57.840 --> 2:22:58.660
 Oh, it is.

2:22:58.660 --> 2:22:59.500
 It is.

2:22:59.500 --> 2:23:01.600
 But like build the environment with PIP, with Conda,

2:23:01.600 --> 2:23:03.360
 build an environment with Conda

2:23:03.360 --> 2:23:04.600
 and then PIP install on top of that.

2:23:04.600 --> 2:23:05.440
 That's fine.

2:23:05.440 --> 2:23:09.400
 Be careful about PIP installing OpenCV or TensorFlow

2:23:09.400 --> 2:23:11.360
 or because if somebody's allowed that,

2:23:11.360 --> 2:23:13.320
 it's gonna be most surely done in a way

2:23:13.320 --> 2:23:15.120
 that can't be updated that easily.

2:23:15.120 --> 2:23:17.680
 So install like the big packages,

2:23:17.680 --> 2:23:21.000
 the infrastructure with Conda and then the weirdos.

2:23:21.000 --> 2:23:21.840
 Yeah.

2:23:21.840 --> 2:23:24.720
 That like the weird like implementation for some.

2:23:24.720 --> 2:23:28.440
 I had a, there's a cool library I used

2:23:28.440 --> 2:23:33.440
 that based on your location and time of day and date

2:23:33.520 --> 2:23:35.640
 tells you the exact position of the sun

2:23:35.640 --> 2:23:38.160
 relative to the earth.

2:23:38.160 --> 2:23:39.700
 And it's just like a simple library,

2:23:39.700 --> 2:23:41.360
 but it's very precise.

2:23:41.360 --> 2:23:42.200
 And I was like, all right.

2:23:42.200 --> 2:23:45.120
 But that was, that was, and it's like PIP.

2:23:45.120 --> 2:23:48.600
 Well, the thing they did really well is Python developers

2:23:48.600 --> 2:23:50.600
 who wanna get their stuff published,

2:23:50.600 --> 2:23:51.920
 you have to have a PIP recipe.

2:23:51.920 --> 2:23:52.760
 Yeah.

2:23:52.760 --> 2:23:53.600
 Right?

2:23:53.600 --> 2:23:56.440
 I mean, even if it's, you know, the challenge is,

2:23:56.440 --> 2:23:58.800
 and there's a key thing that needs to be added to PIP,

2:23:58.800 --> 2:24:01.680
 just simply add to PIP the ability to defer

2:24:01.680 --> 2:24:03.440
 to a system package manager.

2:24:03.440 --> 2:24:04.460
 Like, cause it's, you know,

2:24:04.460 --> 2:24:07.280
 recognize you're not gonna solve all the dependency problem.

2:24:07.280 --> 2:24:12.280
 So let like give up and allow the system package to work.

2:24:12.420 --> 2:24:15.140
 That way Anaconda is installed and it has PIP.

2:24:15.140 --> 2:24:16.960
 It would default to Conda to install stuff,

2:24:16.960 --> 2:24:19.240
 but Red Hat RPM would default to RPM

2:24:19.240 --> 2:24:20.600
 to install some more things.

2:24:20.600 --> 2:24:23.480
 Like that's the, that's a key, not difficult,

2:24:23.480 --> 2:24:25.960
 but somewhat work, some work feature needs to be added.

2:24:25.960 --> 2:24:27.440
 That's an example of something like,

2:24:27.440 --> 2:24:28.620
 I've known we need to do it.

2:24:28.620 --> 2:24:30.920
 I mean, it's where I wish I had more money.

2:24:30.920 --> 2:24:33.480
 I wish I was more successful in the business side,

2:24:33.480 --> 2:24:35.060
 trying to get there, but I wish my, you know,

2:24:35.060 --> 2:24:37.280
 my family, friends and full community that I know.

2:24:37.280 --> 2:24:38.120
 Was larger.

2:24:38.120 --> 2:24:39.320
 Was larger and had more money.

2:24:39.320 --> 2:24:42.680
 Cause I know tons of things to do effectively

2:24:42.680 --> 2:24:46.280
 with more resources, but you know,

2:24:46.280 --> 2:24:48.720
 I have not yet been successful at channel.

2:24:48.720 --> 2:24:49.960
 Tons of, you know, some, you know,

2:24:49.960 --> 2:24:51.480
 I'm happy with what we've done.

2:24:51.480 --> 2:24:54.840
 We created again at Quansight,

2:24:54.840 --> 2:24:56.480
 what we created to get Anaconda started.

2:24:56.480 --> 2:24:58.160
 We created community to get Anaconda started.

2:24:58.160 --> 2:24:59.280
 Done it again with Quansight.

2:24:59.280 --> 2:25:00.480
 Super excited by that.

2:25:00.480 --> 2:25:02.200
 But it took three years to do it.

2:25:02.200 --> 2:25:03.200
 What is Quansight?

2:25:03.200 --> 2:25:04.440
 What is its mission?

2:25:04.440 --> 2:25:06.920
 We've talked a few times about different fascinating

2:25:06.920 --> 2:25:08.920
 aspects of it, but let's like big picture,

2:25:08.920 --> 2:25:09.760
 what is Quansight?

2:25:09.760 --> 2:25:10.600
 Big picture Quansight.

2:25:10.600 --> 2:25:13.480
 Quansight is, its mission is to connect data

2:25:13.480 --> 2:25:14.480
 to an open economy.

2:25:14.480 --> 2:25:17.520
 So it's basically consulting of the pie data ecosystem,

2:25:17.520 --> 2:25:18.360
 right?

2:25:18.360 --> 2:25:19.280
 It's a consulting company.

2:25:19.280 --> 2:25:21.200
 And what I've said when I started it was we're trying

2:25:21.200 --> 2:25:24.700
 to create products, people, and technology.

2:25:24.700 --> 2:25:26.700
 So it's divided into two groups.

2:25:26.700 --> 2:25:28.300
 And a third one as well.

2:25:28.300 --> 2:25:30.360
 The two groups are a consulting services company

2:25:30.360 --> 2:25:31.960
 that just helps people do data science

2:25:31.960 --> 2:25:35.080
 and data engineering and data management better

2:25:35.080 --> 2:25:35.920
 and more efficiently.

2:25:35.920 --> 2:25:36.760
 Like full stack, like full thing.

2:25:36.760 --> 2:25:38.200
 Full stack data science, full thing.

2:25:38.200 --> 2:25:40.020
 We'll help you build a infrastructure.

2:25:40.020 --> 2:25:41.380
 If you're using Jupiter, we need,

2:25:41.380 --> 2:25:43.820
 we do staff augmentation, need more pro programmers,

2:25:43.820 --> 2:25:44.900
 help you use Dask more effectively,

2:25:44.900 --> 2:25:46.520
 help you use GPUs more effectively.

2:25:46.520 --> 2:25:48.400
 Just basically a lot of people need help.

2:25:48.400 --> 2:25:50.800
 So we do training as well to help people, you know,

2:25:50.800 --> 2:25:55.000
 both immediate help and then get, learn from somebody.

2:25:55.860 --> 2:25:57.080
 We've added a bunch of stuff too.

2:25:57.080 --> 2:25:58.600
 We've kind of separated some of these other things

2:25:58.600 --> 2:26:00.120
 into another company called Open Teams

2:26:00.120 --> 2:26:01.760
 that we currently started.

2:26:01.760 --> 2:26:03.380
 One of the things I loved about what we did at Anaconda

2:26:03.380 --> 2:26:05.520
 was creating a community innovation team.

2:26:05.520 --> 2:26:06.700
 And so I wanted to replicate that.

2:26:06.700 --> 2:26:09.360
 This time we did a lot of innovation at Anaconda.

2:26:09.360 --> 2:26:10.600
 I wanted to do innovation,

2:26:10.600 --> 2:26:13.680
 but also contribute to the projects that existed,

2:26:13.680 --> 2:26:16.440
 like create a place where maintainers,

2:26:16.440 --> 2:26:18.480
 so the SciPy and NumPy and Numba

2:26:18.480 --> 2:26:20.400
 and all these projects we already started

2:26:20.400 --> 2:26:22.700
 can pay people to work on them and keep them going.

2:26:22.700 --> 2:26:23.540
 So that's Labs.

2:26:23.540 --> 2:26:25.960
 Quansight Labs is a separate organization.

2:26:25.960 --> 2:26:28.060
 It's a nonprofit mission.

2:26:28.060 --> 2:26:29.940
 The profits of Quansight help fund it.

2:26:29.940 --> 2:26:33.240
 And in fact, every project that we have at Quansight,

2:26:33.240 --> 2:26:36.040
 a portion of the money goes directly to Quansight Labs

2:26:36.040 --> 2:26:37.060
 to help keep it funded.

2:26:37.060 --> 2:26:38.280
 So we've gotten several mechanisms

2:26:38.280 --> 2:26:40.040
 that we keep Quansight Labs funded.

2:26:40.040 --> 2:26:41.960
 And currently, so I'm really excited about Labs

2:26:41.960 --> 2:26:43.680
 because it's been a mission for a long time.

2:26:43.680 --> 2:26:45.240
 What kind of projects are within Labs?

2:26:45.240 --> 2:26:47.680
 So Labs is working to make the software better,

2:26:47.680 --> 2:26:49.760
 like make NumPy better, make SciPy better.

2:26:49.760 --> 2:26:52.340
 It only works on open source.

2:26:52.340 --> 2:26:55.440
 So if somebody wants to, so companies do,

2:26:55.440 --> 2:26:57.480
 we have a thing called a community work order, we call it.

2:26:57.480 --> 2:27:00.020
 If a company says, I wanna make Spyder better.

2:27:00.020 --> 2:27:01.680
 Okay, cool.

2:27:01.680 --> 2:27:05.440
 You can pay for a month of a developer of Spyder

2:27:05.440 --> 2:27:08.400
 or a developer of NumPy or a developer of SciPy.

2:27:08.400 --> 2:27:09.840
 You can't tell them what you want them to do.

2:27:09.840 --> 2:27:12.800
 You can give them your priorities and things you wish existed

2:27:12.800 --> 2:27:16.080
 and they'll work on those priorities with the community

2:27:16.080 --> 2:27:17.560
 to get what the community wants

2:27:17.560 --> 2:27:18.880
 and what emerges of what the community wants.

2:27:18.880 --> 2:27:21.080
 Is there some aspect on the consulting side

2:27:21.080 --> 2:27:24.320
 that is helping, as we were talking about morphology

2:27:24.320 --> 2:27:26.600
 and so on, is there specific application

2:27:26.600 --> 2:27:29.120
 that are particularly like driving,

2:27:29.120 --> 2:27:32.000
 sort of inspiring the need for updates to SciPy?

2:27:32.000 --> 2:27:33.360
 Correct, absolutely, absolutely.

2:27:33.360 --> 2:27:34.840
 GPUs are absolutely one of them.

2:27:34.840 --> 2:27:36.840
 And new hardware beyond GPUs.

2:27:36.840 --> 2:27:39.720
 I mean, Tesla's Dojo chip, I'm hoping we'll have a chance

2:27:39.720 --> 2:27:41.080
 to work on that perhaps.

2:27:42.320 --> 2:27:43.840
 Things like that are definitely driving it.

2:27:43.840 --> 2:27:45.520
 The other thing that's driving it is scalable,

2:27:45.520 --> 2:27:47.640
 like speed and scale.

2:27:47.640 --> 2:27:50.360
 How do I write NumPy code or NumPy Lite code

2:27:50.360 --> 2:27:52.520
 if I want it to run across a cluster?

2:27:52.520 --> 2:27:54.240
 That's Dask or maybe it's Ray.

2:27:54.240 --> 2:27:56.360
 I mean, there's sort of ways to do that now.

2:27:56.360 --> 2:27:59.720
 Or there's Moden and there's, so Pandas code,

2:27:59.720 --> 2:28:02.080
 NumPy code, SciPy code, Scikit learn code

2:28:02.080 --> 2:28:03.240
 that I want to scale.

2:28:03.240 --> 2:28:04.880
 So that's one big area.

2:28:04.880 --> 2:28:08.400
 Have you gotten a chance to chat with Andre and Elon

2:28:08.400 --> 2:28:09.840
 about particular, because like.

2:28:09.840 --> 2:28:11.360
 No, I would love to, by the way.

2:28:11.360 --> 2:28:12.280
 I have not, but I'd love to.

2:28:12.280 --> 2:28:15.520
 I just saw their Tesla AI Days video.

2:28:15.520 --> 2:28:16.360
 Super excited.

2:28:16.360 --> 2:28:18.600
 That's one of the, you know, I love great engineering,

2:28:18.600 --> 2:28:21.000
 software engineering teams and engineering teams in general.

2:28:21.000 --> 2:28:23.040
 And they're doing a lot of incredible stuff with Python.

2:28:23.040 --> 2:28:25.040
 They're like revolutionary.

2:28:25.040 --> 2:28:28.800
 So many aspects of the machine learning pipeline.

2:28:28.800 --> 2:28:29.640
 I agree.

2:28:29.640 --> 2:28:30.600
 That's operating in the real world.

2:28:30.600 --> 2:28:31.880
 And so much of that is Python.

2:28:31.880 --> 2:28:35.000
 Like you said, the guy running, you know, Andre Kapathy,

2:28:35.000 --> 2:28:38.680
 running Autopilot is tweeting about optimization

2:28:38.680 --> 2:28:41.200
 of NumPy versus.

2:28:41.200 --> 2:28:42.920
 I would love to talk to him.

2:28:42.920 --> 2:28:45.080
 In fact, we have at Quonset, we've been fortunate enough

2:28:45.080 --> 2:28:47.560
 to work with Facebook on PyTorch directly.

2:28:47.560 --> 2:28:49.880
 So we have about 13 developers at Quonset.

2:28:49.880 --> 2:28:52.560
 Some of them are in labs working directly on PyTorch.

2:28:52.560 --> 2:28:53.400
 On PyTorch.

2:28:53.400 --> 2:28:54.240
 On PyTorch, right.

2:28:54.240 --> 2:28:55.680
 So I basically started Quonset.

2:28:55.680 --> 2:28:57.160
 I went to both TensorFlow and PyTorch and said,

2:28:57.160 --> 2:29:00.200
 hey, I want to help connect what you're doing

2:29:00.200 --> 2:29:01.920
 to the broader SciPy ecosystem.

2:29:01.920 --> 2:29:03.240
 Because I see what you're doing.

2:29:03.240 --> 2:29:04.760
 We have this bigger mission that we want to make sure

2:29:04.760 --> 2:29:06.760
 we don't, you know, lose energy here.

2:29:06.760 --> 2:29:09.840
 So, and Facebook responded really positively

2:29:09.840 --> 2:29:12.400
 and I didn't get the same reaction.

2:29:12.400 --> 2:29:13.560
 Not yet, not yet.

2:29:13.560 --> 2:29:14.400
 Not yet.

2:29:14.400 --> 2:29:17.480
 So I really love the folks at TensorFlow, too.

2:29:17.480 --> 2:29:18.480
 They're fantastic.

2:29:18.480 --> 2:29:21.120
 I think it's the, just how it integrates

2:29:21.120 --> 2:29:21.960
 with their business.

2:29:21.960 --> 2:29:23.800
 I mean, like I said, there's a lot of reasons.

2:29:23.800 --> 2:29:25.720
 Just the timing, the integration with their business,

2:29:25.720 --> 2:29:27.160
 what they're looking for.

2:29:27.160 --> 2:29:28.760
 They're probably looking for more users.

2:29:28.760 --> 2:29:31.600
 And I was looking to kind of cut up some development effort

2:29:31.600 --> 2:29:33.840
 and they couldn't receive that as easily, I think.

2:29:33.840 --> 2:29:36.040
 So I'm hoping, I'm really hopeful

2:29:36.040 --> 2:29:37.640
 and love the people there.

2:29:37.640 --> 2:29:39.800
 What's the idea behind OpenTeams?

2:29:39.800 --> 2:29:41.960
 So OpenTeams, I'm super excited about OpenTeams

2:29:41.960 --> 2:29:43.400
 because it's one of the,

2:29:43.400 --> 2:29:46.760
 I mentioned my idea for investing directly in open source.

2:29:46.760 --> 2:29:48.880
 So that's a concept called fair OSS.

2:29:48.880 --> 2:29:51.000
 But one of the things we, when we started Quansight,

2:29:51.000 --> 2:29:53.680
 we knew we would do is we develop products and ideas

2:29:53.680 --> 2:29:55.440
 and new companies might come out.

2:29:55.440 --> 2:29:57.680
 At Anaconda, this was clear, right?

2:29:57.680 --> 2:30:00.240
 Anaconda, we did so much innovation

2:30:00.240 --> 2:30:02.960
 that like five or six companies could have come out of that.

2:30:02.960 --> 2:30:05.000
 And we just didn't structure it so they could.

2:30:05.000 --> 2:30:07.240
 But in fact, they have, you look at Dask,

2:30:07.240 --> 2:30:08.880
 there's two companies going out of Dask.

2:30:08.880 --> 2:30:10.080
 You know, Bokeh could be a company.

2:30:10.080 --> 2:30:11.720
 There's like lots of companies that could exist

2:30:11.720 --> 2:30:13.120
 off the work we did there.

2:30:13.120 --> 2:30:16.400
 And so I thought, oh, here's a recipe for an incubation,

2:30:16.400 --> 2:30:19.480
 a concept that we could actually spawn new companies

2:30:19.480 --> 2:30:20.800
 and new innovations.

2:30:20.800 --> 2:30:22.800
 And then the idea has always been,

2:30:22.800 --> 2:30:24.680
 well, money they earn should come back

2:30:24.680 --> 2:30:26.520
 to fund the open source projects.

2:30:26.520 --> 2:30:29.240
 So labs is, you know, I think there should be

2:30:29.240 --> 2:30:30.720
 a lot of things like Quansight Labs.

2:30:30.720 --> 2:30:32.560
 I think this concept is one that scales.

2:30:32.560 --> 2:30:35.080
 You could have a lot of open source research labs.

2:30:35.080 --> 2:30:37.480
 Along the way, so in 2018, when the bigger idea came,

2:30:37.480 --> 2:30:38.800
 how to make open source investable, I said,

2:30:38.800 --> 2:30:41.120
 oh, I need to write, I need to create a venture fund.

2:30:41.120 --> 2:30:43.840
 So we created a venture fund called Quansight Initiate

2:30:43.840 --> 2:30:44.680
 at the same time.

2:30:44.680 --> 2:30:45.520
 It's an angel fund, really.

2:30:45.520 --> 2:30:47.840
 It's, you know, we started to learn that process.

2:30:47.840 --> 2:30:48.680
 How do we actually do this?

2:30:48.680 --> 2:30:49.520
 How do we get LPs?

2:30:49.520 --> 2:30:52.480
 How do we actually go in this direction and build a fund?

2:30:52.480 --> 2:30:54.280
 And I'm like, every venture fund should have

2:30:54.280 --> 2:30:55.720
 an associated open source research lab,

2:30:55.720 --> 2:30:56.560
 which is no reason.

2:30:56.560 --> 2:30:59.520
 Like our venture fund, the carried interest,

2:30:59.520 --> 2:31:01.840
 a portion of it goes to the lab.

2:31:01.840 --> 2:31:03.280
 It directly will fund the lab.

2:31:03.280 --> 2:31:04.120
 That's fascinating, brother.

2:31:04.120 --> 2:31:06.800
 So you use the power of the organic formation of teams

2:31:06.800 --> 2:31:10.680
 in the open source community, and then like naturally,

2:31:10.680 --> 2:31:13.920
 that leads to a business that can make money.

2:31:13.920 --> 2:31:14.760
 Yeah, correct.

2:31:14.760 --> 2:31:16.680
 And then it always maintains and loops back

2:31:16.680 --> 2:31:17.520
 to the open source.

2:31:17.520 --> 2:31:18.440
 Loops back to open source, exactly.

2:31:18.440 --> 2:31:19.640
 I mean, to me, it's a natural fit.

2:31:19.640 --> 2:31:20.960
 There's something, there's absolutely

2:31:20.960 --> 2:31:23.640
 a repeatable pattern there, and it's also beneficial

2:31:23.640 --> 2:31:26.800
 because, oh, I have, I have natural connections

2:31:26.800 --> 2:31:29.200
 to the open source if I have an open source research lab.

2:31:29.200 --> 2:31:31.160
 Like, they'll always, they'll be out there

2:31:31.160 --> 2:31:34.280
 talking to people, and so we've had a chance

2:31:34.280 --> 2:31:35.920
 to talk to a lot of early stage companies.

2:31:35.920 --> 2:31:37.880
 And we, and our fund focuses on the early stage.

2:31:37.880 --> 2:31:41.880
 So Quansight has the services, the lab, the fund, right?

2:31:41.880 --> 2:31:44.200
 In that process, a lot of stuff started to happen.

2:31:44.200 --> 2:31:46.320
 They're like, oh, you know, we started to do recruiting

2:31:46.320 --> 2:31:48.600
 and support and training, and I was starting

2:31:48.600 --> 2:31:50.960
 to build a bigger sales team and marketing team

2:31:50.960 --> 2:31:52.880
 and people besides just developers.

2:31:52.880 --> 2:31:54.080
 And one of the challenges with that

2:31:54.080 --> 2:31:55.960
 is you end up with different cultural aspects.

2:31:55.960 --> 2:31:58.800
 You know, developers, you know, there's a,

2:31:58.800 --> 2:32:00.760
 in any company you go to, you kind of go look,

2:32:00.760 --> 2:32:03.080
 is this a business led company, a developer led company?

2:32:03.080 --> 2:32:04.280
 Do they kind of coexist?

2:32:04.280 --> 2:32:06.120
 Are they, what's the interface between them?

2:32:06.120 --> 2:32:07.280
 There's always a bit of a tension there.

2:32:07.280 --> 2:32:08.760
 Like we were talking about before.

2:32:08.760 --> 2:32:10.200
 You know, what is the tension there?

2:32:10.200 --> 2:32:11.360
 With OpenTeams, I thought, wait a minute,

2:32:11.360 --> 2:32:13.160
 we can actually just create,

2:32:13.160 --> 2:32:15.560
 like this concept of Quansight plus labs,

2:32:15.560 --> 2:32:18.480
 it's, well, it's specific to the Pi data ecosystem.

2:32:18.480 --> 2:32:20.800
 The concept is general for all open source.

2:32:20.800 --> 2:32:22.640
 So OpenTeams emerged as a, oh,

2:32:22.640 --> 2:32:24.400
 we can create a business development company

2:32:24.400 --> 2:32:28.440
 for many, many Quansights, like thousands of Quansights.

2:32:28.440 --> 2:32:30.840
 And it can be a marketplace to connect,

2:32:30.840 --> 2:32:33.440
 essentially be the enterprise software company

2:32:33.440 --> 2:32:34.440
 of the future.

2:32:34.440 --> 2:32:36.760
 If you look at what enterprise software wants

2:32:36.760 --> 2:32:38.640
 from the customer side, and during this journey,

2:32:38.640 --> 2:32:42.360
 I've had the chance to work and sell to lots of companies,

2:32:42.360 --> 2:32:45.240
 Exxon and Shell and Davey Morgan Bank of America,

2:32:45.240 --> 2:32:46.680
 like the Fortune 100,

2:32:46.680 --> 2:32:48.240
 and talk to a lot of people in procurement

2:32:48.240 --> 2:32:50.400
 and see what are they buying and why are they buying?

2:32:50.400 --> 2:32:51.760
 So, you know, I don't know everything,

2:32:51.760 --> 2:32:52.720
 but I've learned a lot about,

2:32:52.720 --> 2:32:54.480
 oh, what are they really looking for?

2:32:54.480 --> 2:32:56.400
 And they're looking for solutions.

2:32:56.400 --> 2:32:58.160
 They're constantly given products

2:32:58.160 --> 2:33:01.160
 from enterprise software.

2:33:01.160 --> 2:33:02.560
 Here's open source, leave the enterprise software,

2:33:02.560 --> 2:33:03.400
 now I buy it.

2:33:03.400 --> 2:33:05.880
 And then they have to stitch it together into a solution.

2:33:05.880 --> 2:33:07.360
 Open source is fantastic for gluing

2:33:07.360 --> 2:33:08.760
 those solutions together.

2:33:08.760 --> 2:33:11.480
 So, whereas they keep getting new platforms

2:33:11.480 --> 2:33:12.360
 they're trying to buy,

2:33:12.360 --> 2:33:15.000
 but most open source, what most enterprises want

2:33:15.000 --> 2:33:16.800
 is tools that they can customize

2:33:16.800 --> 2:33:18.920
 that are as inexpensive as they can.

2:33:18.920 --> 2:33:20.400
 Yeah, and so you always want to maintain

2:33:20.400 --> 2:33:21.560
 the connection to the open source

2:33:21.560 --> 2:33:22.400
 because that's going to be the tools.

2:33:22.400 --> 2:33:24.840
 Yes, so open teams is about solving

2:33:24.840 --> 2:33:26.720
 enterprise software problems.

2:33:26.720 --> 2:33:28.120
 Brilliant, brilliant idea, by the way.

2:33:28.120 --> 2:33:30.960
 With a connect, but we do it honoring the topology.

2:33:30.960 --> 2:33:32.360
 We don't hire all the people.

2:33:32.360 --> 2:33:35.120
 We are a network connecting the sales energy

2:33:35.120 --> 2:33:36.520
 and the procurement energy,

2:33:36.520 --> 2:33:37.960
 and we work on the business side,

2:33:37.960 --> 2:33:39.080
 get the deals closed,

2:33:39.080 --> 2:33:40.560
 and then have a network of partners

2:33:40.560 --> 2:33:44.080
 like Quonsight and others who we hand the deals to,

2:33:44.080 --> 2:33:44.920
 to actually do the work.

2:33:44.920 --> 2:33:46.480
 And then we have to maintain,

2:33:46.480 --> 2:33:47.320
 I feel like we have to maintain

2:33:47.320 --> 2:33:48.760
 some level of quality control

2:33:48.760 --> 2:33:50.960
 so that the client can rely on open teams

2:33:50.960 --> 2:33:52.080
 to ensure the delivery.

2:33:52.080 --> 2:33:54.640
 It's not just, here's a lead, go figure that out.

2:33:54.640 --> 2:33:57.040
 But no, we're going to make sure you get what you need.

2:33:57.040 --> 2:33:58.840
 By the way, it's such a skill,

2:33:58.840 --> 2:34:00.640
 and I don't know if I have the patience.

2:34:00.640 --> 2:34:04.080
 I will have the patience to talk to the business people

2:34:04.080 --> 2:34:05.600
 or more specific, I mean,

2:34:05.600 --> 2:34:07.480
 there's all kinds of flavors of business people

2:34:07.480 --> 2:34:10.520
 or like marketing people.

2:34:11.960 --> 2:34:12.800
 There's a challenge.

2:34:12.800 --> 2:34:13.640
 I hear what you're saying

2:34:13.640 --> 2:34:14.880
 because I've had the same challenge.

2:34:14.880 --> 2:34:15.720
 And it's true.

2:34:15.720 --> 2:34:18.440
 There's sometimes you think, okay, this is way overwrought.

2:34:18.440 --> 2:34:20.240
 Yeah, but you have to become an adult

2:34:20.240 --> 2:34:22.320
 and you have to, because the companies have needs.

2:34:22.320 --> 2:34:24.320
 They have ways to make money

2:34:24.320 --> 2:34:26.480
 and they also want to learn and grow,

2:34:26.480 --> 2:34:28.960
 and it's your job to kind of educate them on the best way,

2:34:28.960 --> 2:34:31.000
 like the value of open source, for example.

2:34:31.000 --> 2:34:32.960
 Right, and I'm really grateful for all my experiences

2:34:32.960 --> 2:34:35.720
 over the past 14 years, understanding that side of it

2:34:35.720 --> 2:34:37.160
 and still learning for sure,

2:34:37.160 --> 2:34:38.640
 but not just understanding from companies,

2:34:38.640 --> 2:34:40.560
 but also dealing with marketing professionals

2:34:40.560 --> 2:34:41.600
 and sales professionals

2:34:41.600 --> 2:34:43.120
 and people that make a career out of that

2:34:43.120 --> 2:34:44.360
 and understanding what they're thinking about

2:34:44.360 --> 2:34:46.840
 and also understanding, well, let's make this better.

2:34:46.840 --> 2:34:48.160
 We can really make a place.

2:34:48.160 --> 2:34:50.480
 Open teams I see as the transmission layer

2:34:50.480 --> 2:34:53.720
 between companies and open source communities

2:34:53.720 --> 2:34:55.600
 producing enterprise software solutions.

2:34:55.600 --> 2:34:56.880
 Eventually we want to,

2:34:56.880 --> 2:34:59.320
 today we're taking on SaaS and MATLAB

2:34:59.320 --> 2:35:01.720
 and tools that we know we can replace for folks.

2:35:01.720 --> 2:35:04.560
 Really, anytime you have a software tool at an organization

2:35:04.560 --> 2:35:06.200
 where you have to do a lot of customization

2:35:06.200 --> 2:35:07.360
 to make it work for you.

2:35:07.360 --> 2:35:09.000
 It's not you're just buying this thing off the shelf

2:35:09.000 --> 2:35:09.840
 and it works.

2:35:09.840 --> 2:35:11.080
 It's like, okay, you buy this system

2:35:11.080 --> 2:35:12.840
 and then you customize it a lot,

2:35:12.840 --> 2:35:15.280
 usually with expensive consultants

2:35:15.280 --> 2:35:17.200
 to actually make it work for you.

2:35:17.200 --> 2:35:19.760
 All of those should be replaced by open source foundations

2:35:19.760 --> 2:35:20.600
 with the same customization.

2:35:20.600 --> 2:35:22.360
 You're doing such important work,

2:35:22.360 --> 2:35:25.440
 such important work in these giant organizations

2:35:25.440 --> 2:35:26.520
 that do exactly that,

2:35:26.520 --> 2:35:28.360
 taking some proprietary software

2:35:28.360 --> 2:35:30.520
 and hiring a huge team of consultants

2:35:30.520 --> 2:35:32.760
 that customize it and then that whole thing

2:35:32.760 --> 2:35:33.680
 gets outdated quick.

2:35:33.680 --> 2:35:34.520
 Correct.

2:35:34.520 --> 2:35:36.760
 And so, I mean, that's brilliant.

2:35:36.760 --> 2:35:39.360
 So the one solution to that

2:35:39.360 --> 2:35:43.240
 is kind of what Tesla's doing a little bit of,

2:35:43.240 --> 2:35:46.680
 which is basically build up a software engineering team.

2:35:46.680 --> 2:35:48.320
 Like build a team from scratch.

2:35:48.320 --> 2:35:49.160
 Build a team from scratch.

2:35:49.160 --> 2:35:50.000
 And companies are doing it well,

2:35:50.000 --> 2:35:50.840
 that's what they're doing right now.

2:35:50.840 --> 2:35:51.680
 Yeah, exactly.

2:35:51.680 --> 2:35:52.520
 And that's okay.

2:35:52.520 --> 2:35:54.360
 And you're creating a topology for some of that.

2:35:54.360 --> 2:35:55.200
 You're right.

2:35:55.200 --> 2:35:56.040
 You just don't have to do it.

2:35:56.040 --> 2:35:57.040
 That's not the only answer, right?

2:35:57.040 --> 2:35:58.880
 And so other companies can access this,

2:35:58.880 --> 2:35:59.880
 be more accessible.

2:35:59.880 --> 2:36:01.120
 We literally say,

2:36:01.120 --> 2:36:03.920
 open team is the future of enterprise software.

2:36:03.920 --> 2:36:04.760
 We're still early.

2:36:04.760 --> 2:36:07.400
 Like this idea just percolated over the past year

2:36:07.400 --> 2:36:08.520
 as we've kind of grown Quansight

2:36:08.520 --> 2:36:10.440
 and realized the extensibility of it.

2:36:10.440 --> 2:36:12.240
 We just finished in our seed round

2:36:13.240 --> 2:36:15.160
 to help get more sales people

2:36:15.160 --> 2:36:17.640
 and then push the messaging correctly.

2:36:17.640 --> 2:36:19.160
 And there's lots of tools we're building

2:36:19.160 --> 2:36:20.000
 to make this easier.

2:36:20.000 --> 2:36:21.720
 Like we wanna automate the processes.

2:36:21.720 --> 2:36:23.560
 We feel like a lot of the power

2:36:23.560 --> 2:36:25.600
 is the efficiency of the sales process.

2:36:25.600 --> 2:36:29.400
 There's a lot of wasted energy in small teams

2:36:29.400 --> 2:36:31.640
 and the sales energy to get into large companies

2:36:31.640 --> 2:36:32.680
 and make a deal.

2:36:32.680 --> 2:36:34.720
 There's a lot of money spent on that process.

2:36:34.720 --> 2:36:36.560
 Creating the tools and processes for that sales.

2:36:36.560 --> 2:36:38.160
 So make that super seamless.

2:36:38.160 --> 2:36:39.680
 So a single company can go,

2:36:39.680 --> 2:36:41.400
 oh, I've got my contract with open teams.

2:36:41.400 --> 2:36:43.040
 We've got a subscription they can get.

2:36:43.040 --> 2:36:45.200
 They can make that procurement seamless.

2:36:45.200 --> 2:36:46.720
 And then the fact they have access

2:36:46.720 --> 2:36:48.840
 to the entire open source ecosystem.

2:36:48.840 --> 2:36:51.240
 And we have a part of our work

2:36:51.240 --> 2:36:53.400
 that's embracing open source ecosystems

2:36:53.400 --> 2:36:55.080
 and making sure we're doing things useful for them

2:36:55.080 --> 2:36:56.160
 or serving them.

2:36:56.160 --> 2:36:57.560
 And then companies making sure

2:36:57.560 --> 2:36:59.200
 they're getting solutions they care about.

2:36:59.200 --> 2:37:02.480
 And then figuring out which targets we have.

2:37:02.480 --> 2:37:04.720
 We're not taking on all of open source,

2:37:04.720 --> 2:37:06.040
 all of enterprise software yet.

2:37:06.040 --> 2:37:07.440
 But we're step by step.

2:37:07.440 --> 2:37:08.520
 Well this feels like the future.

2:37:08.520 --> 2:37:10.600
 The idea and the vision is brilliant.

2:37:10.600 --> 2:37:14.440
 Can I ask you, why do you think Microsoft bought GitHub

2:37:14.440 --> 2:37:16.560
 and what do you think is the future of GitHub?

2:37:16.560 --> 2:37:17.400
 Great point.

2:37:17.400 --> 2:37:18.220
 I thought it was a brilliant move.

2:37:18.220 --> 2:37:20.620
 I think they did because Microsoft has always

2:37:20.620 --> 2:37:22.660
 had a developer centric culture.

2:37:22.660 --> 2:37:23.500
 Like they always have.

2:37:23.500 --> 2:37:25.160
 Like one of the things Microsoft's always done well

2:37:25.160 --> 2:37:27.440
 is understand that their power is the developers.

2:37:27.440 --> 2:37:31.600
 It's been, Ballmer didn't necessarily make a good meme

2:37:31.600 --> 2:37:32.560
 about how he approached that.

2:37:32.560 --> 2:37:34.520
 But they're broadening that.

2:37:34.520 --> 2:37:35.360
 I think that's why.

2:37:35.360 --> 2:37:38.080
 Because they recognize GitHub is where developers are at.

2:37:38.080 --> 2:37:38.920
 Right?

2:37:38.920 --> 2:37:39.740
 And so.

2:37:39.740 --> 2:37:41.080
 But do they have a vision like open teams

2:37:41.080 --> 2:37:41.920
 type of situation, right?

2:37:41.920 --> 2:37:43.600
 I don't think so yet.

2:37:43.600 --> 2:37:46.680
 Are they just basically throwing money at developers

2:37:46.680 --> 2:37:47.960
 to show their support?

2:37:47.960 --> 2:37:48.800
 I think so.

2:37:48.800 --> 2:37:50.840
 Without a topology like you put it.

2:37:50.840 --> 2:37:53.280
 Like a way to leverage that.

2:37:53.280 --> 2:37:55.480
 Like to give developers actual money.

2:37:55.480 --> 2:37:56.320
 Right.

2:37:56.320 --> 2:37:57.160
 I don't think so.

2:37:57.160 --> 2:37:59.440
 They're still, it's an enterprise software company.

2:37:59.440 --> 2:38:00.520
 And they make a bunch of money.

2:38:00.520 --> 2:38:01.360
 They make a bunch of games.

2:38:01.360 --> 2:38:02.640
 They're a big company.

2:38:02.640 --> 2:38:03.760
 They sell products.

2:38:03.760 --> 2:38:06.080
 I think part of it is they know there's opportunity

2:38:06.080 --> 2:38:07.760
 to make money from GitHub.

2:38:07.760 --> 2:38:08.600
 Right?

2:38:08.600 --> 2:38:09.440
 There's definitely a business there.

2:38:09.440 --> 2:38:11.340
 You know, to sell to developers.

2:38:11.340 --> 2:38:13.280
 Or to sell to people using development.

2:38:13.280 --> 2:38:14.240
 I think there's part of that.

2:38:14.240 --> 2:38:15.880
 I think part of it is also there's,

2:38:15.880 --> 2:38:18.080
 they had definitely wanted to recognize

2:38:18.080 --> 2:38:20.560
 that you need to value open source

2:38:20.560 --> 2:38:21.920
 to get great developers.

2:38:21.920 --> 2:38:24.000
 Which is an important concept that was emerging

2:38:24.000 --> 2:38:25.000
 over the past 10 years.

2:38:25.000 --> 2:38:28.000
 That, you know, pay at Pi Data.

2:38:28.000 --> 2:38:29.880
 We were able to convince J.P. Morgan

2:38:29.880 --> 2:38:31.480
 to support Pi Data because of that fact.

2:38:31.480 --> 2:38:32.320
 Right?

2:38:32.320 --> 2:38:33.440
 That was where the money for them putting

2:38:33.440 --> 2:38:35.160
 a couple hundred thousand into supporting Pi Data

2:38:35.160 --> 2:38:37.800
 for several conferences was they want developers.

2:38:37.800 --> 2:38:39.480
 And they realized that developers want

2:38:39.480 --> 2:38:40.720
 to participate in open source.

2:38:40.720 --> 2:38:43.200
 So enterprise software folks don't always understand

2:38:43.200 --> 2:38:44.600
 how their software gets used.

2:38:44.600 --> 2:38:46.560
 Having spent a lot of time on the floors

2:38:46.560 --> 2:38:49.600
 at J.P. Morgan, at InShell, at ExxonMobil,

2:38:49.600 --> 2:38:52.880
 you see, oh, these companies have large development teams.

2:38:52.880 --> 2:38:55.280
 And then they're kind of dealing with

2:38:55.280 --> 2:38:56.720
 what's being delivered to them.

2:38:56.720 --> 2:38:58.360
 So I really feel kind of a privilege

2:38:58.360 --> 2:39:00.480
 that I had a chance to learn some of these people

2:39:00.480 --> 2:39:01.800
 and see what they're doing.

2:39:01.800 --> 2:39:04.000
 And even work alongside them, you know,

2:39:04.000 --> 2:39:07.640
 as a consultant, using open source and trying to figure,

2:39:07.640 --> 2:39:09.960
 how do we make this work inside of our large organization?

2:39:09.960 --> 2:39:13.000
 Some of it is actually, for a large organization,

2:39:13.000 --> 2:39:14.800
 some of it is messaging to the world

2:39:14.800 --> 2:39:16.280
 that you care about developers

2:39:16.280 --> 2:39:18.840
 and you're the cool, you care.

2:39:18.840 --> 2:39:21.040
 Like, for example, like if Ford,

2:39:21.040 --> 2:39:23.880
 cause I talked to them, like car companies, right?

2:39:23.880 --> 2:39:26.680
 They want to attract, you know,

2:39:26.680 --> 2:39:28.760
 you want to take on Tesla and autopilot.

2:39:28.760 --> 2:39:29.960
 You want to take on, right?

2:39:29.960 --> 2:39:31.720
 And so what do you do there?

2:39:31.720 --> 2:39:32.960
 You show that you're cool.

2:39:32.960 --> 2:39:36.480
 Like you try to show off that you care about developers

2:39:36.480 --> 2:39:39.040
 and they have a lot of trouble doing that.

2:39:39.040 --> 2:39:42.720
 And like one way, I think like Ford should have bought GitHub.

2:39:42.720 --> 2:39:46.880
 They just to show off, like these old school companies

2:39:46.880 --> 2:39:49.960
 and it's in a lot of different industries.

2:39:49.960 --> 2:39:51.080
 There's probably different ways.

2:39:51.080 --> 2:39:54.080
 It's probably an art show that you care to developers.

2:39:54.080 --> 2:39:57.920
 And the developers, it's exactly what you, like,

2:39:57.920 --> 2:40:00.520
 for example, just spit balling here,

2:40:00.520 --> 2:40:02.520
 but like Ford or somebody like that

2:40:02.520 --> 2:40:05.960
 could give a hundred million dollars

2:40:05.960 --> 2:40:07.880
 to the development of NumPy.

2:40:07.880 --> 2:40:12.880
 And like literally look at like the top most popular projects

2:40:13.200 --> 2:40:17.080
 in Python and just say, we're just going to give money.

2:40:17.080 --> 2:40:20.240
 Like that's going to immediately make you cool.

2:40:20.240 --> 2:40:21.600
 They could actually, yeah.

2:40:21.600 --> 2:40:24.400
 And in fact, they set up NumFocus to make it easy.

2:40:24.400 --> 2:40:26.080
 But the challenge was,

2:40:26.080 --> 2:40:28.480
 is also you have to have some business development.

2:40:28.480 --> 2:40:31.280
 Like it's a bit of a seeding problem, right?

2:40:31.280 --> 2:40:32.120
 And you look at how,

2:40:32.120 --> 2:40:33.400
 I've talked to the folks at Linux Foundation,

2:40:33.400 --> 2:40:34.360
 know how they're doing it.

2:40:34.360 --> 2:40:36.600
 I know how, and starting NumFocus,

2:40:36.600 --> 2:40:39.400
 because we had two babies in 2012.

2:40:39.400 --> 2:40:41.120
 One was Anaconda, one was NumFocus, right?

2:40:41.120 --> 2:40:42.760
 And they were both important efforts.

2:40:42.760 --> 2:40:44.000
 They had distinct journeys

2:40:44.000 --> 2:40:46.200
 and super grateful that both existed

2:40:46.200 --> 2:40:47.760
 and still grateful both exist.

2:40:48.720 --> 2:40:51.840
 But there's different energies in getting donations

2:40:51.840 --> 2:40:55.320
 as there is getting, this is important to my business.

2:40:55.320 --> 2:40:58.680
 Like I'm selling you something that this is a,

2:40:58.680 --> 2:41:00.280
 I'm going to make money this way.

2:41:00.280 --> 2:41:01.120
 Like if you can tie it,

2:41:01.120 --> 2:41:04.040
 if you can tie the message to an ROI for the company,

2:41:04.040 --> 2:41:04.880
 it becomes a brainer.

2:41:04.880 --> 2:41:05.720
 That's more effective.

2:41:05.720 --> 2:41:06.920
 It's much more effective, right?

2:41:06.920 --> 2:41:09.520
 So, and there are rational arguments to make.

2:41:09.520 --> 2:41:11.120
 I've tried to have conversations with marketing,

2:41:11.120 --> 2:41:12.240
 especially marketing departments.

2:41:12.240 --> 2:41:14.840
 Like very early on, it was clear to me that,

2:41:14.840 --> 2:41:18.160
 oh, you could just take a fraction of your marketing budget

2:41:18.160 --> 2:41:20.240
 and just spend it on open source development.

2:41:20.240 --> 2:41:23.760
 And you get better results from your marketing.

2:41:23.760 --> 2:41:24.600
 Like, because.

2:41:24.600 --> 2:41:26.000
 How did those, can I, sorry,

2:41:26.000 --> 2:41:27.920
 I'm going to try not to go and rants here.

2:41:27.920 --> 2:41:29.800
 What have you learned from the interaction

2:41:29.800 --> 2:41:31.440
 with the marketing folks on that kind of,

2:41:31.440 --> 2:41:34.160
 because you gave a great example

2:41:34.160 --> 2:41:37.240
 of something that will obviously be much better investment

2:41:37.240 --> 2:41:40.360
 in terms of marketing is supporting open source projects.

2:41:40.360 --> 2:41:41.840
 The challenge is not dissimilar

2:41:41.840 --> 2:41:44.480
 from the challenge you have in academia

2:41:44.480 --> 2:41:46.520
 or the different colleges, right?

2:41:46.520 --> 2:41:50.000
 Knowledge gets very specific and very channeled, right?

2:41:50.000 --> 2:41:51.160
 And so people get,

2:41:51.160 --> 2:41:53.920
 they get a lot of learning in the thing they know about.

2:41:53.920 --> 2:41:56.200
 And it's hard then to bridge that

2:41:56.200 --> 2:41:58.160
 and to get them to think differently enough

2:41:58.160 --> 2:42:02.160
 to have a sense that you might have something to offer

2:42:02.160 --> 2:42:03.000
 because it's different.

2:42:03.000 --> 2:42:04.280
 It's like, well, how do I implement that?

2:42:04.280 --> 2:42:05.840
 How do I, what do I do with that?

2:42:05.840 --> 2:42:07.840
 Like, do I, which budget do I take from?

2:42:07.840 --> 2:42:10.320
 Do I slow down my spend on Google ads

2:42:10.320 --> 2:42:11.600
 or my spend on Facebook ads?

2:42:11.600 --> 2:42:14.640
 Or do I not hire a content creator and say like,

2:42:14.640 --> 2:42:16.160
 there's an operational aspect to that,

2:42:16.160 --> 2:42:19.080
 that you have to be the CMO, right?

2:42:19.080 --> 2:42:21.000
 Or the CEO, you have to get the right level.

2:42:21.000 --> 2:42:24.360
 So you'll have to hire at a high position level

2:42:24.360 --> 2:42:25.720
 where they care about this and this.

2:42:25.720 --> 2:42:27.640
 Right, or they won't know how, right?

2:42:27.640 --> 2:42:30.440
 And because you can also do it very clumsily, right?

2:42:30.440 --> 2:42:32.040
 And I've seen it, cause you can,

2:42:32.040 --> 2:42:33.760
 you absolutely have to honor and recognize

2:42:33.760 --> 2:42:36.640
 the people you're going to and the fact

2:42:36.640 --> 2:42:37.800
 that if you just throw money at them,

2:42:37.800 --> 2:42:39.240
 it could actually create more problems.

2:42:39.240 --> 2:42:41.320
 Can I just say, this is not you saying, can I just,

2:42:41.320 --> 2:42:44.360
 cause I just need, I need to say this.

2:42:44.360 --> 2:42:49.360
 I've been very surprised how often marketing people

2:42:49.880 --> 2:42:51.760
 are terrible at marketing.

2:42:51.760 --> 2:42:55.600
 I feel like the best marketing is doing something novel

2:42:55.600 --> 2:42:58.240
 and unique that anticipates the future.

2:42:58.240 --> 2:43:01.520
 It feels like so much of the marketing practice

2:43:01.520 --> 2:43:04.320
 is like what they took in school,

2:43:04.320 --> 2:43:06.680
 or maybe they're studying for what was the best thing

2:43:06.680 --> 2:43:08.440
 that was done in the past decade,

2:43:08.440 --> 2:43:10.800
 and they're just repeating that over and over,

2:43:10.800 --> 2:43:13.760
 as opposed to innovating, like taking the risk.

2:43:13.760 --> 2:43:14.600
 To me, marketing.

2:43:14.600 --> 2:43:15.440
 That's a great point.

2:43:15.440 --> 2:43:17.080
 Is taking the big risk.

2:43:17.080 --> 2:43:17.920
 That's a great point.

2:43:17.920 --> 2:43:18.800
 And being the first one to risk.

2:43:18.800 --> 2:43:21.200
 Yeah, there's an aspect of data observation

2:43:21.200 --> 2:43:22.160
 from that risk, right?

2:43:22.160 --> 2:43:25.120
 That's, I think, shared what they're doing already.

2:43:25.120 --> 2:43:27.680
 But it absolutely, it's about, I think it's content.

2:43:27.680 --> 2:43:30.200
 Like there's this whole world on content marketing

2:43:30.200 --> 2:43:33.560
 that you could almost say, well, yeah, it can get over,

2:43:33.560 --> 2:43:35.080
 you can get inundated with stuff

2:43:35.080 --> 2:43:36.400
 that's not relevant to you.

2:43:36.400 --> 2:43:39.160
 Whereas what you're saying would be highly relevant

2:43:39.160 --> 2:43:41.560
 and highly useful and highly beneficial.

2:43:41.560 --> 2:43:42.960
 Yeah, but it's risk.

2:43:42.960 --> 2:43:44.600
 I mean, that's why I sort of,

2:43:44.600 --> 2:43:46.240
 there's a lot of innovative ways of doing that.

2:43:46.240 --> 2:43:48.000
 Tesla's an example of people

2:43:48.000 --> 2:43:49.960
 that basically don't do marketing.

2:43:49.960 --> 2:43:52.800
 They do marketing in a very, like,

2:43:52.800 --> 2:43:55.720
 let's say Elon hired a person who's just good at Twitter

2:43:55.720 --> 2:43:57.520
 for running Tesla's Twitter account.

2:43:57.520 --> 2:43:59.120
 No, right, right.

2:43:59.120 --> 2:44:00.840
 I mean, that's exactly what you wanna be doing.

2:44:00.840 --> 2:44:03.120
 You want it to be constantly innovating in the.

2:44:03.120 --> 2:44:04.280
 Right, there's an aspect of telling.

2:44:04.280 --> 2:44:06.920
 I mean, I've definitely seen people doing great work

2:44:06.920 --> 2:44:08.400
 where you're not talking about it.

2:44:08.400 --> 2:44:09.560
 Like, I would say that's actually a problem

2:44:09.560 --> 2:44:11.360
 I have right now with Quonset Labs.

2:44:11.360 --> 2:44:12.720
 Quonset Labs has been doing amazing work,

2:44:12.720 --> 2:44:13.560
 really excited about it,

2:44:13.560 --> 2:44:15.480
 but we have not been talking about it enough.

2:44:15.480 --> 2:44:16.320
 We haven't been.

2:44:16.320 --> 2:44:17.880
 And there's different ways to talk about it.

2:44:17.880 --> 2:44:18.720
 There's different ways to,

2:44:18.720 --> 2:44:20.800
 there's different channels to which to communicate.

2:44:20.800 --> 2:44:25.600
 There's also, like, I'll just throw some shade

2:44:25.600 --> 2:44:26.920
 at companies I love.

2:44:27.880 --> 2:44:29.160
 So for example, iRobot,

2:44:29.160 --> 2:44:30.800
 I just had a conversation with them.

2:44:30.800 --> 2:44:31.840
 They make Roombas.

2:44:31.840 --> 2:44:32.680
 Sure.

2:44:32.680 --> 2:44:35.440
 And I think I love, they're incredible robots,

2:44:35.440 --> 2:44:38.960
 but like every time they do like advertisement,

2:44:38.960 --> 2:44:41.880
 not advertisement, but like marketing type stuff,

2:44:41.880 --> 2:44:44.080
 it just looks so corporate.

2:44:44.080 --> 2:44:47.640
 And to me, the incredible,

2:44:47.640 --> 2:44:50.280
 maybe wrong in the case of iRobot, I don't know.

2:44:50.280 --> 2:44:54.000
 But to me, when you're talking about engineering systems,

2:44:54.000 --> 2:44:57.000
 it's really nice to show off the magic of the engineering

2:44:57.000 --> 2:45:02.000
 and the software and all the geniuses behind this product

2:45:02.000 --> 2:45:05.080
 and the tinkering and like the raw authenticity

2:45:05.080 --> 2:45:06.800
 of what it takes to build that system

2:45:06.800 --> 2:45:09.960
 versus the marketing people who want to have like

2:45:09.960 --> 2:45:12.120
 pretty people, like standing there all pretty

2:45:12.120 --> 2:45:14.600
 with the robots, like moving perfectly.

2:45:14.600 --> 2:45:16.520
 So to me, there's some aspect,

2:45:16.520 --> 2:45:18.040
 it's like speaking to the hackers,

2:45:18.040 --> 2:45:21.040
 you have to throw some bones,

2:45:21.040 --> 2:45:25.560
 some care towards the engineers, the developers,

2:45:25.560 --> 2:45:28.720
 because there's some aspect, one, for the hiring,

2:45:28.720 --> 2:45:31.000
 but two, there's an authenticity to that,

2:45:31.000 --> 2:45:33.080
 authenticity to that kind of communication

2:45:33.080 --> 2:45:36.080
 that's really inspiring to the end user as well.

2:45:36.080 --> 2:45:38.440
 Like if they know that brilliant people,

2:45:38.440 --> 2:45:40.680
 the best in the world are working at your company,

2:45:40.680 --> 2:45:42.640
 they start to believe that that product

2:45:42.640 --> 2:45:43.960
 that you're creating is really good.

2:45:43.960 --> 2:45:45.640
 It's interesting, because your initial reaction would be,

2:45:45.640 --> 2:45:46.760
 wait, there's different users here.

2:45:46.760 --> 2:45:48.400
 Why would you do that to, you know,

2:45:48.400 --> 2:45:52.120
 my wife bought a Roomba, and she loves developers,

2:45:52.120 --> 2:45:56.560
 she loves me, but she doesn't care about that culture.

2:45:56.560 --> 2:45:59.600
 So essentially what you said is actually the authenticity,

2:45:59.600 --> 2:46:01.160
 because everyone has a friend, everyone knows people,

2:46:01.160 --> 2:46:02.680
 there's word of mouth, I mean, if you.

2:46:02.680 --> 2:46:04.160
 Word of mouth is so, so proper.

2:46:04.160 --> 2:46:05.640
 Yeah, exactly, that's interesting.

2:46:05.640 --> 2:46:07.560
 Because I think it's the lack of that realization,

2:46:07.560 --> 2:46:09.840
 there's this halo effect that influences

2:46:09.840 --> 2:46:11.720
 your general marketing, interesting.

2:46:11.720 --> 2:46:14.640
 For some stupid reason, I do have a platform,

2:46:14.640 --> 2:46:16.920
 and it seems that the reason I have a platform,

2:46:16.920 --> 2:46:19.480
 many others like me, millions of others,

2:46:19.480 --> 2:46:21.160
 is like the authenticity,

2:46:21.160 --> 2:46:23.960
 and like we get excited naturally about stuff.

2:46:23.960 --> 2:46:25.760
 And like, I don't want to get excited

2:46:25.760 --> 2:46:27.800
 about that iRobot video,

2:46:27.800 --> 2:46:30.760
 because it's boring, it's marketing, it's corporate,

2:46:30.760 --> 2:46:33.600
 as opposed to, I wanted to do some fun,

2:46:33.600 --> 2:46:36.240
 this is me, like a shout out to iRobot,

2:46:36.240 --> 2:46:39.360
 is they're not letting me get into the robot.

2:46:39.360 --> 2:46:40.920
 Yeah, well there's an aspect of,

2:46:40.920 --> 2:46:44.840
 that could be benefiting from a culture of modularity,

2:46:44.840 --> 2:46:47.840
 like add ons, and that could actually dramatically help.

2:46:47.840 --> 2:46:49.300
 You've seen that over history,

2:46:49.300 --> 2:46:51.160
 I mean, Apple is an example of a company like that,

2:46:51.160 --> 2:46:54.400
 or the, like, I can see what your point is,

2:46:54.400 --> 2:46:56.920
 is that you have something that needs to be,

2:46:56.920 --> 2:46:58.240
 it needs to be adopted broadly,

2:46:58.240 --> 2:47:00.040
 the concept needs to be adopted broadly.

2:47:00.040 --> 2:47:01.640
 And if you want to go beyond this one device,

2:47:01.640 --> 2:47:04.220
 you need to engage this community.

2:47:04.220 --> 2:47:07.560
 Yeah, and connecting to the open source that you said.

2:47:07.560 --> 2:47:08.580
 I gotta ask you,

2:47:09.960 --> 2:47:11.800
 you're a programmer,

2:47:11.800 --> 2:47:14.840
 one of the most impactful programmers ever.

2:47:14.840 --> 2:47:18.560
 You've led many programmers, you lead many programmers.

2:47:18.560 --> 2:47:21.180
 What are some, from a programmer perspective,

2:47:21.180 --> 2:47:23.360
 what makes a good programmer?

2:47:23.360 --> 2:47:25.000
 What makes a productive programmer?

2:47:25.000 --> 2:47:27.140
 Is there a device you can give

2:47:27.140 --> 2:47:28.480
 to be a great programmer in this world?

2:47:28.480 --> 2:47:30.280
 That's a great, great question.

2:47:30.280 --> 2:47:31.640
 And there are times in my life

2:47:31.640 --> 2:47:32.920
 I'd probably answer this even better

2:47:32.920 --> 2:47:35.040
 than I hope maybe give an answer today.

2:47:35.040 --> 2:47:36.700
 Because I thought about this numerous times,

2:47:36.700 --> 2:47:38.280
 like right now I've spent on so much time

2:47:38.280 --> 2:47:40.040
 recently hiring salespeople that,

2:47:41.000 --> 2:47:43.440
 That your mind is a little bit on something else.

2:47:43.440 --> 2:47:44.280
 On something else.

2:47:44.280 --> 2:47:46.080
 But I reflected on the past,

2:47:46.080 --> 2:47:48.160
 and also, you know, I have some really,

2:47:48.160 --> 2:47:49.000
 the only way I can do this,

2:47:49.000 --> 2:47:51.440
 is I have some really great programmers that I work with,

2:47:51.440 --> 2:47:53.240
 who lead the teams that they lead.

2:47:53.240 --> 2:47:56.600
 And my goal is to inspire them and hopefully help them,

2:47:56.600 --> 2:47:57.800
 encourage them, and be,

2:47:57.800 --> 2:47:59.620
 help them encourage with their teams.

2:47:59.620 --> 2:48:01.200
 I would say there's a number of things, couple things.

2:48:01.200 --> 2:48:03.860
 One is curiosity.

2:48:03.860 --> 2:48:07.700
 Like you, I think a programmer without curiosity

2:48:07.700 --> 2:48:09.600
 is mundane.

2:48:09.600 --> 2:48:12.240
 Like you'll lose interest, you won't do your best work.

2:48:12.240 --> 2:48:13.640
 So it's sort of, it's an affect.

2:48:13.640 --> 2:48:14.480
 It's sort of, are you,

2:48:14.480 --> 2:48:16.800
 you have some curiosity about things.

2:48:16.800 --> 2:48:19.600
 I think two, don't try to do everything at once.

2:48:19.600 --> 2:48:21.960
 Recognize that you're, you know, we're limited as humans.

2:48:21.960 --> 2:48:23.200
 You're limited as a human.

2:48:23.200 --> 2:48:24.920
 And each one of us are limited in different ways.

2:48:24.920 --> 2:48:26.600
 You know, we all have our different strengths and skills.

2:48:26.600 --> 2:48:29.880
 So it's adapting the art of programming to your skills.

2:48:29.880 --> 2:48:31.240
 One of the things that always works,

2:48:31.240 --> 2:48:33.580
 is to limit what you're trying to solve.

2:48:33.580 --> 2:48:36.640
 Right, so, if you're part of a team,

2:48:36.640 --> 2:48:38.920
 usually maybe somebody else has put the architecture together

2:48:38.920 --> 2:48:41.720
 and they've gotten given a portion for you if you're young.

2:48:41.720 --> 2:48:43.440
 If you're not part of a team,

2:48:43.440 --> 2:48:46.640
 it's sort of breaking down the problem into smaller parts,

2:48:46.640 --> 2:48:48.620
 is essential for you to make progress.

2:48:48.620 --> 2:48:50.720
 It's very easy to take on a big project

2:48:50.720 --> 2:48:52.800
 and try to do it all at once, and you get lost.

2:48:52.800 --> 2:48:53.680
 And then you do it badly.

2:48:53.680 --> 2:48:57.700
 And so thinking about, you know,

2:48:57.700 --> 2:48:59.400
 very concretely what you're doing,

2:48:59.400 --> 2:49:01.440
 defining the inputs and outputs,

2:49:01.440 --> 2:49:03.960
 defining what you want to get done.

2:49:03.960 --> 2:49:07.280
 Even just talking about that and like writing down

2:49:07.280 --> 2:49:09.440
 before you write code, just what are you trying to accomplish?

2:49:09.440 --> 2:49:12.800
 I mean, very specific about it, really, really helps.

2:49:12.800 --> 2:49:17.000
 I think using other people's work, right?

2:49:17.000 --> 2:49:20.000
 Don't be afraid that somehow you're,

2:49:20.000 --> 2:49:21.280
 like you should do it all.

2:49:21.280 --> 2:49:23.240
 Like, nobody does.

2:49:23.240 --> 2:49:25.240
 Stand on the shoulders of giants.

2:49:25.240 --> 2:49:26.720
 And copy and paste from Stack Overflow.

2:49:26.720 --> 2:49:28.200
 Copy and paste from Stack Overflow.

2:49:28.200 --> 2:49:30.040
 But don't just copy and paste,

2:49:30.040 --> 2:49:31.760
 this is particularly relevant in the era of Codex

2:49:31.760 --> 2:49:34.960
 and the auto generated code, which is essentially,

2:49:34.960 --> 2:49:36.760
 I see as an indexing of Stack Overflow.

2:49:36.760 --> 2:49:37.600
 Right, exactly.

2:49:37.600 --> 2:49:38.440
 Secondly, it's like.

2:49:38.440 --> 2:49:39.280
 It's a search engine.

2:49:39.280 --> 2:49:41.280
 It's a search engine over Stack Overflow, basically.

2:49:41.280 --> 2:49:43.480
 So it's not, I mean, we've had this for a while.

2:49:43.480 --> 2:49:47.300
 But really, you want to cut and paste, but not blindly.

2:49:47.300 --> 2:49:51.000
 Like, absolutely I've cut and paste to understand,

2:49:51.000 --> 2:49:52.320
 but then you understand.

2:49:52.320 --> 2:49:53.640
 Oh, this is what this means.

2:49:53.640 --> 2:49:54.920
 Oh, this is what it's doing.

2:49:54.920 --> 2:49:56.680
 And understand as much as you can.

2:49:56.680 --> 2:49:59.080
 So it's critical, that's where the curiosity comes in.

2:49:59.080 --> 2:50:01.000
 If you're just blindly cutting and pasting,

2:50:01.000 --> 2:50:02.240
 you're not gonna understand.

2:50:02.240 --> 2:50:07.240
 So understand, and then be sensitive to hype cycles.

2:50:08.600 --> 2:50:10.920
 Right, every few often there's always a,

2:50:10.920 --> 2:50:12.520
 oh, test driven development is the answer.

2:50:12.520 --> 2:50:13.800
 Oh, object oriented is the answer.

2:50:13.800 --> 2:50:16.520
 Oh, there's always an answer.

2:50:16.520 --> 2:50:18.400
 Agile is the answer.

2:50:18.400 --> 2:50:20.840
 Be cautious of jumping onto a hype cycle.

2:50:20.840 --> 2:50:22.520
 Like, likely there's signal.

2:50:22.520 --> 2:50:23.440
 Like, there's a thing there

2:50:23.440 --> 2:50:25.320
 that's actually valuable, you can learn from.

2:50:25.320 --> 2:50:27.720
 But it's almost certainly not the answer

2:50:27.720 --> 2:50:28.960
 to everything you need.

2:50:28.960 --> 2:50:30.160
 What lessons do you draw

2:50:30.160 --> 2:50:34.100
 from you having created NumPy and SciPy?

2:50:34.100 --> 2:50:37.200
 Like, in service of sort of answering the question

2:50:37.200 --> 2:50:38.840
 of what it takes to be a great programmer

2:50:38.840 --> 2:50:40.520
 and giving advice to people.

2:50:40.520 --> 2:50:42.960
 How can you be the next person to create a SciPy?

2:50:42.960 --> 2:50:44.820
 Yeah, so one is listen.

2:50:45.640 --> 2:50:46.480
 To?

2:50:46.480 --> 2:50:47.300
 Listen.

2:50:47.300 --> 2:50:48.140
 To who?

2:50:48.140 --> 2:50:51.440
 To people that have a problem, right?

2:50:51.440 --> 2:50:52.520
 Which is everybody, right?

2:50:52.520 --> 2:50:54.960
 But listen, and listen to many.

2:50:54.960 --> 2:50:57.460
 And then try to, and then do.

2:50:57.460 --> 2:50:59.760
 Like, you're gonna have to do an experiment, you know?

2:50:59.760 --> 2:51:01.940
 Do, fall down, don't be afraid to fall down.

2:51:01.940 --> 2:51:04.240
 Don't be afraid, the first thing you do

2:51:04.240 --> 2:51:07.600
 is probably gonna suck, and that's okay, right?

2:51:07.600 --> 2:51:11.240
 It's honestly, I think iteration is the key to innovation.

2:51:11.240 --> 2:51:16.240
 And it's almost that psychological hesitation we have

2:51:16.240 --> 2:51:18.520
 to just iterate.

2:51:18.520 --> 2:51:20.560
 Like, yeah, we know it's not great,

2:51:20.560 --> 2:51:22.000
 but next time it'll be better.

2:51:22.000 --> 2:51:25.560
 I mean, just keep learning and keep improving.

2:51:25.560 --> 2:51:27.700
 So it's an attitude.

2:51:27.700 --> 2:51:32.160
 And then it doesn't take intense concentration, right?

2:51:32.160 --> 2:51:34.560
 Good things don't happen just,

2:51:34.560 --> 2:51:38.200
 it's not quite like TikTok or like Facebook, you know?

2:51:38.200 --> 2:51:40.520
 You can't scroll your way to good programming, right?

2:51:40.520 --> 2:51:44.720
 There are sincere hours of deep,

2:51:44.720 --> 2:51:46.040
 don't be afraid of the deep problem.

2:51:46.040 --> 2:51:47.680
 Like, often people will run away from something

2:51:47.680 --> 2:51:49.000
 because, oh, I can't solve this.

2:51:49.000 --> 2:51:51.360
 And you might be right, but give it an hour.

2:51:51.360 --> 2:51:53.360
 Give it a couple of hours and see.

2:51:53.360 --> 2:51:56.560
 And just five minutes, not gonna give you that.

2:51:56.560 --> 2:52:00.520
 Was it lonely when you were building SciPy and NumPy?

2:52:00.520 --> 2:52:02.520
 Hugely, yeah, absolutely lonely,

2:52:02.520 --> 2:52:05.760
 in the sense of you had to have an inner drive,

2:52:05.760 --> 2:52:08.000
 and that inner drive for me always comes from,

2:52:08.000 --> 2:52:11.640
 I have to see that this is right in some angle.

2:52:11.640 --> 2:52:13.360
 I have to believe it, that this is the right approach,

2:52:13.360 --> 2:52:14.720
 the right thing to do.

2:52:14.720 --> 2:52:16.400
 With SciPy, it was like, oh yeah,

2:52:16.400 --> 2:52:19.080
 the world needs libraries and Python.

2:52:19.080 --> 2:52:20.720
 Clearly Python's popular enough

2:52:20.720 --> 2:52:22.960
 with enough influential people to start,

2:52:22.960 --> 2:52:24.640
 and it needs more libraries.

2:52:24.640 --> 2:52:26.600
 So that is a good in and of itself.

2:52:26.600 --> 2:52:28.360
 So I'm gonna go do that good.

2:52:28.360 --> 2:52:30.360
 So find a good, find a thing that you know is good

2:52:30.360 --> 2:52:32.160
 and just work on it.

2:52:33.040 --> 2:52:34.720
 So that has to happen, and it is.

2:52:34.720 --> 2:52:37.000
 And you kind of have to have enough realization

2:52:37.000 --> 2:52:40.280
 of your mission to be okay with the naysayer

2:52:40.280 --> 2:52:42.200
 or the fact that not everybody joins you at front.

2:52:42.200 --> 2:52:43.480
 In fact, one thing I've talked to people a lot,

2:52:43.480 --> 2:52:45.480
 I've seen a lot of projects come, and some fail.

2:52:45.480 --> 2:52:47.600
 Not everything I've done has actually worked perfectly.

2:52:47.600 --> 2:52:49.160
 I've tried a bunch of stuff that, okay,

2:52:49.160 --> 2:52:51.920
 that didn't really work, or this isn't working, and why.

2:52:51.920 --> 2:52:55.800
 But you see the patterns, and one of the key things is

2:52:55.800 --> 2:52:59.040
 you can't even know for six months.

2:52:59.040 --> 2:53:00.200
 I say 18 months right now.

2:53:00.200 --> 2:53:01.800
 If you're starting a new project,

2:53:01.800 --> 2:53:03.200
 you gotta give it a good 18 month run

2:53:03.200 --> 2:53:05.920
 before you even know if the feedback's there.

2:53:05.920 --> 2:53:07.880
 You're not gonna know in six months.

2:53:07.880 --> 2:53:08.720
 You might have the perfect thing,

2:53:08.720 --> 2:53:11.480
 but six months from now, it's still kind of still emerging.

2:53:11.480 --> 2:53:13.360
 So give it time, because you're dealing with humans,

2:53:13.360 --> 2:53:15.960
 and humans have an inertial energy

2:53:15.960 --> 2:53:18.680
 that just doesn't change that quickly, so.

2:53:18.680 --> 2:53:23.560
 Let me ask a silly question, but like you said,

2:53:23.560 --> 2:53:26.120
 you're focused on the sales side of things currently,

2:53:26.120 --> 2:53:28.960
 but back when you were actively programming,

2:53:28.960 --> 2:53:31.680
 maybe in the 90s, you talked about IDEs.

2:53:31.680 --> 2:53:36.200
 What's a setup that you have that brings you joy?

2:53:36.200 --> 2:53:39.640
 Keyboard, number of screens, Linux.

2:53:39.640 --> 2:53:40.920
 I do still like to program some.

2:53:40.920 --> 2:53:42.160
 It's not as much as I used to.

2:53:42.160 --> 2:53:44.560
 I have two projects I'm super interested in,

2:53:44.560 --> 2:53:45.640
 trying to find funding for them,

2:53:45.640 --> 2:53:47.200
 trying to figure out teams for them,

2:53:47.200 --> 2:53:49.040
 but I could talk about those.

2:53:49.040 --> 2:53:51.960
 But what I, yeah, I'm an Emacs guy.

2:53:51.960 --> 2:53:56.080
 Great, thank the superior editor, everybody.

2:53:56.080 --> 2:53:59.000
 I've got, I don't often delete tweets,

2:53:59.000 --> 2:54:00.600
 but one of the tweets I deleted

2:54:00.600 --> 2:54:02.840
 when I said Emacs was better than Vim,

2:54:02.840 --> 2:54:04.520
 and then the hate I got from it.

2:54:04.520 --> 2:54:05.360
 It is.

2:54:05.360 --> 2:54:07.640
 I was like, I'm walking away from this.

2:54:07.640 --> 2:54:09.160
 I do too, I don't push it.

2:54:09.160 --> 2:54:10.000
 I mean, I'm not.

2:54:10.000 --> 2:54:11.080
 I'm just joking, of course.

2:54:11.080 --> 2:54:12.160
 Yeah, exactly, it's kind of like,

2:54:12.160 --> 2:54:14.520
 but people do take the editor seriously, right?

2:54:14.520 --> 2:54:15.360
 I did it as a joke.

2:54:15.360 --> 2:54:16.200
 That's your life.

2:54:16.200 --> 2:54:20.760
 It is, but there's something beautiful to me about Emacs,

2:54:20.760 --> 2:54:22.360
 but for people that love Vim,

2:54:22.360 --> 2:54:23.200
 there's something beautiful to them about that.

2:54:23.200 --> 2:54:24.040
 There is.

2:54:24.040 --> 2:54:26.280
 I mean, I do use Vim for quick editing.

2:54:26.280 --> 2:54:27.880
 Like Command Line, if I said quick editing,

2:54:27.880 --> 2:54:30.280
 I will still sometimes use it, but not much.

2:54:30.280 --> 2:54:32.760
 Like it's simple, corrective signal editor character.

2:54:32.760 --> 2:54:34.920
 So when you were developing SciPy, you were using Emacs?

2:54:34.920 --> 2:54:35.880
 Emacs, yeah.

2:54:35.880 --> 2:54:39.040
 SciPy and NumPy are all written on Emacs on a Linux box.

2:54:39.040 --> 2:54:43.160
 And CVS and then SVN, version control.

2:54:43.160 --> 2:54:44.040
 Git came later.

2:54:44.040 --> 2:54:48.080
 Like Git has, I love distributed branch stuff.

2:54:48.080 --> 2:54:51.640
 I think Git is pretty complicated, but I love the concept.

2:54:51.640 --> 2:54:55.240
 And also, of course, GitHub and then GitLab

2:54:55.240 --> 2:54:59.440
 make Git definitely consumable, but that came later.

2:54:59.440 --> 2:55:00.880
 Did you ever touch Lisp at all?

2:55:00.880 --> 2:55:03.400
 Like what were your emotional feelings

2:55:03.400 --> 2:55:04.240
 about all the parentheses?

2:55:04.240 --> 2:55:05.440
 Yeah, so great question.

2:55:05.440 --> 2:55:08.240
 So I find myself appreciating Lisp today

2:55:08.240 --> 2:55:09.680
 much more than I did early.

2:55:09.680 --> 2:55:11.680
 Because when I came to programming, I knew programming,

2:55:11.680 --> 2:55:13.000
 but I was a domain expert, right?

2:55:13.000 --> 2:55:15.720
 And to me, the parentheses were in the way.

2:55:15.720 --> 2:55:17.800
 It's like, wow, there's just all this,

2:55:17.800 --> 2:55:19.320
 like it just gets in the way of my thinking

2:55:19.320 --> 2:55:20.160
 about what I'm doing.

2:55:20.160 --> 2:55:22.440
 So why would I have all these, right?

2:55:22.440 --> 2:55:24.760
 That was my initial reaction to it.

2:55:24.760 --> 2:55:27.320
 And now as I appreciate kind of the structure

2:55:27.320 --> 2:55:30.280
 that kind of naturally maps to a logical thinking

2:55:30.280 --> 2:55:33.000
 about a program, I can appreciate them, right?

2:55:33.000 --> 2:55:35.680
 And why it's actually, you could create editors

2:55:35.680 --> 2:55:39.680
 that make it not so problematic, right, honestly.

2:55:40.720 --> 2:55:43.000
 So I actually have a much more appreciation of Lisp

2:55:43.000 --> 2:55:44.720
 and things like Clojure and there's HyVee,

2:55:44.720 --> 2:55:48.560
 which is a Python Lisp that compiles the Python bytecode.

2:55:48.560 --> 2:55:50.280
 I think it's challenging.

2:55:50.280 --> 2:55:53.160
 Like typically these languages are,

2:55:53.160 --> 2:55:55.280
 I even saw the whole data science programming system

2:55:55.280 --> 2:55:58.360
 in Lisp that somebody created, which is cool.

2:55:58.360 --> 2:56:00.840
 But again, I think it's the lack of recognition

2:56:00.840 --> 2:56:02.020
 of the fact that there exists

2:56:02.020 --> 2:56:04.080
 what I call occasional programmers.

2:56:04.080 --> 2:56:05.840
 People that are never gonna be programmers for a living.

2:56:05.840 --> 2:56:08.440
 They don't want to have all this cuteness in their head.

2:56:08.440 --> 2:56:11.880
 They want just, it's why basic, you know,

2:56:11.880 --> 2:56:14.480
 Microsoft had the right idea with basic

2:56:14.480 --> 2:56:17.660
 in terms of having that be the language of visual basic,

2:56:17.660 --> 2:56:21.280
 the language of Excel and SQL Server.

2:56:21.280 --> 2:56:23.520
 They should have converted that to Python 10 years ago.

2:56:23.520 --> 2:56:27.200
 Like the world would be a better place if they had, but.

2:56:27.200 --> 2:56:29.660
 There's also, there's a beauty and a magic

2:56:29.660 --> 2:56:31.640
 to the history behind a language in Lisp.

2:56:31.640 --> 2:56:34.020
 You know, some of the most interesting people

2:56:34.020 --> 2:56:35.880
 in the history of computer science

2:56:35.880 --> 2:56:37.920
 and artificial intelligence have used Lisp.

2:56:37.920 --> 2:56:40.000
 So you feel.

2:56:40.000 --> 2:56:41.200
 Well, especially that language,

2:56:41.200 --> 2:56:43.440
 when you have a language, you can think in it.

2:56:43.440 --> 2:56:44.280
 And it helps you think better.

2:56:44.280 --> 2:56:45.640
 And it attracts a certain kinds of people

2:56:45.640 --> 2:56:46.920
 that think in a certain kind of way.

2:56:46.920 --> 2:56:48.560
 And then that's there.

2:56:48.560 --> 2:56:52.140
 Okay, so what about like small laptop with a tiny keyboard,

2:56:52.140 --> 2:56:55.000
 or is there like three screens?

2:56:55.000 --> 2:56:55.840
 You know, good question.

2:56:55.840 --> 2:56:58.080
 I've never gotten into the big, many screens to be honest.

2:56:58.080 --> 2:57:00.720
 I mean, and maybe it's because in my head,

2:57:00.720 --> 2:57:03.480
 I kind of just, I just swap between windows.

2:57:03.480 --> 2:57:07.480
 Like, partly because I guess I really can't process

2:57:07.480 --> 2:57:09.200
 three screens at once anyway.

2:57:09.200 --> 2:57:12.560
 Like, I just am looking at one and I just flip.

2:57:12.560 --> 2:57:14.460
 You know, I flip an application open.

2:57:14.460 --> 2:57:17.340
 So where it's really helpful is actually

2:57:17.340 --> 2:57:18.440
 when I'm trying to do, you know,

2:57:18.440 --> 2:57:20.240
 here's data and I want to input it from here.

2:57:20.240 --> 2:57:22.280
 Like this is the only time I really need another screen.

2:57:22.280 --> 2:57:25.960
 So now, because you're both a developer, lead developers,

2:57:25.960 --> 2:57:27.880
 but then there's also these businesses

2:57:27.880 --> 2:57:30.120
 and there's salespeople and you're working

2:57:30.120 --> 2:57:30.960
 with large companies.

2:57:30.960 --> 2:57:32.480
 Operations people, hiring people, yeah.

2:57:32.480 --> 2:57:33.400
 The whole thing.

2:57:33.400 --> 2:57:37.240
 Which operating system is your favorite at this point?

2:57:37.240 --> 2:57:38.960
 So Linux was the early days.

2:57:38.960 --> 2:57:41.460
 So yeah, I love Linux as a server side.

2:57:41.460 --> 2:57:44.340
 And it was early days I had my own Linux desktop.

2:57:44.340 --> 2:57:47.800
 I've been on Mac laptops for 10 years now.

2:57:47.800 --> 2:57:50.040
 Yeah, this is what leadership looks like.

2:57:50.040 --> 2:57:52.800
 As you switch to Mac.

2:57:52.800 --> 2:57:53.800
 Okay, great.

2:57:53.800 --> 2:57:56.480
 Pretty much, I mean, just the fact that I had

2:57:56.480 --> 2:57:58.760
 to do PowerPoints, I had to do presentations

2:57:58.760 --> 2:58:01.240
 and you know, plug in, I just couldn't mess

2:58:01.240 --> 2:58:04.440
 with plugging in laptops, it wouldn't project and yeah.

2:58:04.440 --> 2:58:08.380
 So you mentioned also Quantset Labs and things like that.

2:58:09.240 --> 2:58:13.640
 Can you give advice on how to hire great programmers

2:58:13.640 --> 2:58:14.600
 and great people?

2:58:14.600 --> 2:58:18.040
 Yeah, I would say, produce an open source project,

2:58:19.400 --> 2:58:21.560
 get people contributing to it and hire those people.

2:58:21.560 --> 2:58:25.080
 Yeah, I mean, you're doing it sort of,

2:58:25.080 --> 2:58:27.080
 you may be perhaps a little biased,

2:58:27.080 --> 2:58:30.320
 but that's probably 100% really good advice.

2:58:30.320 --> 2:58:31.800
 I find it hard to hire.

2:58:31.800 --> 2:58:34.480
 I still find it hard to hire, like in terms of,

2:58:34.480 --> 2:58:36.560
 I don't think that it's not hard to hire

2:58:36.560 --> 2:58:39.320
 if I've worked with somebody for a couple of weeks,

2:58:39.320 --> 2:58:43.600
 but an hour or two of interviews, I have no idea.

2:58:43.600 --> 2:58:47.880
 So that instinct, that radar of knowing if you're good

2:58:47.880 --> 2:58:50.720
 or not, that you've found that you're still not able to.

2:58:50.720 --> 2:58:53.240
 It's really hard, I mean, the resume can help,

2:58:53.240 --> 2:58:55.520
 but again, the resume is like a presentation

2:58:55.520 --> 2:58:58.840
 of the things they want you to see, not the reality of,

2:58:58.840 --> 2:59:02.800
 and there's also, you have to understand

2:59:02.800 --> 2:59:03.960
 what you're hiring for.

2:59:03.960 --> 2:59:06.800
 There are different stages and different kinds of skills.

2:59:06.800 --> 2:59:10.940
 And so it isn't just, one of the things I talk a lot about

2:59:10.940 --> 2:59:14.440
 internally at my company is just that the whole idea

2:59:14.440 --> 2:59:18.600
 of measuring ourselves against a single axis is flawed

2:59:18.600 --> 2:59:20.600
 because we're not, it's a multidimensional space

2:59:20.600 --> 2:59:22.120
 and how do you order a multidimensional space?

2:59:22.120 --> 2:59:23.440
 There isn't one ordering.

2:59:23.440 --> 2:59:26.160
 So this whole idea, you immediately get projected

2:59:26.160 --> 2:59:28.200
 into a thing when you're talking about hiring

2:59:28.200 --> 2:59:30.660
 or best or worst or better or not better.

2:59:30.660 --> 2:59:33.500
 So what is the thing you're actually needing?

2:59:33.500 --> 2:59:35.960
 And you can hire for that.

2:59:35.960 --> 2:59:39.040
 There is such a thing, generally, I really value people

2:59:39.040 --> 2:59:42.920
 who have the affect, that care about open source.

2:59:42.920 --> 2:59:45.720
 Like so in some cases, their affinity to open source

2:59:45.720 --> 2:59:48.100
 is simply kind of a filter of an affect.

2:59:49.100 --> 2:59:52.560
 However, I have found this interesting dichotomy

2:59:52.560 --> 2:59:58.520
 between open source contributors and product creation.

2:59:58.520 --> 3:00:00.560
 There's, I don't know if it's fully true,

3:00:00.560 --> 3:00:04.960
 but there does seem to be the more experienced,

3:00:04.960 --> 3:00:08.160
 the more affect somebody has an open source community,

3:00:08.160 --> 3:00:11.640
 the less ability to actually produce product that they have.

3:00:11.640 --> 3:00:13.520
 And the opposite is kind of true too.

3:00:13.520 --> 3:00:16.000
 The more product focused are, I find a lot of people,

3:00:16.000 --> 3:00:17.020
 I've talked to a lot of people who produce

3:00:17.020 --> 3:00:19.400
 really great products and they have a,

3:00:19.400 --> 3:00:21.120
 they're looking over the open source communities,

3:00:21.120 --> 3:00:23.320
 kind of wanting to participate and play,

3:00:23.320 --> 3:00:26.000
 but they've played here and they do a great job here

3:00:26.000 --> 3:00:29.520
 and then they don't necessarily have some of the same.

3:00:29.520 --> 3:00:32.040
 Now I don't think that's entirely necessary.

3:00:32.040 --> 3:00:34.880
 I think part of it is cultural, how they've emerged.

3:00:34.880 --> 3:00:36.300
 Because one of the things that open source communities

3:00:36.300 --> 3:00:39.160
 often lack is great product management,

3:00:39.160 --> 3:00:41.000
 like some product management energy.

3:00:41.000 --> 3:00:43.600
 That's brilliant, but you want both of those energies

3:00:43.600 --> 3:00:44.880
 in the same place together.

3:00:44.880 --> 3:00:45.840
 Yes, you really do.

3:00:45.840 --> 3:00:48.120
 And so a lot of it's creating these teams of people

3:00:48.120 --> 3:00:50.480
 that have these needed skills and attributes

3:00:50.480 --> 3:00:51.880
 that are hard.

3:00:51.880 --> 3:00:55.120
 And so one of the big things I look for is somebody

3:00:55.120 --> 3:00:57.800
 that fundamentally recognizes their need to learn.

3:00:57.800 --> 3:00:59.560
 Like one of the values that we have

3:00:59.560 --> 3:01:01.400
 in all of the things we do is learning.

3:01:01.400 --> 3:01:04.560
 Like if somebody thinks they know it all,

3:01:04.560 --> 3:01:06.240
 they're gonna struggle.

3:01:06.240 --> 3:01:09.440
 And some of that is just, there's more basic things

3:01:09.440 --> 3:01:12.780
 like humility, just being humble in the face

3:01:12.780 --> 3:01:14.400
 of all the things you don't know.

3:01:14.400 --> 3:01:15.840
 And that's step one of learning.

3:01:15.840 --> 3:01:16.960
 That's step one of learning, right?

3:01:16.960 --> 3:01:20.840
 And I've spent a lot of time learning, right?

3:01:20.840 --> 3:01:21.840
 Other people spend a lot more time,

3:01:21.840 --> 3:01:23.280
 but I've spent a lot of time learning.

3:01:23.280 --> 3:01:26.320
 My whole goal was to get a PhD because I love school

3:01:26.320 --> 3:01:28.240
 and I wanted to be a scientist.

3:01:28.240 --> 3:01:31.120
 And then what I found is what's been written about

3:01:31.120 --> 3:01:32.600
 elsewhere as well is the more I learned,

3:01:32.600 --> 3:01:33.780
 the more I didn't know.

3:01:33.780 --> 3:01:37.680
 The more I realized, man, I know about this,

3:01:37.680 --> 3:01:40.060
 but this is such a tiny thing in the global scope

3:01:40.060 --> 3:01:41.220
 of what I might wanna know about.

3:01:41.220 --> 3:01:43.840
 So I need to be listening a whole lot better

3:01:43.840 --> 3:01:47.360
 than I am just talking.

3:01:47.360 --> 3:01:48.840
 That's changed a little bit actually.

3:01:48.840 --> 3:01:50.600
 My wife says that I used to be a better listener.

3:01:50.600 --> 3:01:52.880
 Now that I'm so full of all these ideas I wanna do,

3:01:52.880 --> 3:01:55.520
 she kind of says, you gotta give people time to talk.

3:01:55.520 --> 3:01:58.400
 So you've succeeded on multiple dimensions.

3:01:58.400 --> 3:02:01.680
 So one is the tenure track faculty.

3:02:01.680 --> 3:02:03.080
 The other is just creating all these products

3:02:03.080 --> 3:02:04.320
 and building up the businesses,

3:02:04.320 --> 3:02:06.880
 then working with businesses.

3:02:06.880 --> 3:02:09.240
 Do you have advice for young people today

3:02:09.240 --> 3:02:13.880
 in high school and college of how to live a life

3:02:13.880 --> 3:02:18.280
 as nonlinear and as successful as yours,

3:02:18.280 --> 3:02:21.200
 a life that they could be proud of?

3:02:21.200 --> 3:02:22.960
 Well, that's a super compliment.

3:02:22.960 --> 3:02:24.200
 I'm humbled by that actually.

3:02:24.200 --> 3:02:27.960
 I would say a life they can be proud of.

3:02:27.960 --> 3:02:31.560
 Honestly, one thing that I've said to people is first,

3:02:31.560 --> 3:02:34.240
 find people you love and care about them.

3:02:34.240 --> 3:02:36.040
 Like family matters to me a lot.

3:02:36.040 --> 3:02:39.640
 And family means people you love and have committed to.

3:02:39.640 --> 3:02:42.160
 So it can be whatever you mean by that,

3:02:42.160 --> 3:02:45.120
 but you need to have a foundation.

3:02:45.120 --> 3:02:47.840
 So find people you love and wanna commit to and do that.

3:02:48.960 --> 3:02:52.200
 Cause it anchors you in a way that nothing else can.

3:02:52.200 --> 3:02:55.200
 And then you find other things.

3:02:55.200 --> 3:02:56.640
 And then kind of from out there,

3:02:56.640 --> 3:02:58.800
 you find other kinds of things you can commit to,

3:02:58.800 --> 3:03:03.240
 whether it's ideas or people or groups of people.

3:03:03.240 --> 3:03:06.400
 So, especially in high school,

3:03:06.400 --> 3:03:09.320
 I would say don't settle on what you think you know.

3:03:09.320 --> 3:03:13.320
 Like give yourself 10 years to think about the world.

3:03:13.320 --> 3:03:15.440
 Like I see a lot of high school students

3:03:15.440 --> 3:03:17.640
 who seem to know everything already.

3:03:17.640 --> 3:03:18.720
 I think I did too.

3:03:18.720 --> 3:03:20.360
 I think it's maybe natural,

3:03:20.360 --> 3:03:23.160
 but recognize that the things you care about,

3:03:23.160 --> 3:03:26.520
 you might change your perspective over time.

3:03:26.520 --> 3:03:28.600
 I certainly have over time.

3:03:28.600 --> 3:03:30.640
 I was really passionate about one specific thing

3:03:30.640 --> 3:03:32.520
 and I was kind of softened.

3:03:32.520 --> 3:03:35.760
 I was a big, I didn't like the Federal Reserve, right?

3:03:35.760 --> 3:03:38.480
 And there's still, we could have a longer conversation

3:03:38.480 --> 3:03:40.120
 about monetary policy and finances,

3:03:40.120 --> 3:03:45.120
 but I'm a little more nuanced in my perspective

3:03:46.000 --> 3:03:46.840
 at this point.

3:03:48.000 --> 3:03:50.160
 But that's one area where you learn about something,

3:03:50.160 --> 3:03:51.360
 go, ah, I wanna attack it.

3:03:52.440 --> 3:03:54.120
 Build, don't destroy.

3:03:55.160 --> 3:03:58.400
 Build, like so often the tendency is to not like something

3:03:58.400 --> 3:04:00.000
 and wanna go attack it.

3:04:00.000 --> 3:04:02.240
 Build something, build something to replace it.

3:04:02.240 --> 3:04:03.080
 Yeah.

3:04:03.080 --> 3:04:05.600
 Build up, attract people to your new thing.

3:04:05.600 --> 3:04:08.800
 You'll be far better, right?

3:04:08.800 --> 3:04:12.600
 You don't need to destroy something to build something else.

3:04:12.600 --> 3:04:14.880
 So that's, I guess, generally.

3:04:14.880 --> 3:04:19.120
 And then definitely like curiosity,

3:04:19.120 --> 3:04:22.680
 follow your curiosity and let it,

3:04:22.680 --> 3:04:24.600
 don't just follow the money.

3:04:24.600 --> 3:04:25.800
 And all of that, like you said,

3:04:25.800 --> 3:04:30.160
 is grounded in family, friendship, and ultimately love.

3:04:30.160 --> 3:04:31.200
 Yes.

3:04:31.200 --> 3:04:34.640
 Which is a great way to end it.

3:04:34.640 --> 3:04:37.080
 Travis, you're one of the most impactful people

3:04:37.080 --> 3:04:38.760
 in the engineering and the computer science

3:04:38.760 --> 3:04:39.920
 in the human world.

3:04:39.920 --> 3:04:43.520
 So I truly appreciate everything you've done.

3:04:43.520 --> 3:04:45.800
 And I really appreciate that you would spend

3:04:45.800 --> 3:04:46.960
 your valuable time with me.

3:04:46.960 --> 3:04:47.800
 It was an honor.

3:04:47.800 --> 3:04:48.840
 It was a real pleasure for me.

3:04:48.840 --> 3:04:50.520
 I appreciate that.

3:04:50.520 --> 3:04:52.080
 Thanks for listening to this conversation

3:04:52.080 --> 3:04:54.000
 with Travis Oliphant.

3:04:54.000 --> 3:04:55.320
 To support this podcast,

3:04:55.320 --> 3:04:57.900
 please check out our sponsors in the description.

3:04:57.900 --> 3:05:00.200
 And now, let me leave you with something

3:05:00.200 --> 3:05:04.060
 that in the programming world is called Hodgson's Law.

3:05:04.960 --> 3:05:08.120
 Every sufficiently advanced Lisp application

3:05:08.120 --> 3:05:12.520
 will eventually be re implemented in Python.

3:05:12.520 --> 3:05:31.520
 Thank you for listening and hope to see you next time.

