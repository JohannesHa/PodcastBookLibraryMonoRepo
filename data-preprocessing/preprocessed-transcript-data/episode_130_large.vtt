 The following is a conversation with Scott Aaronson, his second time on the podcast. He is a professor at UT Austin, director of the Quantum Information Center, and previously a professor at MIT. Last time we talked about quantum computing. This time we talk about computation complexity, consciousness, and theories of everything. I'm recording this intro, as you may be able to tell, in a very strange room in the middle of the night. I'm not really sure how I got here or how I'm going to get out, but Hunter S. Thompson saying I think applies to today and the last few days and actually the last couple of weeks. Life should not be a journey to the grave with the intention of arriving safely in a pretty and well preserved body, but rather to skid in broadside in a cloud of smoke, thoroughly used up, totally worn out, and loudly proclaiming, wow, what a ride. So I figured whatever I'm up to here, and yes, lots of wine is involved, I'm going to have to improvise, have to improvise, have to improvise, hence this recording. Okay, quick mention of each sponsor, followed by some thoughts related to the episode. First sponsor is SimpliSafe, a home security company I use to monitor and protect my apartment, though of course I'm always prepared with a fall back plan, as a man in this world must always be. Second sponsor is 8sleep, a mattress that cools itself, measures heart rate variability, has a nap, and has given me yet another reason to look forward to sleep, including the all important power nap. Third sponsor is ExpressVPN, the VPN I've used for many years to protect my privacy on the internet. Finally, the fourth sponsor is Better Help, online therapy when you want to face your demons with a licensed professional, not just by doing David Goggins like physical challenges like I seem to do on occasion. Please check out these sponsors in the description to get a discount and to support the podcast. As a side note, let me say that this is the second time I've recorded a conversation outdoors. The first one was with Steven Wolfram when it was actually sunny out, in this case it was raining, which is why I found a covered outdoor patio. But I learned a valuable lesson, which is that raindrops can be quite loud on the hard metal surface of a patio cover. I did my best with the audio, I hope it still sounds okay to you. I'm learning, always improving. In fact, as Scott says, if you always win, then you're probably doing something wrong. To be honest, I get pretty upset with myself when I fail, small or big, but I've learned that this feeling is priceless. It can be fuel, when channeled into concrete plans of how to improve. So if you enjoy this thing, subscribe on YouTube, review the Five Stars in Apple podcast, follow on Spotify, support on Patreon, or connect with me on Twitter at Lex Friedman. And now, here's my conversation with Scott Aaronson. Let's start with the most absurd question, but I've read you write some fascinating stuff about it, so let's go there. Are we living in a simulation? What difference does it make, Lex? I mean, I'm serious. What difference? Because if we are living in a simulation, it raises the question, how real does something have to be in simulation for it to be sufficiently immersive for us humans? But I mean, even in principle, how could we ever know if we were in one, right? A perfect simulation, by definition, is something that's indistinguishable from the real thing. Well, we didn't say anything about perfect. No, no, that's right. Well, if it was an imperfect simulation, if we could hack it, find a bug in it, then that would be one thing, right? If this was like The Matrix and there was a way for me to do flying kung fu moves or something by hacking the simulation, well then we would have to cross that bridge when we came to it, wouldn't we? At that point, it's hard to see the difference between that and just what people would ordinarily refer to as a world with miracles. What about from a different perspective, thinking about the universe as a computation, like a program running on a computer? That's kind of a neighboring concept. It is. It is an interesting and reasonably well defined question to ask, is the world computable? Does the world satisfy what we would call in CS the church touring thesis? That is, could we take any physical system and simulate it to any desired precision by a touring machine, given the appropriate input data, right? And so far, I think the indications are pretty strong that our world does seem to satisfy the church touring thesis. At least if it doesn't, then we haven't yet discovered why not. But now, does that mean that our universe is a simulation? Well, that word seems to suggest that there is some other larger universe in which it is running. And the problem there is that if the simulation is perfect, then we're never going to be able to get any direct evidence about that other universe. We will only be able to see the effects of the computation that is running in this universe. Well, let's imagine an analogy. Let's imagine a PC, a personal computer, a computer. Is it possible with the advent of artificial intelligence for the computer to look outside of itself to see, to understand its creator? I mean, that's a simple, is that a ridiculous analogy? Well, I mean, with the computers that we actually have, I mean, first of all, we all know that humans have done an imperfect job of enforcing the abstraction boundaries of computers, right? Like you may try to confine some program to a playpen, but as soon as there's one memory allocation error in the C program, then the program has gotten out of that playpen and it can do whatever it wants, right? This is how most hacks work, you know, viruses and worms and exploits. And, you know, you would have to imagine that an AI would be able to discover something like that. Now, you know, of course, if we could actually discover some exploit of reality itself, then, you know, then this whole, I mean, then in some sense we wouldn't have to philosophize about this, right? This would no longer be a metaphysical conversation. But the question is, what would that hack look like? Yeah, well, I have no idea. I mean, Peter Shor, you know, the very famous person in quantum computing, of course, has joked that maybe the reason why we haven't yet, you know, integrated general relativity in quantum mechanics is that, you know, the part of the universe that depends on both of them was actually left unspecified. And if we ever tried to do an experiment involving the singularity of a black hole or something like that, then, you know, the universe would just generate an overflow error or something, right? Yeah, we would just crash the universe. Now, you know, the universe, you know, has seemed to hold up pretty well for, you know, 14 billion years, right? So, you know, my, you know, a Occam's razor kind of guess has to be that, you know, it will continue to hold up, you know, that the fact that we don't know the laws of physics governing some phenomenon is not a strong sign that probing that phenomenon is going to crash the universe, right? But, you know, of course, I could be wrong. But do you think on the physics side of things, you know, there's been recently a few folks, Eric Weinstein and Stephen Wolfram that came out with a theory of everything. I think there's a history of physicists dreaming and working on the unification of all the laws of physics. Do you think it's possible that once we understand more physics, not necessarily the unification of the laws, but just understand physics more deeply at the fundamental level, we'll be able to start, you know, I mean, part of this is humorous, but looking to see if there's any bugs in the universe that could be exploited for, you know, traveling at not just speed of light, but just traveling faster than our current spaceships can travel, all that kind of stuff. Well, I mean, to travel faster than our current spaceships could travel, you wouldn't need to find any bug in the universe, right? The known laws of physics, you know, let us go much faster up to the speed of light, right? And, you know, when people want to go faster than the speed of light, well, we actually know something about what that would entail, namely that, you know, according to relativity, that seems to entail communication backwards in time. Okay, so then you have to worry about closed time like curves and all of that stuff. So, you know, in some sense, we sort of know the price that you have to pay for these things, right? But under the current understanding of physics. That's right. That's right. We can't, you know, say that they're impossible, but we, you know, we know that sort of a lot else in physics breaks, right? So, now regarding Eric Weinstein and Stephen Wolfram, like, I wouldn't say that either of them has a theory of everything. I would say that they have ideas that they hope, you know, could someday lead to a theory of everything. Is that a worthy pursuit? Well, I mean, certainly, let's say by theory of everything, you know, we don't literally mean a theory of cats and of baseball and, you know, but we just mean it in the more limited sense of everything, a fundamental theory of physics, right? Of all of the fundamental interactions of physics, of course, such a theory, even after we had it, you know, would leave the entire question of all the emergent behavior, right? You know, to be explored. So, it's only everything for a specific definition of everything. Okay, but in that sense, I would say, of course, that's worth pursuing. I mean, that is the entire program of fundamental physics, right? All of my friends who do quantum gravity, who do string theory, who do anything like that, that is what's motivating them. Yeah, it's funny, though, but, I mean, Eric Weinstein talks about this. It is, I don't know much about the physics world, but I know about the AI world, and it is a little, it is a little bit taboo to talk about AGI, for example, on the AI side. So, really, to talk about the big dream of the community, I would say, because it seems so far away, it's almost taboo to bring it up, because, you know, it's seen as the kind of people that dream about creating a truly superhuman level intelligence. That's really far out there, people, because we're not even close to that. And it feels like the same thing is true for the physics community. I mean, Stephen Hawking certainly talked constantly about theory of everything, right? You know, I mean, people, you know, use those terms who were, you know, some of the most respected people in the whole world of physics, right? But, I mean, I think that the distinction that I would make is that people might react badly if you use the term in a way that suggests that you, you know, thinking about it for five minutes, have come up with this major new insight about it, right? It's difficult. Stephen Hawking is not a great example, because I think you can do whatever the heck you want when you get to that level. And I certainly see, like, senior faculty, you know, that, you know, at that point, that's one of the nice things about getting older is you stop giving a damn. But community as a whole, they tend to roll their eyes very quickly at stuff that's outside the quote unquote mainstream. Well, let me put it this way. I mean, if you asked, you know, Ed Witten, let's say, who is, you know, you might consider the leader of the string community, and thus, you know, very, very mainstream, in a certain sense, but he would have no hesitation in saying, you know, of course, you know, they're looking for a, you know, you know, a unified description of nature of, you know, of general relativity of quantum mechanics of all the fundamental interactions of nature, right? Now, you know, whether people would call that a theory of everything, whether they would use that term, that might vary. You know, Lenny Susskind would definitely have no problem telling you that, you know, if that's what we want, right? TK For me, who loves human beings and psychology, it's kind of ridiculous to say a theory that unifies the laws of physics gets you to understand everything. I would say you're not even close to understanding everything. TK Yeah, right. I mean, the word everything is a little ambiguous here. And then people will get into debates about, you know, reductionism versus emergentism and blah, blah, blah. And so in not wanting to say theory of everything, people might just be trying to short circuit that debate and say, you know, look, you know, yes, we want a fundamental theory of, you know, the particles and interactions of nature. TK Let me bring up the next topic that people don't want to mention, although they're getting more comfortable with it, is consciousness. You mentioned that you have a talk on consciousness that I watched five minutes of, but the internet connection was really bad. TK Was this my talk about, you know, refuting the integrated information theory? TK Yes. TK Which was a particular account of consciousness that, yeah, I think one can just show it doesn't work. Much harder to say what does work. TK Let me ask, maybe it'd be nice to comment on, you talk about also like the semi hard problem of consciousness or like almost hard problem or kind of hard. TK Pretty hard problem, I think I call it. TK So maybe can you talk about that, their idea of the approach to modeling consciousness and why you don't find it convincing? What is it, first of all? TK Okay, well, so what I called the pretty hard problem of consciousness, this is my term, although many other people have said something equivalent to this, okay? But it's just, you know, the problem of, you know, giving an account of just which physical systems are conscious and which are not. Or, you know, if there are degrees of consciousness, then quantifying how conscious a given system is. TK Oh, awesome. So that's the pretty hard problem. TK Yeah, that's what I mean. TK That's it. I'm adopting it. I love it. That's a good ring to it. TK And so, you know, the infamous hard problem of consciousness is to explain how something like consciousness could arise at all, you know, in a material universe, right? Or, you know, why does it ever feel like anything to experience anything, right? And, you know, so I'm trying to distinguish from that problem, right? And say, you know, no, okay, I would merely settle for an account that could say, you know, is a fetus conscious? You know, if so, at which trimester? You know, is a dog conscious? You know, what about a frog, right? TK Or even as a precondition, you take that both these things are conscious, tell me which is more conscious. TK Yeah, for example, yes. Yeah, yeah. I mean, if consciousness is some multidimensional vector, well, just tell me in which respects these things are conscious and in which respect they aren't, right? And, you know, and have some principled way to do it where you're not, you know, carving out exceptions for things that you like or don't like, but could somehow take a description of an arbitrary physical system, and then just based on the physical properties of that system, or the informational properties, or how it's connected, or something like that, just in principle, calculate, you know, its degree of consciousness, right? I mean, this, this would be the kind of thing that we would need, you know, if we wanted to address questions, like, you know, what does it take for a machine to be conscious, right? Or when are, you know, when should we regard AIs as being conscious? So now this IIT, this integrated information theory, which has been put forward by Giulio Tinoni and a bunch of his collaborators over the last decade or two, this is noteworthy, I guess, as a direct attempt to answer that question, to, you know, answer the, to address the pretty hard problem, right? And they give a, a criterion that's just based on how a system is connected. So you, so it's up to you to sort of abstract the system, like a brain or a microchip, as a collection of components that are connected to each other by some pattern of connections, you know, and, and to specify how the components can influence each other, you know, like where the inputs go, you know, where they affect the outputs. But then once you've specified that, then they give this quantity that they call phi, you know, the Greek letter phi. And the definition of phi has actually changed over time. It changes from one paper to another, but in all of the variations, it involves something about what we in computer science would call graph expansion. So basically what this means is that they want, in order to get a large value of phi, it should not be possible to take your system and partition it into two components that are only weakly connected to each other. Okay. So whenever we take our system and sort of try to split it up into two, then there should be lots and lots of connections going between the two components. Okay. Well, I understand what that means on a graph. Do they formalize what, how to construct such a graph or data structure, whatever, or is this one of the criticism I've heard you kind of say is that a lot of the very interesting specifics are usually communicated through like natural language, like through words. So it's like the details aren't always clear. Well, it's true. I mean, they have nothing even resembling a derivation of this phi. Okay. So what they do is they state a whole bunch of postulates, you know, axioms that they think that consciousness should satisfy. And then there's some verbal discussion. And then at some point, phi appears. Right. Right. And this, this was what the first thing that really made the hair stand on my neck, to be honest, because they are acting as if there is a derivation. They're acting as if, you know, you're supposed to think that this is a derivation and there's nothing even remotely resembling a derivate. They just pull the phi out of a hat completely. Is one of the key criticisms to you is that details are missing or is there something more fundamental? That's not even the key criticism. That's just, that's just a side point. Okay. The, the core of it is that I think that the, you know, that they want to say that a system is more conscious the larger its value of phi. And I think that that is obvious nonsense. Okay. As soon as you think about it for like a minute, as soon as you think about it in terms of, could I construct a system that had an enormous value of phi, like, you know, even larger than the brain has, but that is just implementing an error correcting code, you know, doing nothing that we would associate with, you know, intelligence or consciousness or any of it. The answer is yes, it is easy to do that. Right. And so I wrote blog posts, just making this point that, yeah, it's easy to do that. Now, you know, Tinoni's response to that was actually kind of incredible, right? I mean, I, I, I admired it in a way because instead of disputing any of it, he just bit the bullet in the sense, you know, he was one of the, the, uh, the most, uh, uh, audacious bullet bitings I've ever seen in my career. Okay. He said, okay, then fine. You know, this system that just applies this error correcting code it's conscious, you know, and if it has a much larger value of phi than you or me, it's much more conscious than you and me. You know, you, we just have to accept what the theory says because, you know, science is not about confirming our intuitions. It's about challenging them. And, you know, this is what my theory predicts that this thing is conscious and, you know, or super duper conscious. And how are you going to prove me wrong? So the way I would argue against your blog posts is I would say, yes, sure. You're right in general, but for naturally arising systems developed through the process of evolution on earth, the, this rule of the larger fee being associated, being associated with more consciousness is correct. Yeah. So that's not what he said at all. Right. Right. Because he wants this to be completely general. So we can apply to even computers. Yeah. I mean, I mean, the, the whole interest of the theory is the, you know, the hope that it could be completely general apply to aliens, to computers, to animals, coma patients, to any of it. Right. And so, so, so he just said, well, you know, Scott is relying on his intuition, but, you know, I'm relying on this theory and, you know, to me it was almost like, you know, are we being serious here? Like, like, like, you know, like, like, okay, yes, in science we try to learn highly nonintuitive things, but what we do is we first test the theory on cases where we already know the answer. Right. Like if we, if someone had a new theory of temperature, right, then, you know, maybe we could check that it says that boiling water is hotter than ice. And then if it says that the sun is hotter than anything, you know, you've ever experienced, then maybe we, we trust that extrapolation. Right. But like this, this theory, like if, if, you know, it's now saying that, you know, a, a gigantic grit, like regular grid of exclusive or gates can be way more conscious than, you know, a person or than, than any animal can be, you know, even if it, you know, is, you know, is, is, is, is so uniform that it might as well just be a blank wall. Right. And, and so now the point is if, if this theory is sort of getting wrong, the question is a blank wall, you know, more conscious than a person, then I would say, what is, what is there for it to get right? So your, your sense is a blank wall is not more conscious than a human being. Yeah. I mean, I mean, I mean, you could say that I am taking that as one of my axioms. I'm saying, I'm saying that if, if a theory of consciousness is, is getting that wrong, then whatever it is talking about at that point, I, I, I'm not going to call it consciousness. I'm going to use a different word. You have to use a different word. I mean, it's also, it's possible just like with intelligence that us humans conveniently define these very difficult to understand concepts in a very human centric way. Just like the Turing test really seems to define intelligence as a thing that's human like. Right. But I would say that with any, uh, concept, you know, there's, uh, uh, uh, you know, like we, we, we, we first need to define it. Right. And a definition is only a good definition if it matches what we thought we were talking about prior to having a definition. Right. And I would say that, you know, uh, fee as a definition of consciousness fails that test. That is my argument. So, okay. So let's take a further step. So you mentioned that the universe might be a Turing machine. So like it might be computations or simulatable by one anyway, simulated by one. So what's your sense about consciousness? Do you think consciousness is computation that we don't need to go to any place outside of the computable universe to, uh, you know, to, to understand consciousness, to build consciousness, to measure consciousness, all those kinds of things? I don't know. These are what, uh, you know, have been called the, the vertiginous questions, right? There's the questions like, like, uh, you know, you get a feeling of vertigo and thinking about them. Right. I mean, I certainly feel like, uh, I am conscious in a way that is not reducible to computation, but why should you believe me? Right. I mean, and, and, and if you said the same to me, then why should I believe you? But as computer scientists, I feel like a computer could be, could achieve human level intelligence, but, and that's actually a feeling and a hope. That's not a scientific belief. It's just, we've built up enough intuition, the same kind of intuition you use in your blog. You know, that's what scientists do. They, I mean, some of it is a scientific method, but some of it is just damn good intuition. I don't have a good intuition about consciousness. Yeah. I'm not sure that anyone does or has in the, you know, 2,500 years that these things have been discussed, Lex. But do you think we will? Like one of the, I've gotten a chance to attend, can't wait to hear your opinion on this, but attend the Neuralink event. And, uh, one of the dreams there is to, uh, you know, basically push neuroscience forward. And the hope with neuroscience is that, uh, we can inspect the machinery from which all this fun stuff emerges and see, we're going to notice something special, some special sauce from which something like consciousness or cognition emerges. Yeah. Well, it's clear that we've learned an enormous amount about neuroscience. We've learned an enormous amount about computation, you know, about machine learning, about AI, how to get it to work. We've learned, uh, an enormous amount about the underpinnings of the physical world, you know, and, you know, from one point of view, that's like, uh, an enormous distance that we've traveled along the road to understanding consciousness. From another point of view, you know, the distance still to be traveled on the road, you know, maybe seems no shorter than it was at the beginning. Right? So it's very hard to say. I mean, you know, these are questions like, like in, in, in sort of trying to have a theory of consciousness, there's sort of a problem where it feels like it's not just that we don't know how to make progress. It's that it's hard to specify what could even count as progress, right? Because no matter what scientific theory someone proposed, someone else could come along and say, well, you've just talked about the mechanism. You haven't said anything about what breathes fire into the mechanism, what really makes there something that it's like to be it. Right. And that seems like an objection that you could always raise no matter, you know, how much someone elucidated the details of how the brain works. Okay. Let's go to the Turing test and the Lobner Prize. I have this intuition, call me crazy, but we, that a machine to pass the Turing test and it's full, whatever the spirit of it is, we can talk about how to formulate the perfect Turing test, that that machine has to be conscious. We at least have to, I have a very low bar of what consciousness is. I tend to, I tend to think that the emulation of consciousness is as good as consciousness. So the consciousness is just a dance, a social, a social, a shortcut, like a nice, useful tool, but I tend to connect intelligence consciousness together. So by, by that, do you, maybe just to ask what, what role does consciousness play? Do you think it passed in the Turing test? Well, look, I mean, it's almost tautologically true that if we had a machine that passed the Turing test, then it would be emulating consciousness. Right? So if your position is that, you know, emulation of consciousness is consciousness, then so, you know, by, by definition, any machine that passed the Turing test would be conscious. But it's, but I mean, we know that you could say that, you know, that, that is just a way to rephrase the original question, you know, is an emulation of consciousness, you know, necessarily conscious. Right. And you can, can, you know, I hear, I'm not saying anything new that hasn't been debated ad nauseum in the literature. Okay. But, you know, you could imagine some very hard cases, like imagine a machine that passed the Turing test, but that did so just by an enormous cosmological sized lookup table that just cashed every possible conversation that could be had. The old Chinese room. Well, well, yeah, yeah. But, but this is, I mean, I mean, the Chinese room actually would be doing some computation, at least in Searle's version. Right. Here, I'm just talking about a table lookup. Okay. Now it's true that for conversations of a reasonable length, this, you know, lookup table would be so enormous that wouldn't even fit in the observable universe. Okay. But supposing that you could build a big enough lookup table and then just, you know, pass the Turing test just by looking up what the person said. Right. Are you going to regard that as conscious? Okay. Let me try to make this formal and then you can shut it down. I think that the emulation of something is that something, if there exists in that system, a black box that's full of mystery. So like, full of mystery to whom? To human specters. So does that mean that consciousness is relative to the observer? Like, could something be conscious for us, but not conscious for an alien that understood better what was happening inside the black box? Yes. So that if inside the black box is just a lookup table, the alien that saw that would say this is not conscious. To us, another way to phrase the black box is layers of abstraction, which make it very difficult to see to the actually underlying functionality of the system. And then we observe just the abstraction. And so it looks like magic to us. But once we understand the inner machinery, it stops being magic. And so like, that's a prerequisite is that you can't know how it works, or some part of it, because then there has to be in our human mind, entry point for the magic. So that's a formal definition of the system. Yeah, well, look, I mean, I explored a view in this essay I wrote called The Ghost in the Quantum Touring Machine seven years ago that is related to that, except that I did not want to have consciousness be relative to the observer, right? Because I think that if consciousness means anything, it is something that is experienced by the entity that is conscious, right? Like, I don't need you to tell me that I'm conscious, nor do you need me to tell you that you are, right? But basically, what I explored there is are there aspects of a system like a brain that just could not be predicted even with arbitrarily advanced future technologies? It's because of chaos combined with quantum mechanical uncertainty and things like that. I mean, that actually could be a property of the brain, you know, if true, that would distinguish it in a principled way, at least from any currently existing computer. Not from any possible computer, but yeah, yeah. This is a thought experiment. So if I gave you information that the entire history of your life, basically explain away free will with a lookup table, say that this was all predetermined, that everything you experienced has already been predetermined, wouldn't that take away your consciousness? Wouldn't you, yourself, wouldn't the experience of the world change for you in a way that you can't take back? Well, let me put it this way. If you could do like in a Greek tragedy where, you know, you would just write down a prediction for what I'm going to do and then maybe you put the prediction in a sealed box and maybe, you know, you open it later and you show that you knew everything I was going to do or, you know, of course, the even creepier version would be you tell me the prediction and then I try to falsify it, my very effort to falsify it makes it come true, right? Let's even forget that, you know, that version as convenient as it is for fiction writers, right? Let's just do the version where you put the prediction into a sealed envelope, okay? But if you could reliably predict everything that I was going to do, I'm not sure that that would destroy my sense of being conscious, but I think it really would destroy my sense of having free will, you know, and much, much more than any philosophical conversation could possibly do that, right? And so I think it becomes extremely interesting to ask, you know, could such predictions be done, you know, even in principle, is it consistent with the laws of physics to make such predictions, to get enough data about someone that you could actually generate such predictions without having to kill them in the process to, you know, slice their brain up into little slivers or something. I mean, it's theoretically possible, right? Well, I don't know. I mean, it might be possible, but only at the cost of destroying the person, right? I mean, it depends on how low you have to go in sort of the substrate. Like if there was a nice digital abstraction layer, if you could think of each neuron as a kind of transistor computing a digital function, then you could imagine some nanorobots that would go in and would just scan the state of each transistor, you know, of each neuron and then, you know, make a good enough copy, right? But if it was actually important to get down to the molecular or the atomic level, then, you know, eventually you would be up against quantum effects. You would be up against the unclonability of quantum states. So I think it's a question of how good of a replica, how good does the replica have to be before you're going to count it as actually a copy of you or as being able to predict your actions. That's a totally open question. Yeah, yeah, yeah. And especially once we say that, well, look, maybe there's no way to, you know, to make a deterministic prediction because, you know, we know that there's noise buffeting the brain around, presumably even quantum mechanical uncertainty, you know, affecting the sodium ion channels, for example, whether they open or they close. You know, there's no reason why over a certain time scale that shouldn't be amplified, just like we imagine happens with the weather or with any other, you know, chaotic system. So if that stuff is important, right, then we would say, well, you know, you can't, you know, you're never going to be able to make an accurate enough copy. But now the hard part is, well, what if someone can make a copy that sort of no one else can tell apart from you, right? It says the same kinds of things that you would have said, maybe not exactly the same things because we agree that there's noise, but it says the same kinds of things. And maybe you alone would say, no, I know that that's not me, you know, it's, it doesn't share my, I haven't felt my consciousness leap over to that other thing. I still feel it localized in this version, right? And then why should anyone else believe you? What are your thoughts? I'd be curious, you're a really good person to ask, which is Penrose's, Roger Penrose's work on consciousness, saying that there, you know, there is some, there's some, with axons and so on, there might be some biological places where quantum mechanics can come into play and through that create consciousness somehow. Yeah. Okay. Well, um, uh, of course, you know, I read Penrose's books as a teenager. They had a huge impact on me. Uh, uh, five or six years ago, I had the privilege to actually talk these things over with Penrose, you know, at some length at a conference in Minnesota. And, uh, you know, he is, uh, uh, you know, an amazing, uh, personality. I admire the fact that he was even raising such, uh, audacious questions at all. Uh, but you know, to, to, to answer your question, I think the first thing we need to get clear on is that he is not merely saying that quantum mechanics is relevant to consciousness, right? That would be like, um, you know, that would be tame compared to what he is saying, right? He is saying that, you know, even quantum mechanics is not good enough, right? If, because if, if supposing for example, that the brain were a quantum computer, I know that's still a computer, you know, in fact, a quantum computer can be simulated by an ordinary computer. It might merely need exponentially more time in order to do so, right? So that's simply not good enough for him. Okay. So what he wants is for the brain to be a quantum gravitational computer or, or, uh, uh, he wants the brain to be exploiting as yet unknown laws of quantum gravity. Okay. Which would, which would be uncomputable. That's the key point. Okay. Yes. Yes. That would be literally uncomputable. And I've asked him, you know, to clarify this, but uncomputable, even if you had an Oracle for the halting problem or, you know, and, and, or, you know, as high up as you want to go and the sort of high, the usual hierarchy of uncomputability, he wants to go beyond all of that. Okay. So, so, you know, just, just to be clear, like, you know, if we're keeping count of how many speculations, you know, there's probably like at least five or six of them, right? There's first of all, that there is some quantum gravity theory that would involve this kind of uncomputability, right? Most people who study quantum gravity would not agree with that. They would say that what we've learned, you know, what little we know about quantum gravity from the, this ADS CFT correspondence, for example, has been very much consistent with the broad idea of nature being computable, right? But, but all right, but, but supposing that he's right about that, then, you know, what most physicists would say is that whatever new phenomena there are in quantum gravity, you know, they might be relevant at the singularities of black holes. They might be relevant at the big bang. They are plainly not relevant to something like the brain, you know, that is operating at ordinary temperatures, you know, with ordinary chemistry and, you know, the, the, the physics underlying the brain, they, they would say that we have, you know, the fundamental physics of the brain, they would say that we've pretty much completely known for, for generations now, right? Because, you know, quantum field theory lets us sort of parameterize our ignorance, right? I mean, Sean Carroll has made this case and, you know, in great detail, right? That sort of whatever new effects are coming from quantum gravity, you know, they are sort of screened off by quantum field theory, right? And this is, this brings, you know, brings us to the whole idea of effective theories, right? But the, like we have, you know, the, in like in the standard model of elementary particles, right? We have a quantum field theory that seems totally adequate for all of the terrestrial phenomena, right? The only things that it doesn't, you know, explain are, well, first of all, you know, the details of gravity, if you were to probe it, like at, at, you know, extremes of, you know, curvature or like incredibly small distances, it doesn't explain dark matter. It doesn't explain black hole singularities, right? But these are all very exotic things, very, you know, far removed from our life on earth, right? So for Penrose to be right, he needs, you know, these phenomena to somehow affect the brain. He needs the brain to contain antennae that are sensitive to this as yet unknown physics, right? And then he needs a modification of quantum mechanics, okay? So he needs quantum mechanics to actually be wrong, okay? He needs, what he wants is what he calls an objective reduction mechanism or an objective collapse. So this is the idea that once quantum states get large enough, then they somehow spontaneously collapse, right? That, you know, and this is an idea that lots of people have explored. You know, there's something called the GRW proposal that tries to, you know, say something along those lines, you know, and these are theories that actually make testable predictions, right? Which is a nice feature that they have. But, you know, the very fact that they're testable may mean that in the, you know, in the coming decades, we may well be able to test these theories and show that they're wrong, right? You know, we may be able to test some of Penrose's ideas. If not, not his ideas about consciousness, but at least his ideas about an objective collapse of quantum states, right? And people have actually, like Dick Balmeister, have actually been working to try to do these experiments. They haven't been able to do it yet to test Penrose's proposal, okay? But Penrose would need more than just an objective collapse of quantum states, which would already be the biggest development in physics for a century since quantum mechanics itself, okay? He would need for consciousness to somehow be able to influence the direction of the collapse so that it wouldn't be completely random, but that, you know, your dispositions would somehow influence the quantum state to collapse more likely this way or that way, okay? Finally, Penrose, you know, says that all of this has to be true because of an argument that he makes based on Gödel's incompleteness theorem, okay? Now, like I would say the overwhelming majority of computer scientists and mathematicians who have thought about this, I don't think that Gödel's incompleteness theorem can do what he needs it to do here, right? I don't think that that argument is sound, okay? But that is, you know, that is sort of the tower that you have to ascend to if you're going to go where Penrose goes. And the intuition he uses with the incompleteness theorem is that basically that there's important stuff that's not computable? Is that where he takes it? It's not just that because, I mean, everyone agrees that there are problems that are uncomputable, right? That's a mathematical theorem, right? But what Penrose wants to say is that, you know, for example, there are statements, you know, given any formal system, you know, for doing math, right? There will be true statements of arithmetic that that formal system, you know, if it's adequate for math at all, if it's consistent and so on, will not be able to prove. A famous example being the statement that that system itself is consistent, right? No, you know, good formal system can actually prove its own consistency. That can only be done from a stronger formal system, which then can't prove its own consistency and so on forever, okay? That's Gödel's theorem. But now, why is that relevant to consciousness, right? Well, you know, I mean, the idea that it might have something to do with consciousness as an old one, Gödel himself apparently thought that it did. You know, Lucas thought so, I think, in the 60s. And Penrose is really just, you know, sort of updating what they and others had said. I mean, you know, the idea that Gödel's theorem could have something to do with consciousness was, you know, in 1950, when Alan Turing wrote his article about the Turing test, he already, you know, was writing about that as like an old and well known idea and as a wrong one that he wanted to dispense with. Okay, but the basic problem with this idea is, you know, Penrose wants to say that and all of his predecessors here, you know, want to say that, you know, even though, you know, this given formal system cannot prove its own consistency, we as humans sort of looking at it from the outside can just somehow see its consistency, right? And the, you know, the rejoinder to that, you know, from the very beginning has been, well, can we really? I mean, maybe, you know, maybe he, Penrose can, but, you know, can the rest of us, right? And, you know, I noticed that, you know, I mean, it is perfectly plausible to imagine a computer that could say, you know, it would not be limited to working within a single formal system, right? They could say, I am now going to adopt the hypothesis that my formal system is consistent, right? And I'm now going to see what can be done from that stronger vantage point and so on. And, you know, and I'm going to add new axioms to my system. Totally plausible. There's absolutely, Gödel's theorem has nothing to say about against an AI that could repeatedly add new axioms. All it says is that there is no absolute guarantee that when the AI adds new axioms that it will always be right. Okay. And, you know, and that's, of course, the point that Penrose pounces on, but the reply is obvious. And, you know, it's one that Alan Turing made 70 years ago. Namely, we don't have an absolute guarantee that we're right when we add a new axiom. We never have, and plausibly we never will. So on Alan Turing, you took part in the Lubna Prize? Not really. No, I didn't. I mean, there was this kind of ridiculous claim that was made some almost a decade ago about a chat bot called Eugene Goostman. I guess you didn't participate as a judge in the Lubna Prize. I didn't. But you participated as a judge in that, I guess it was an exhibition event or something like that, or with Eugene... Eugene Goostman, that was just me writing a blog post because some journalist called me to ask about it. Did you ever chat with him? I thought that... I did chat with Eugene Goostman. I mean, it was available on the web. Oh, interesting. I didn't know that. So yeah. So all that happened was that a bunch of journalists started writing breathless articles about a first chat bot that passes the Turing test. And it was this thing called Eugene Goostman that was supposed to simulate a 13 year old boy. And apparently someone had done some test where people were less than perfect, let's say, distinguishing it from a human. And they said, well, if you look at Turing's paper and you look at the percentages that he talked about, then it seemed like we're past that threshold. And I had a different way to look at it instead of the legalistic way, like let's just try the actual thing out and let's see what it can do with questions like, is Mount Everest bigger than a shoebox? Or just like the most obvious questions. And the answer is, well, it just kind of parries you because it doesn't know what you're talking about. So just to clarify exactly in which way they're obvious. They're obvious in the sense that you convert the sentences into the meaning of the objects they represent and then do some basic obvious common sense reasoning with the objects that the sentences represent. Right. It was not able to answer or even intelligently respond to basic common sense questions. But let me say something stronger than that. There was a famous chatbot in the 60s called Eliza that managed to actually fool a lot of people. Or people would pour their hearts out into this Eliza because it simulated a therapist. And most of what it would do is it would just throw back at you whatever you said. And this turned out to be incredibly effective. Maybe therapists know this. This is one of their tricks. But it really had some people convinced. But this thing was just like, I think it was literally just a few hundred lines of Lisp code. It was not only was it not intelligent, it wasn't especially sophisticated. It was like a simple little hobbyist program. And Eugene Goostman, from what I could see, was not a significant advance compared to Eliza. And that was really the point I was making. In some sense, you didn't need a computer science professor to sort of say this. Anyone who was looking at it and who just had an ounce of sense could have said the same thing. But because these journalists were calling me, the first thing I said was, well, I'm a quantum computing person. I'm not an AI person. You shouldn't ask me. Then they said, look, you can go here and you can try it out. I said, all right. All right. So I'll try it out. This whole discussion, it got a whole lot more interesting in just the last few months. Yeah. I'd love to hear your thoughts about GPT3. In the last few months, the world has now seen a chat engine or a text engine, I should say, called GPT3. I think it still does not pass a Turing test. There are no real claims that it passes the Turing test. This comes out of the group at OpenAI, and they've been relatively careful in what they've claimed about the system. But I think as clearly as Eugene Goostman was not in advance over Eliza, it is equally clear that this is a major advance over Eliza or really over anything that the world has seen before. This is a text engine that can come up with kind of on topic, reasonable sounding completions to just about anything that you ask. You can ask it to write a poem about topic X in the style of poet Y and it will have a go at that. And it will do not a great job, not an amazing job, but a passable job. Definitely as good as, in many cases, I would say better than I would have done. You can ask it to write an essay, like a student essay, about pretty much any topic and it will get something that I am pretty sure would get at least a B minus in the most high school or even college classes. And in some sense, the way that it did this, the way that it achieves this, Scott Alexander of the much mourned blog, Slate Star Codex, had a wonderful way of putting it. He said that they basically just ground up the entire internet into a slurry. And to tell you the truth, I had wondered for a while why nobody had tried that. Why not write a chat bot by just doing deep learning over a corpus consisting of the entire web? And so now they finally have done that. And the results are very impressive. It's not clear that people can argue about whether this is truly a step toward general AI or not, but this is an amazing capability that we didn't have a few years ago. A few years ago, if you had told me that we would have it now, that would have surprised me. And I think that anyone who denies that is just not engaging with what's there. So their model, it takes a large part of the internet and compresses it in a small number of parameters relative to the size of the internet and is able to, without fine tuning, do a basic kind of a querying mechanism, just like you described where you specify a kind of poet and then you want to write a poem. And it somehow is able to do basically a lookup on the internet of relevant things. How else do you explain it? Well, okay. The training involved massive amounts of data from the internet and actually took lots and lots of computer power, lots of electricity. There are some very prosaic reasons why this wasn't done earlier. But it costs some tens of millions of dollars, I think. Less, but approximately like a few million dollars. Oh, okay. Oh, really? Okay. It's more like four or five. Oh, all right. All right. Thank you. I mean, as they scale it up, it will... It'll cost, but then the hope is cost comes down and all that kind of stuff. But basically, it is a neural net or what's now called a deep net, but they're basically the same thing. So it's a form of algorithm that people have known about for decades. But it is constantly trying to solve the problem, predict the next word. So it's just trying to predict what comes next. It's not trying to decide what it should say, what ought to be true. It's trying to predict what someone who had said all of the words up to the preceding one would say next. Although to push back on that, that's how it's trained. That's right. No, of course. It's arguable that our very cognition could be a mechanism as that simple. Oh, of course. Of course. I never said that it wasn't. Right. But... Yeah. I mean, and sometimes that is... If there is a deep philosophical question that's raised by GPT3, then that is it, right? Are we doing anything other than this predictive processing, just trying to constantly trying to fill in a blank of what would come next after what we just said up to this point? Is that what I'm doing right now? It's impossible. So the intuition that a lot of people have, well, look, this thing is not going to be able to reason, the Mountain Everest question. Do you think it's possible that GPT5, 6, and 7 would be able to, with this exact same process, begin to do something that looks like... Is indistinguishable to us humans from reasoning? I mean, the truth is that we don't really know what the limits are, right? Right. Exactly. Because what we've seen so far is that GPT3 was basically the same thing as GPT2, but just with a much larger network, more training time, bigger training corpus, right? And it was very noticeably better than its immediate predecessor. So we don't know where you hit the ceiling here, right? I mean, that's the amazing part and maybe also the scary part, right? Now, my guess would be that at some point, there has to be diminishing returns. It can't be that simple, can it? Right? But I wish that I had more to base that guess on. Right. Yeah. I mean, some people say that there will be a limitation on the... We're going to hit a limit on the amount of data that's on the internet. Yes. Yeah. So sure. So there's certainly that limit. I mean, there's also... If you are looking for questions that will stump GPT3, you can come up with some without... Even getting it to learn how to balance parentheses, right? It doesn't do such a great job, right? And its failures are ironic, right? Like basic arithmetic, right? And you think, isn't that what computers are supposed to be best at? Isn't that where computers already had us beat a century ago? Right? And yet that's where GPT3 struggles, right? But it's amazing that it's almost like a young child in that way, right? But somehow, because it is just trying to predict what comes next, it doesn't know when it should stop doing that and start doing something very different, like some more exact logical reasoning, right? And so one is naturally led to guess that our brain sort of has some element of predictive processing, but that it's coupled to other mechanisms, right? That it's coupled to, first of all, visual reasoning, which GPT3 also doesn't have any of, right? Although there's some demonstration that there's a lot of promise there using... Oh yeah, it can complete images. That's right. And using exact same kind of transformer mechanisms to like watch videos on YouTube. And so the same self supervised mechanism to be able to look, it'd be fascinating to think what kind of completions you could do. Oh yeah, no, absolutely. Although like if we ask it to like, you know, a word problem that involve reasoning about the locations of things in space, I don't think it does such a great job on those, right? To take an example. And so the guess would be, well, you know, humans have a lot of predictive processing, a lot of just filling in the blanks, but we also have these other mechanisms that we can couple to, or that we can sort of call as subroutines when we need to. And that maybe, you know, to go further, that one would want to integrate other forms of reasoning. Let me go on another topic that is amazing, which is complexity. And then start with the most absurdly romantic question of what's the most beautiful idea in computer science or theoretical computer science to you? Like what just early on in your life, or in general, have captivated you and just grabbed you? I think I'm going to have to go with the idea of universality. You know, if you're really asking for the most beautiful. I mean, so universality is the idea that, you know, you put together a few simple operations, like in the case of Boolean logic, that might be the AND gate, the OR gate, the NOT gate, right? And then your first guess is, okay, this is a good start, but obviously, as I want to do more complicated things, I'm going to need more complicated building blocks to express that, right? And that was actually my guess when I first learned what programming was. I mean, when I was, you know, an adolescent and someone showed me Apple basic, and then, you know, GW basic, if anyone listening remembers that. Okay. But, you know, I thought, okay, well, now, you know, I mean, I thought I felt like this is a revelation. You know, it's like finding out where babies come from. It's like that level of, you know, why didn't anyone tell me this before, right? But I thought, okay, this is just the beginning. Now I know how to write a basic program, but, you know, really write an interesting program, like, you know, a video game, which had always been my dream as a kid to, you know, create my own Nintendo games, right? You know, but, you know, obviously I'm going to need to learn some way more complicated form of programming than that. Okay. But, you know, eventually I learned this incredible idea of universality. And that says that, no, you throw in a few rules and then you already have enough to express everything. Okay. So for example, the AND, the OR and the NOT gate can all, or in fact, even just the AND and the NOT gate, or even just the NAND gate, for example, is already enough to express any Boolean function on any number of bits. You just have to string together enough of them. You can build a universe with NAND gates. You can build the universe out of NAND gates. Yeah. You know, the simple instructions of BASIC are already enough, at least in principle, you know, if we ignore details like how much memory can be accessed and stuff like that, that is enough to express what could be expressed by any programming language whatsoever. And the way to prove that is very simple. We simply need to show that in BASIC or whatever, we could write an interpreter or a compiler for whatever other programming language we care about, like C or Java or whatever. And as soon as we had done that, then ipso facto, anything that's expressible in C or Java is also expressible in BASIC. Okay. And so this idea of universality, you know, goes back at least to Alan Turing in the 1930s when, you know, he wrote down this incredibly simple pared down model of a computer, the Turing machine, right, which, you know, he pared down the instruction set to just read a symbol, you know, write a symbol, move to the left, move to the right, halt, change your internal state, right? That's it. Okay. And anybody proved that, you know, this could simulate all kinds of other things, you know, and so in fact, today we would say, well, we would call it a Turing universal model of computation that is, you know, just as it has just the same expressive power that BASIC or Java or C++ or any of those other languages have because anything in those other languages could be compiled down to Turing machine. Now, Turing also proved a different related thing, which is that there is a single Turing machine that can simulate any other Turing machine if you just describe that other machine on its tape, right? And likewise, there is a single Turing machine that will run any C program, you know, if you just put it on its tape. That's a second meaning of universality. First of all, he couldn't visualize it and that was in the 30s. Yeah, the 30s. That's right. That's before computers really, I mean, I don't know how, I wonder what that felt like, you know, learning that there's no Santa Claus or something. Because I don't know if that's empowering or paralyzing because it doesn't give you any, it's like you can't write a software engineering book and make that the first chapter and say we're done. Well, I mean, right. I mean, in one sense, it was this enormous flattening of the universe. Yes. I had imagined that there was going to be some infinite hierarchy of more and more powerful programming languages, you know, and then I kicked myself for having such a stupid idea. But apparently, Gödel had had the same conjecture in the 30s. Oh, good. You're in good company. Yeah. And then Gödel read Turing's paper and he kicked himself and he said, yeah, I was completely wrong about that. But I had thought that maybe where I can contribute will be to invent a new more powerful programming language that lets you express things that could never be expressed in BASIC. And how would you do that? Obviously, you couldn't do it itself in BASIC. But there is this incredible flattening that happens once you learn what is universality. But then it's also an opportunity because it means once you know these rules, then the sky is the limit, right? Then you have kind of the same weapons at your disposal that the world's greatest programmer has. It's now all just a question of how you wield them. Right. Exactly. So every problem is solvable, but some problems are harder than others. Well, yeah, there's the question of how much time, you know, of how hard is it to write a program? And then there's also the questions of what resources does the program need? You know, how much time, how much memory? Those are much more complicated questions. Of course, ones that we're still struggling with today. Exactly. So you've, I don't know if you created Complexity Zoo or... I did create the Complexity Zoo. What is it? What's complexity? Oh, all right, all right, all right. Complexity theory is the study of sort of the inherent resources needed to solve computational problems, okay? So it's easiest to give an example. Like, let's say we want to add two numbers, right? If I want to add them, you know, if the numbers are twice as long, then it only, it will take me twice as long to add them, but only twice as long, right? It's no worse than that. Or a computer. For a computer or for a person. We're using pencil and paper, for that matter. If you have a good algorithm. Yeah, that's right. I mean, even if you just use the elementary school algorithm of just carrying, you know, then it takes time that is linear in the length of the numbers, right? Now, multiplication, if you use the elementary school algorithm, is harder because you have to multiply each digit of the first number by each digit of the second one. And then deal with all the carries. So that's what we call a quadratic time algorithm, right? If the numbers become twice as long, now you need four times as much time, okay? So now, as it turns out, people discovered much faster ways to multiply numbers using computers. And today we know how to multiply two numbers that are n digits long using a number of steps that's nearly linear in n. These are questions you can ask. But now, let's think about a different thing that people, you know, they've encountered in elementary school, factoring a number. Okay? Take a number and find its prime factors, right? And here, you know, if I give you a number with ten digits, I ask you for its prime factors. Well, maybe it's even, so you know that two is a factor. You know, maybe it ends in zero, so you know that ten is a factor, right? But, you know, other than a few obvious things like that, you know, if the prime factors are all very large, then it's not clear how you even get started, right? You know, it seems like you have to do an exhaustive search among an enormous number of factors. Now, and as many people might know, for better or worse, the security, you know, of most of the encryption that we currently use to protect the internet is based on the belief, and this is not a theorem, it's a belief, that factoring is an inherently hard problem for our computers. We do know algorithms that are better than just trial division, than just trying all the possible divisors, but they are still basically exponential. And exponential is hard. Yeah, exactly. So the fastest algorithms that anyone has discovered, at least publicly discovered, you know, I'm assuming that the NSA doesn't know something better, okay? But they take time that basically grows exponentially with the cube root of the size of the number that you're factoring, right? So that cube root, that's the part that takes all the cleverness, okay? But there's still an exponential. There's still an exponentiality there. But what that means is that, like, when people use a thousand bit keys for their cryptography, that can probably be broken using the resources of the NSA or the world's other intelligence agencies. You know, people have done analyses that say, you know, with a few hundred million dollars of computer power, they could totally do this. And if you look at the documents that Snowden released, you know, it looks a lot like they are doing that or something like that. It would kind of be surprising if they weren't, okay? But, you know, if that's true, then in some ways that's reassuring. Because if that's the best that they can do, then that would say that they can't break 2,000 bit numbers, right? Then 2,000 bit numbers would be beyond what even they could do. They haven't found an efficient algorithm. That's where all the worries and the concerns of quantum computing came in, that there could be some kind of shortcut around that. Right. So complexity theory is a huge part of, let's say, the theoretical core of computer science. You know, it started in the 60s and 70s as, you know, sort of an autonomous field. So it was, you know, already, you know, I mean, you know, it was well developed even by the time that I was born, okay? But in 2002, I made a website called the Complexity Zoo, to answer your question, where I just tried to catalog the different complexity classes, which are classes of problems that are solvable with different kinds of resources, okay? So these are kind of, you know, you could think of complexity classes as like being almost to theoretical computer science, like what the elements are to chemistry, right? They're sort of, you know, there are our most basic objects in a certain way. I feel like the elements have a characteristic to them where you can't just add an infinite number. Well, you could, but beyond a certain point, they become unstable, right? Right. So it's like, you know, in theory, you can have atoms with, you know, and look, look, I mean, I mean, a neutron star, you know, is a nucleus with, you know, uncalled billions of neutrons in it, of hadrons in it, okay? But, you know, for sort of normal atoms, right, probably you can't get much above a hundred atomic weight, 150 or so, or sorry, sorry, I mean, beyond 150 or so protons without it, you know, very quickly fissioning. With complexity classes, well, yeah, you can have an infinity of complexity classes, but, you know, maybe there's only a finite number of them that are particularly interesting, right? Just like with anything else, you know, you care about some more than about others. So what kind of interesting classes are there? I mean, you could have just, maybe say, what are the, if you take any kind of computer science class, what are the classes you learn? Good. Let me tell you sort of the biggest ones, the ones that you would learn first. So, you know, first of all, there is P, that's what it's called, okay? It stands for polynomial time. And this is just the class of all of the problems that you could solve with a conventional computer, like your iPhone or your laptop, you know, by a completely deterministic algorithm, right? Using a number of steps that grows only like the size of the input raised to some fixed power, okay? So, if your algorithm is linear time, like, you know, for adding numbers, okay, that problem is in P. If you have an algorithm that's quadratic time, like the elementary school algorithm for multiplying two numbers, that's also in P, even if it was the size of the input to the 10th power or to the 50th power, well, that wouldn't be very good in practice. But, you know, formally, we would still count that, that would still be in P, okay? But if your algorithm takes exponential time, meaning like if every time I add one more data point to your input, if the time needed by the algorithm doubles, if you need time like two to the power of the amount of input data, then that we call an exponential time algorithm, okay? And that is not polynomial, okay? So, P is all of the problems that have some polynomial time algorithm, okay? So, that includes most of what we do with our computers on a day to day basis, you know, all the, you know, sorting, basic arithmetic, you know, whatever is going on in your email reader or in Angry Birds, okay? It's all in P. Then the next super important class is called NP. That stands for non deterministic polynomial, okay? It does not stand for not polynomial, which is a common confusion. But NP was basically all of the problems where if there is a solution, then it is easy to check the solution if someone shows it to you, okay? So, actually a perfect example of a problem in NP is factoring, the one I told you about before. Like if I gave you a number with thousands of digits and I told you that, you know, I asked you, does this have at least three non trivial divisors, right? That might be a super hard problem to solve, right? It might take you millions of years using any algorithm that's known, at least running on our existing computers, okay? But if I simply showed you the divisors, I said, here are three divisors of this number, then it would be very easy for you to ask your computer to just check each one and see if it works. Just divide it in, see if there's any remainder, right? And if they all go in, then you've checked. Well, I guess there were, right? So any problem where, you know, wherever there's a solution, there is a short witness that can be easily, like a polynomial size witness that can be checked in polynomial time, that we call an NP problem, okay? And yeah, so every problem that's in P is also in NP, right? Because, you know, you could always just ignore the witness and just, you know, if a problem is in P, you can just solve it yourself, okay? But now, in some sense, the central, you know, mystery of theoretical computer science is every NP problem in P. So if you can easily check the answer to a computational problem, does that mean that you can also easily find the answer? Even though there's all these problems that appear to be very difficult to find the answer, it's still an open question whether a good answer exists. Because no one has proven that there's no way to do it. It's arguably the most, I don't know, the most famous, the most maybe interesting, maybe you disagree with that, problem in theoretical computer science. So what's your The most famous, for sure. P equals NP. If you were to bet all your money, where do you put your money? That's an easy one. P is not equal to NP. I like to say that if we were physicists, we would have just declared that to be a law of nature, you know, just like thermodynamics. That's hilarious. Given ourselves Nobel Prizes for its discovery. Yeah, you know, and look, if later it turned out that we were wrong, we just give ourselves more Nobel Prizes. So harsh, but so true. I mean, no, I mean, I mean, it's really just because we are mathematicians or descended from mathematicians, you know, we have to call things conjectures that other people would just call empirical facts or discoveries, right? But one shouldn't read more into that difference in language, you know, about the underlying truth. So, okay, so you're a good investor and good spender of money. So then let me ask another way. Is it possible at all? And what would that look like if P indeed equals NP? Well, I do think that it's possible. I mean, in fact, you know, when people really pressed me on my blog for what odds would I put, I put, you know, two or three percent odds. Wow, that's pretty good. That P equals NP. Yeah. Well, because, you know, when P, I mean, you really have to think about, like, if there were 50, you know, mysteries like P versus NP, and if I made a guess about every single one of them, would I expect to be right 50 times? Right? And the truthful answer is no. Okay. Yeah. So, you know, and that's what you really mean in saying that, you know, you have, you know, better than 98% odds for something. Okay. But so, yeah, you know, I mean, there could certainly be surprises. And look, if P equals NP, well, then there would be the further question of, you know, is the algorithm actually efficient in practice? Right? I mean, Don Knuth, who I know that you've interviewed as well, right, he likes to conjecture that P equals NP, but that the algorithm is so inefficient that it doesn't matter anyway. Right? No, I don't know. I've listened to him say that. I don't know whether he says that just because he has an actual reason for thinking it's true or just because it sounds cool. Yeah. Okay. But, you know, that's a logical possibility, right, that the algorithm could be n to the 10,000 time, or it could even just be n squared time, but with a leading constant of, it could be a Google times n squared or something like that. And in that case, the fact that P equals NP, well, it would ravage the whole theory of complexity. We would have to rebuild from the ground up. But in practical terms, it might mean very little, right, if the algorithm was too inefficient to run. If the algorithm could actually be run in practice, like if it had small enough constants, or if you could improve it to where it had small enough constants that was efficient in practice, then that would change the world. Okay? You think it would have, like, what kind of impact would it have? Well, okay, I mean, here's an example. I mean, you could, well, okay, just for starters, you could break basically all of the encryption that people use to protect the internet. That's just for starters. You could break Bitcoin and every other cryptocurrency, or, you know, mine as much Bitcoin as you wanted, right? You know, become a super duper billionaire, right? And then plot your next move. Right. That's just for starters. That's a good point. Now, your next move might be something like, you know, you now have, like, a theoretically optimal way to train any neural network, to find parameters for any neural network, right? So you could now say, like, is there any small neural network that generates the entire content of Wikipedia, right? If, you know, and now the question is not, can you find it? The question has been reduced to, does that exist or not? If it does exist, then the answer would be, yes, you can find it, okay? If you had this algorithm in your hands, okay? You could ask your computer, you know, I mean, P versus NP is one of these seven problems that carries this million dollar prize from the Clay Foundation. You know, if you solve it, you know, and others are the Riemann hypothesis, the Poincare conjecture, which was solved, although the solver turned down the prize, right, and four others. But what I like to say, the way that we can see that P versus NP is the biggest of all of these questions is that if you had this fast algorithm, then you could solve all seven of them, okay? You just ask your computer, you know, is there a short proof of the Riemann hypothesis, right? You know, that a machine could, in a language where a machine could verify it, and provided that such a proof exists, then your computer finds it in a short amount of time without having to do a brute force search, okay? So, I mean, those are the stakes of what we're talking about. But I hope that also helps to give your listeners some intuition of why I and most of my colleagues would put our money on P not equaling NP. Is it possible, I apologize this is a really dumb question, but is it possible to, that a proof will come out that P equals NP, but an algorithm that makes P equals NP is impossible to find? Is that like crazy? Okay, well, if P equals NP, it would mean that there is such an algorithm. That it exists, yeah. But, you know, it would mean that it exists. Now, you know, in practice, normally the way that we would prove anything like that would be by finding the algorithm. But there is such a thing as a nonconstructive proof that an algorithm exists. You know, this has really only reared its head, I think, a few times in the history of our field, right? But, you know, it is theoretically possible that such a thing could happen. But, you know, there are, even here, there are some amusing observations that one could make. So there is this famous observation of Leonid Levin, who was, you know, one of the original discoverers of NP completeness, right? And he said, we'll consider the following algorithm that I guarantee will solve the NP problems efficiently, just as provided that P equals NP, okay? Here is what it does. It just runs, you know, it enumerates every possible algorithm in a gigantic infinite list, right? From like in like alphabetical order, right? You know, and many of them maybe won't even compile, so we just ignore those, okay? But now, we just, you know, run the first algorithm, then we run the second algorithm, we run the first one a little bit more, then we run the first three algorithms for a while, we run the first four for a while. This is called dovetailing, by the way. This is a known trick in theoretical computer science, okay? But we do it in such a way that, you know, whatever is the algorithm out there in our list that solves NP complete, you know, the NP problems efficiently, will eventually hit that one, right? And now, the key is that whenever we hit that one, you know, by assumption, it has to solve the problem, it has to find the solution, and once it claims to find a solution, then we can check that ourselves, right? Because these are NP problems, then we can check it. Now, this is utterly impractical, right? You know, you'd have to do this enormous exhaustive search among all the algorithms, but from a certain theoretical standpoint, that is merely a constant prefactor, right? That's merely a multiplier of your running time. So, there are tricks like that one can do to say that, in some sense, the algorithm would have to be constructive. But, you know, in the human sense, you know, it is possible that to, you know, it's conceivable that one could prove such a thing via a nonconstructive method. Is that likely? I don't think so. Not personally. So, that's P and NP, but the complexity zoo is full of wonderful creatures. Well, it's got about 500 of them. 500. So, how do you get, yeah, how do you get more? I mean, just for starters, there is everything that we could do with a conventional computer with a polynomial amount of memory, okay, but possibly an exponential amount of time, because we get to reuse the same memory over and over again. Okay, that is called P space, okay? And that's actually, we think, an even larger class than NP. Okay, well, P is contained in NP, which is contained in P space. And we think that those containments are strict. And the constraint there is on the memory. The memory has to grow polynomially with the size of the process. That's right. That's right. But in P space, we now have interesting things that were not in NP, like as a famous example, you know, from a given position in chess, you know, does white or black have the win? Let's say, assuming provided that the game lasts only for a reasonable number of moves, okay? Or likewise, for go, okay? And, you know, even for the generalizations of these games to arbitrary size boards, because with an eight by eight board, you could say that's just a constant size problem. You just, you know, in principle, you just solve it in O of one time, right? But so we really mean the generalizations of, you know, games to arbitrary size boards here. Or another thing in P space would be, like, I give you some really hard constraint satisfaction problem, like, you know, a traveling salesperson or, you know, packing boxes into the trunk of your car or something like that. And I ask, not just is there a solution, which would be an NP problem, but I ask how many solutions are there, okay? That, you know, count the number of valid solutions. That actually gives, those problems lie in a complexity class called sharp P, or like, it looks like hashtag, like hashtag P, okay, which sits between NP and P space. There's all the problems that you can do in exponential time, okay? That's called exp. So, and by the way, it was proven in the 60s that exp is larger than P, okay? So we know that much. We know that there are problems that are solvable in exponential time that are not solvable in polynomial time, okay? In fact, we even know, we know that there are problems that are solvable in n cubed time that are not solvable in n squared time. And that, those don't help us with a controversy between P and NP at all. Unfortunately, it seems not, or certainly not yet, right? The techniques that we use to establish those things, they're very, very related to how Turing proved the unsolvability of the halting problem, but they seem to break down when we're comparing two different resources, like time versus space, or like, you know, P versus NP, okay? But, you know, I mean, there's what you can do with a randomized algorithm, right? That can be done with a random algorithm, right? That can sometimes, you know, has some probability of making a mistake. That's called BPP, bounded error probabilistic polynomial time. And then, of course, there's one that's very close to my own heart, what you can efficiently do in polynomial time using a quantum computer, okay? And that's called BQP, right? And so, you know, what's understood about it? Okay, so P is contained in BPP, which is contained in BQP, which is contained in P space, okay? So anything you can, in fact, in something very similar to sharp P. BQP is basically, you know, well, it's contained in like P with the magic power to solve sharp P problems, okay? Why is BQP contained in P space? Oh, that's an excellent question. So there is, well, I mean, one has to prove that, okay? But the proof, you could think of it as using Richard Feynman's picture of quantum mechanics, which is that you can always, you know, we haven't really talked about quantum mechanics in this conversation. We did in our previous one. Yeah, we did last time. But yeah, we did last time, okay? But basically, you could always think of a quantum computation as like a branching tree of possibilities where each possible path that you could take through, you know, the space has a complex number attached to it called an amplitude, okay? And now the rule is, you know, when you make a measurement at the end, well, you see a random answer, okay? But quantum mechanics is all about calculating the probability that you're going to see one potential answer versus another one, right? And the rule for calculating the probability that you'll see some answer is that you have to add up the amplitudes for all of the paths that could have led to that answer. And then, you know, that's a complex number, so that, you know, how could that be a probability? Then you take the squared absolute value of the result. That gives you a number between zero and one, okay? So yeah, I just summarized quantum mechanics in like 30 seconds, okay? But now, you know, what this already tells us is that anything I can do with a quantum computer, I could simulate with a classical computer if I only have exponentially more time, okay? And why is that? Because if I have exponential time, I could just write down this entire branching tree and just explicitly calculate each of these amplitudes, right? You know, that will be very inefficient, but it will work, right? It's enough to show that quantum computers could not solve the halting problem or, you know, they could never do anything that is literally uncomputable in Turing's sense, okay? But now, as I said, there's even a stronger result which says that BQP is contained in PSPACE. The way that we prove that is that we say, if all I want is to calculate the probability of some particular output happening, you know, which is all I need to simulate a quantum computer, really, then I don't need to write down the entire quantum state, which is an exponentially large object. All I need to do is just calculate what is the amplitude for that final state. And to do that, I just have to sum up all the amplitudes that lead to that state. Okay, so that's an exponentially large sum, but I can calculate it just reusing the same memory over and over for each term in the sum. And hence the p, in the PSPACE? Hence the PSPACE. Yeah. So what, out of that whole complexity zoo, and it could be BQP, what do you find is the most, the class that captured your heart the most, the most beautiful class that's just, yeah. I used, as my email address, bqpqpoly at gmail.com. Yes, because BQP slash Qpoly, well, you know, amazingly no one had taken it. Amazing, amazing. But, you know, this is a class that I was involved in sort of defining, proving the first theorems about in 2003 or so. So it was kind of close to my heart. But this is like, if we extended BQP, which is the class of everything we can do efficiently with a quantum computer, to allow quantum advice, which means imagine that you had some special initial state, okay, that could somehow help you do computation. And maybe such a state would be exponentially hard to prepare, okay, but maybe somehow these states were formed in the Big Bang or something, and they've just been sitting around ever since, right? If you found one, and if this state could be like ultra power, there are no limits on how powerful it could be, except that this state doesn't know in advance which input you've got, right? It only knows the size of your input. You know, and that's BQP slash Qpoly. So that's one that I just personally happen to love, okay? But, you know, if you're asking like what's the, you know, there's a class that I think is way more beautiful or fundamental than a lot of people even within this field realize that it is. That class is called SZK, or Statistical Zero Knowledge. And, you know, there's a very, very easy way to define this class, which is to say, suppose that I have two algorithms that each sample from probability distributions, right? So each one just outputs random samples according to, you know, possibly different distributions. And now the question I ask is, you know, let's say distributions over strings of n bits, you know, so over an exponentially large space. Now I ask, are these two distributions close or far as close or far as probability distributions? Okay. Any problem that can be reduced to that, you know, that can be put into that form is an SZK problem. And the way that this class was originally discovered was completely different from that and was kind of more complicated. It was discovered as the class of all of the problems that have a certain kind of what's called zero knowledge proof. Zero knowledge proofs are one of the central ideas in cryptography. You know, Shafi Goldwasser and Silvio McCauley won the Turing Award for, you know, inventing them. And they're at the core of even some cryptocurrencies that, you know, people use nowadays. But zero knowledge proofs are ways of proving to someone that something is true, like, you know, that there is a solution to this, you know, optimization problem or that these two graphs are isomorphic to each other or something, but without revealing why it's true, without revealing anything about why it's true. Okay. SZK is all of the problems for which there is such a proof that doesn't rely on any cryptography. Okay. And if you wonder, like, how could such a thing possibly exist, right? Well, like, imagine that I had two graphs and I wanted to convince you that these two graphs are not isomorphic, meaning, you know, I cannot permute one of them so that it's the same as the other one, right? You know, that might be a very hard statement to prove, right? I might need, you know, you might have to do a very exhaustive enumeration of, you know, all the different permutations before you were convinced that it was true. But what if there were some all knowing wizard that said to you, look, I'll tell you what, just pick one of the graphs randomly, then randomly permute it, then send it to me and I will tell you which graph you started with. Okay. And I will do that every single time. Right. And let's say that that wizard did that a hundred times and it was right every time. Yeah. Right. Now, if the graphs were isomorphic, then, you know, it would have been flipping a coin each time, right? It would have had only a one and two to the 100 power chance of, you know, of guessing right each time. But, you know, so, so if it's right every time, then now you're statistically convinced that these graphs are not isomorphic, even though you've learned nothing new about why they aren't. So fascinating. So yeah. So, so SDK is all of the problems that have protocols like that one, but it has this beautiful other characterization. It's shown up again and again in my, in my own work and, you know, a lot of people's work. And I think that it really is one of the most fundamental classes. It's just that people didn't realize that when it was first discovered. So we're living in the middle of a pandemic currently. Yeah. How has your life been changed or no better to ask, like, how has your perspective of the world change with this world changing event of a pandemic overtaking the entire world? Yeah. Well, I mean, I mean, all of our lives have changed, you know, like, I guess, as with no other event since I was born, you know, you would have to go back to world war II for something, I think of this magnitude, you know, on, you know, the way that we live our lives as for how it has changed my worldview. I think that the, the failure of institutions, you know, like, like, like the CDC, like, you know, other institutions that we sort of thought were, were trustworthy, like a lot of the media was staggering, was, was absolutely breathtaking. It is something that I would not have predicted. Right. I think I, I wrote on my blog that, you know, the, you know, it's, it's, it's fascinating to like rewatch the movie Contagion from a decade ago, right. That correctly foresaw so many aspects of, you know, what was going on, you know, an airborne, you know, virus originates in China, spreads to, you know, much of the world, you know, shuts everything down until a vaccine can be developed. You know, everyone has to stay at home, you know, you know, it gets, you know, an enormous number of things, right. Okay. But the one thing that they could not imagine, you know, is that like in this movie, everyone from the government is like hyper competent, hyper, you know, dedicated to the public good, right. And you know, yeah, they're the, they're the best of the best, you know, they could, you know, and, and there are these conspiracy theorists, right. Who think, you know, you know, this is all fake news. There's no, there's not really a pandemic. And those are some random people on the internet who the hyper competent government people have to, you know, oppose, right. They, you know, in, in trying to envision the worst thing that could happen, like, you know, the, the, there was a failure of imagination. The movie makers did not imagine that the conspiracy theorists and the, you know, and the incompetence and the nutcases would have captured our institutions and be the ones actually running things. So you had a certain, I love competence in all walks of life. I love, I get so much energy. I'm so excited by people who do amazing job. And I like you, or maybe you can clarify, but I had maybe not intuition, but I hope that government at its best could be ultra competent. What, first of all, two questions, like how do you explain the lack of confidence and the other, maybe on the positive side, how can we build a more competent government? Well, there's an election in two months. I mean, you have a faith that the election, I, you know, it's not going to fix everything, but you know, it's like, I feel like there is a ship that is sinking and you could at least stop the sinking. But, you know, I think that there are much, much deeper problems. I mean, I think that, you know, it is plausible to me that, you know, a lot of the failures, you know, with the CDC, with some of the other health agencies, even, you know, predate Trump, you know, predate the, you know, right wing populism that has sort of taken over much of the world now. And, you know, I think that, you know, it is, you know, it is very, I'm actually, you know, I've actually been strongly in favor of, you know, rushing vaccines of, you know, I thought that we could have done, you know, human challenge trials, you know, which were not done, right? We could have, you know, like had, you know, volunteers, you know, to actually, you know, be, you know, get vaccines, get, you know, exposed to COVID. So innovative ways of accelerating what we've done previously over a long time. I thought that, you know, each month that a vaccine is closer is like trillions of dollars. Are you surprised? And of course, lives, you know, at least, you know, hundreds of thousands of lives. Are you surprised that it's taking this long? We still don't have a plan. There's still not a feeling like anyone is actually doing anything in terms of alleviating, like any kind of plan. So there's a bunch of stuff, there's vaccine, but you could also do a testing infrastructure where everybody's tested nonstop with contact tracing, all that kind of. Well, I mean, I'm as surprised as almost everyone else. I mean, this is a historic failure. It is one of the biggest failures in the 240 year history of the United States, right? And we should be, you know, crystal clear about that. And, you know, one thing that I think has been missing, you know, even from the more competent side is like, you know, is sort of the World War II mentality, right? The, you know, the mentality of, you know, let's just, you know, you know, if we can, by breaking a whole bunch of rules, you know, get a vaccine and, you know, and even half the amount of time as we thought, then let's just do that because, you know, like we have to weigh all of the moral qualms that we have about doing that against the moral qualms of not doing. And one key little aspect to that that's deeply important to me, and we'll go into that topic next, is the World War II mentality wasn't just about, you know, breaking all the rules to get the job done. There was a togetherness to it. So I would, if I were president right now, it seems quite elementary to unite the country because we're facing a crisis. It's easy to make the virus the enemy. And it's very surprising to me that the division has increased as opposed to decrease. That's heartbreaking. Yeah. Well, look, I mean, it's been said by others that this is the first time in the country's history that we have a president who does not even pretend to, you know, want to unite the country. I mean, Lincoln, who fought a civil war, said he wanted to unite the country. And I do worry enormously about what happens if the results of this election are contested. And will there be violence as a result of that? And will we have a clear path of succession? And, you know, look, I mean, you know, this is all we're going to find out the answers to this in two months. And if none of that happens, maybe I'll look foolish. But I am willing to go on the record and say, I am terrified about that. Yeah, I've been reading The Rise and Fall of the Third Reich. So if I can, this is like one little voice just to put out there that I think November will be a really critical month for people to breathe and put love out there. Do not, you know, anger in those in that context, no matter who wins, no matter what is said, will destroy our country, may destroy our country, may destroy the world because of the power of the country. So it's really important to be patient, loving, empathetic. Like one of the things that troubles me is that even people on the left are unable to have a love and respect for people who voted for Trump. They can't imagine that there's good people that could vote for the opposite side. Oh, I know there are because I know some of them, right? I mean, you know, it's still, you know, maybe it baffles me, but, you know, I know such people. Let me ask you this. It's also heartbreaking to me on the topic of cancel culture. So in the machine learning community, I've seen it a little bit that there's aggressive attacking of people who are trying to have a nuanced conversation about things. And it's troubling because it feels like nuanced conversation is the only way to talk about difficult topics. And when there's a thought police and speech police on any nuanced conversation that everybody has to like in a animal farm chant that racism is bad and sexism is bad, which is things that everybody believes and they can't possibly say anything nuanced. It feels like it goes against any kind of progress from my kind of shallow perspective. But you've written a little bit about cancel culture. Do you have thoughts there? Well, I mean, to say that I am opposed to, you know, this trend of cancellations or of shouting people down rather than engaging them, that would be a massive understatement, right? And I feel like, you know, I have put my money where my mouth is, you know, not as much as some people have, but, you know, I've tried to do something. I mean, I have defended, you know, some unpopular people and unpopular, you know, ideas on my blog. I've, you know, tried to defend, you know, norms of open discourse, of, you know, reasoning with our opponents, even when I've been shouted down for that on social media, you know, called a racist, called a sexist, all of those things. And which, by the way, I should say, you know, I would be perfectly happy to, you know, if we had time to say, you know, you know, 10,000 times, you know, my hatred of racism, of sexism, of homophobia, right? But what I don't want to do is to cede to some particular political faction the right to define exactly what is meant by those terms to say, well, then you have to agree with all of these other extremely contentious positions or else you are a misogynist or else you are a racist, right? I say that, well, no, you know, don't I or, you know, don't people like me also get a say in the discussion about, you know, what is racism, about what is going to be the most effective to combat racism, right? And, you know, this cancellation mentality, I think, is spectacularly ineffective at its own professed gall of, you know, combating racism and sexism. What's a positive way out? So I, I try to, I don't know if you see what I do on Twitter, but I, on Twitter, I mostly, in my whole, in my life, I've actually, it's who I am to the core is like, I really focus on the positive and I try to put love out there in the world. And still, I get attacked. And I look at that and I wonder like, You too? I didn't know. Like, I haven't actually said anything difficult and nuanced. You talk about somebody like Steven Pinker, who I'm actually don't know the full range of things that he's attacked for, but he tries to say difficult. He tries to be thoughtful about difficult topics. He does. And obviously he just gets slaughtered by. Well, I mean, yes, but it's also amazing how well Steve has withstood it. I mean, he just survived that attempt to cancel him just a couple of months ago, right? Psychologically, he survives it too, which worries me because I don't think I can. Yeah, I've gotten to know Steve a bit. He is incredibly unperturbed by this stuff. And I admire that and I envy it. I wish that I could be like that. I mean, my impulse when I'm getting attacked is I just want to engage every single like anonymous person on Twitter and Reddit who is saying mean stuff about me. And I want to just say, well, look, can we just talk this over for an hour? And then you'll see that I'm not that bad. And sometimes that even works. The problem is then there's the 20,000 other ones. That's not, but psychologically, does that wear on you? It does. It does. But yeah, I mean, in terms of what is the solution, I mean, I wish I knew, right? And so in a certain way, these problems are maybe harder than P versus NP, right? I mean, but I think that part of it has to be that I think that there's a lot of sort of silent support for what I'll call the open discourse side, the reasonable enlightenment side. And I think that that support has to become less silent, right? I think that a lot of people just sort of agree that a lot of these cancellations and attacks are ridiculous, but are just afraid to say so, right? Or else they'll get shouted down as well, right? That's just the standard witch hunt dynamic, which, of course, this faction understands and exploits to its great advantage. But more people just said, we're not going to stand for this, right? This is, guess what? We're against racism too. But what you're doing is ridiculous, right? And the hard part is it takes a lot of mental energy. It takes a lot of time. Even if you feel like you're not going to be canceled or you're staying on the safe side, it takes a lot of time to phrase things in exactly the right way and to respond to everything people say. So, but I think that the more people speak up from all political persuasions, from all walks of life, then the easier it is to move forward. Since we've been talking about love, can you, last time I talked to you about meaning of life a little bit, but here has, it's a weird question to ask a computer scientist, but has love for other human beings, for things, for the world around you played an important role in your life? Have you, it's easy for a world class computer scientist, you could even call yourself like a physicist, everything to be lost in the books. Is the connection to other humans, love for other humans played an important role? I love my kids. I love my wife. I love my parents. I'm probably not different from most people in loving their families and in that being very important in my life. Now, I should remind you that I am a theoretical computer scientist. If you're looking for deep insight about the nature of love, you're probably looking in the wrong place to ask me, but sure, it's been important. But is there something from a computer science perspective to be said about love? Is that even beyond into the realm of consciousness? There was this great cartoon, I think it was one of the classic XKCDs where it shows a heart and it's squaring the heart, taking the four year transform of the heart, integrating the heart, each thing and then it says my normal approach is useless here. I'm so glad I asked this question. I think there's no better way to end this. I hope we get a chance to talk again. This has been an amazing, cool experiment to do it outside. I'm really glad you made it out. Yeah. Well, I appreciate it a lot. It's been a pleasure and I'm glad you were able to come out to Austin. Thanks. Thanks for listening to this conversation with Scott Aaronson. And thank you to our sponsors, 8sleep, SimpliSafe, ExpressVPN, and BetterHelp. Please check out these sponsors in the description to get a discount and to support this podcast. If you enjoy this thing, subscribe on YouTube, review it with five stars on Apple Podcast, follow on Spotify, support on Patreon, or connect with me on Twitter at Lex Friedman. And now let me leave you with some words from Scott Aaronson that I also gave to you in the introduction, which is, if you always win, then you're probably doing something wrong. Thank you for listening and for putting up with the intro and outro in this strange room in the middle of nowhere. And I very much hope to see you next time in many more ways than one.